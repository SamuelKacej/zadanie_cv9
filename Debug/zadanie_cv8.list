
zadanie_cv8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dc4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  08004f50  08004f50  00014f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800520c  0800520c  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  0800520c  0800520c  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800520c  0800520c  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800520c  0800520c  0001520c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005210  08005210  00015210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08005214  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000020c  08005420  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08005420  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b042  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e2d  00000000  00000000  0002b27e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000858  00000000  00000000  0002d0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000770  00000000  00000000  0002d908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e4ff  00000000  00000000  0002e078  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000078cf  00000000  00000000  0004c577  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a5e88  00000000  00000000  00053e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9cce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029a0  00000000  00000000  000f9d4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000020c 	.word	0x2000020c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f34 	.word	0x08004f34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000210 	.word	0x20000210
 80001c4:	08004f34 	.word	0x08004f34

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	683a      	ldr	r2, [r7, #0]
 8000b0e:	619a      	str	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr

08000b38 <DISPLAY_displayCurStr>:
void updateCurPos(uint8_t *prevPos, uint8_t shiftDir);
void updateShiftDir(uint8_t curPos, uint8_t *shiftDir);
void setCurStr(uint8_t curPos);

//functions to handle multiplexing of the currently displaying alphanum char
void DISPLAY_displayCurStr(){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	static uint8_t curActDig = 0;
	resetAllDigits();
 8000b3e:	f000 f8bf 	bl	8000cc0 <resetAllDigits>

	updateAlphanumChar( segVal_ASCII[ toupper(curStr[curActDig]) - '0'] );
 8000b42:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <DISPLAY_displayCurStr+0x78>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <DISPLAY_displayCurStr+0x7c>)
 8000b4a:	5c9b      	ldrb	r3, [r3, r2]
 8000b4c:	71fb      	strb	r3, [r7, #7]
 8000b4e:	f002 fcb7 	bl	80034c0 <__locale_ctype_ptr>
 8000b52:	4602      	mov	r2, r0
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	3301      	adds	r3, #1
 8000b58:	4413      	add	r3, r2
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d102      	bne.n	8000b6a <DISPLAY_displayCurStr+0x32>
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	3b20      	subs	r3, #32
 8000b68:	e000      	b.n	8000b6c <DISPLAY_displayCurStr+0x34>
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	3b30      	subs	r3, #48	; 0x30
 8000b6e:	4a12      	ldr	r2, [pc, #72]	; (8000bb8 <DISPLAY_displayCurStr+0x80>)
 8000b70:	5cd3      	ldrb	r3, [r2, r3]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f822 	bl	8000bbc <updateAlphanumChar>
	updateDecimalPoint(curActDig);
 8000b78:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <DISPLAY_displayCurStr+0x78>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f000 f849 	bl	8000c14 <updateDecimalPoint>
	setDigit(curActDig);
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <DISPLAY_displayCurStr+0x78>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f862 	bl	8000c50 <setDigit>
	curActDig++;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <DISPLAY_displayCurStr+0x78>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <DISPLAY_displayCurStr+0x78>)
 8000b96:	701a      	strb	r2, [r3, #0]
	curActDig %= 4;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <DISPLAY_displayCurStr+0x78>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	4b03      	ldr	r3, [pc, #12]	; (8000bb0 <DISPLAY_displayCurStr+0x78>)
 8000ba4:	701a      	strb	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20000229 	.word	0x20000229
 8000bb4:	2000023c 	.word	0x2000023c
 8000bb8:	08004f50 	.word	0x08004f50

08000bbc <updateAlphanumChar>:

void updateAlphanumChar(uint8_t segmentValues){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	71fb      	strb	r3, [r7, #7]
	resetAllSegments();
 8000bc6:	f000 f85b 	bl	8000c80 <resetAllSegments>
	for(int i = 0; i<(NUM_SEG-1); i++){
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e015      	b.n	8000bfc <updateAlphanumChar+0x40>
		if(segmentValues & (0x01<<i)) LL_GPIO_ResetOutputPin((GPIO_TypeDef*)seg_Ports[i], (uint32_t)seg_Pins[i]);
 8000bd0:	79fa      	ldrb	r2, [r7, #7]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	fa42 f303 	asr.w	r3, r2, r3
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d00a      	beq.n	8000bf6 <updateAlphanumChar+0x3a>
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <updateAlphanumChar+0x50>)
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000be8:	4a09      	ldr	r2, [pc, #36]	; (8000c10 <updateAlphanumChar+0x54>)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f7ff ff93 	bl	8000b1c <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<(NUM_SEG-1); i++){
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	2b06      	cmp	r3, #6
 8000c00:	dde6      	ble.n	8000bd0 <updateAlphanumChar+0x14>
	}
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	08004f9c 	.word	0x08004f9c

08000c14 <updateDecimalPoint>:

void updateDecimalPoint(uint8_t curActDig){
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]
	if(decSepPos == (curPos + curActDig)){
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <updateDecimalPoint+0x30>)
 8000c20:	f993 3000 	ldrsb.w	r3, [r3]
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <updateDecimalPoint+0x34>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	440b      	add	r3, r1
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d103      	bne.n	8000c3c <updateDecimalPoint+0x28>
		LL_GPIO_ResetOutputPin((GPIO_TypeDef*)seg_DP_Port, (uint32_t)seg_DP_Pin);
 8000c34:	2102      	movs	r1, #2
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <updateDecimalPoint+0x38>)
 8000c38:	f7ff ff70 	bl	8000b1c <LL_GPIO_ResetOutputPin>
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000001 	.word	0x20000001
 8000c48:	20000228 	.word	0x20000228
 8000c4c:	48000400 	.word	0x48000400

08000c50 <setDigit>:
//Turns required digit ON
void setDigit(uint8_t pos){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin((GPIO_TypeDef*)dig_Ports[pos], (uint32_t)dig_Pins[pos]);
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	4a06      	ldr	r2, [pc, #24]	; (8000c78 <setDigit+0x28>)
 8000c5e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <setDigit+0x2c>)
 8000c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f7ff ff48 	bl	8000b00 <LL_GPIO_SetOutputPin>
}
 8000c70:	bf00      	nop
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000024 	.word	0x20000024
 8000c7c:	08004fbc 	.word	0x08004fbc

08000c80 <resetAllSegments>:

/*Reset (turn-off) all the segments of display*/
void resetAllSegments(){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUM_SEG; i++){
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	e00d      	b.n	8000ca8 <resetAllSegments+0x28>
		LL_GPIO_SetOutputPin((GPIO_TypeDef*)seg_Ports[i], (uint32_t)seg_Pins[i]);
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <resetAllSegments+0x38>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c94:	4a09      	ldr	r2, [pc, #36]	; (8000cbc <resetAllSegments+0x3c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	f7ff ff2f 	bl	8000b00 <LL_GPIO_SetOutputPin>
	for(int i = 0; i<NUM_SEG; i++){
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2b07      	cmp	r3, #7
 8000cac:	ddee      	ble.n	8000c8c <resetAllSegments+0xc>
	}
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000004 	.word	0x20000004
 8000cbc:	08004f9c 	.word	0x08004f9c

08000cc0 <resetAllDigits>:

/* Reset (turn-off) all digits*/
void resetAllDigits(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUM_DIG; i++){
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	e00d      	b.n	8000ce8 <resetAllDigits+0x28>
		LL_GPIO_ResetOutputPin((GPIO_TypeDef*)dig_Ports[i], (uint32_t)dig_Pins[i]);
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <resetAllDigits+0x38>)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cd4:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <resetAllDigits+0x3c>)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f7ff ff1d 	bl	8000b1c <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<NUM_DIG; i++){
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	ddee      	ble.n	8000ccc <resetAllDigits+0xc>
	}
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000024 	.word	0x20000024
 8000cfc:	08004fbc 	.word	0x08004fbc

08000d00 <DISPLAY_shiftCurStr>:

//Functions to handle shifting of the currently displaying string
void DISPLAY_shiftCurStr(){
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	static uint8_t shiftDir = LEFT_TO_RIGHT;

	updateCurPos(&curPos, shiftDir);
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <DISPLAY_shiftCurStr+0x2c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4809      	ldr	r0, [pc, #36]	; (8000d30 <DISPLAY_shiftCurStr+0x30>)
 8000d0c:	f000 f812 	bl	8000d34 <updateCurPos>
	updateShiftDir(curPos, &shiftDir);
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <DISPLAY_shiftCurStr+0x30>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4905      	ldr	r1, [pc, #20]	; (8000d2c <DISPLAY_shiftCurStr+0x2c>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f828 	bl	8000d6c <updateShiftDir>
	setCurStr(curPos);
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <DISPLAY_shiftCurStr+0x30>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f841 	bl	8000da8 <setCurStr>
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000034 	.word	0x20000034
 8000d30:	20000228 	.word	0x20000228

08000d34 <updateCurPos>:

void updateCurPos(uint8_t *prevPos, uint8_t shiftDir){
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d106      	bne.n	8000d54 <updateCurPos+0x20>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	701a      	strb	r2, [r3, #0]
}
 8000d52:	e005      	b.n	8000d60 <updateCurPos+0x2c>
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3b01      	subs	r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	701a      	strb	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <updateShiftDir>:

void updateShiftDir(uint8_t curPos, uint8_t *shiftDir){
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	6039      	str	r1, [r7, #0]
 8000d76:	71fb      	strb	r3, [r7, #7]
	if(curPos >= (complStrLen - NUM_DIG)){
 8000d78:	79fa      	ldrb	r2, [r7, #7]
 8000d7a:	4b0a      	ldr	r3, [pc, #40]	; (8000da4 <updateShiftDir+0x38>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	3b04      	subs	r3, #4
 8000d80:	429a      	cmp	r2, r3
 8000d82:	db02      	blt.n	8000d8a <updateShiftDir+0x1e>
		*shiftDir =  RIGHT_TO_LEFT;
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	2200      	movs	r2, #0
 8000d88:	701a      	strb	r2, [r3, #0]
	}

	if(curPos <= 0){
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <updateShiftDir+0x2a>
		*shiftDir = LEFT_TO_RIGHT;
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
	}
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000000 	.word	0x20000000

08000da8 <setCurStr>:

void setCurStr(uint8_t curPos){
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	73fb      	strb	r3, [r7, #15]
 8000db6:	e00a      	b.n	8000dce <setCurStr+0x26>
		curStr[i] = complStr[curPos + i];
 8000db8:	79fa      	ldrb	r2, [r7, #7]
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	441a      	add	r2, r3
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <setCurStr+0x38>)
 8000dc2:	5c89      	ldrb	r1, [r1, r2]
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <setCurStr+0x3c>)
 8000dc6:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	73fb      	strb	r3, [r7, #15]
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d9f1      	bls.n	8000db8 <setCurStr+0x10>
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	20000240 	.word	0x20000240
 8000de4:	2000023c 	.word	0x2000023c

08000de8 <DISPLAY_resetCurPos>:

	complStrLen = decSepPos == 5 ? size : (size - 1);  //(size-1) because '.' was extracted
	complStr[complStrLen] = '\0';
}

void DISPLAY_resetCurPos(){
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
	curPos = 0;
 8000dec:	4b03      	ldr	r3, [pc, #12]	; (8000dfc <DISPLAY_resetCurPos+0x14>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
}
 8000df2:	bf00      	nop
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	20000228 	.word	0x20000228

08000e00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <__NVIC_GetPriorityGrouping+0x18>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	0a1b      	lsrs	r3, r3, #8
 8000e0a:	f003 0307 	and.w	r3, r3, #7
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	db0b      	blt.n	8000e46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	f003 021f 	and.w	r2, r3, #31
 8000e34:	4907      	ldr	r1, [pc, #28]	; (8000e54 <__NVIC_EnableIRQ+0x38>)
 8000e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3a:	095b      	lsrs	r3, r3, #5
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop
 8000e54:	e000e100 	.word	0xe000e100

08000e58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	6039      	str	r1, [r7, #0]
 8000e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db0a      	blt.n	8000e82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <__NVIC_SetPriority+0x4c>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	0112      	lsls	r2, r2, #4
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e80:	e00a      	b.n	8000e98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	4908      	ldr	r1, [pc, #32]	; (8000ea8 <__NVIC_SetPriority+0x50>)
 8000e88:	79fb      	ldrb	r3, [r7, #7]
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	0112      	lsls	r2, r2, #4
 8000e92:	b2d2      	uxtb	r2, r2
 8000e94:	440b      	add	r3, r1
 8000e96:	761a      	strb	r2, [r3, #24]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000e100 	.word	0xe000e100
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b089      	sub	sp, #36	; 0x24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2b04      	cmp	r3, #4
 8000ec8:	bf28      	it	cs
 8000eca:	2304      	movcs	r3, #4
 8000ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d902      	bls.n	8000edc <NVIC_EncodePriority+0x30>
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	3b03      	subs	r3, #3
 8000eda:	e000      	b.n	8000ede <NVIC_EncodePriority+0x32>
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43da      	mvns	r2, r3
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	43d9      	mvns	r1, r3
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	4313      	orrs	r3, r2
         );
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3724      	adds	r7, #36	; 0x24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
	...

08000f14 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f1e:	695a      	ldr	r2, [r3, #20]
 8000f20:	4907      	ldr	r1, [pc, #28]	; (8000f40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40021000 	.word	0x40021000

08000f44 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <LL_SYSCFG_SetEXTISource+0x58>)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	0c1b      	lsrs	r3, r3, #16
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	ea02 0103 	and.w	r1, r2, r3
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	0c1b      	lsrs	r3, r3, #16
 8000f68:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	fab3 f383 	clz	r3, r3
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	fa03 f202 	lsl.w	r2, r3, r2
 8000f82:	4806      	ldr	r0, [pc, #24]	; (8000f9c <LL_SYSCFG_SetEXTISource+0x58>)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	40010000 	.word	0x40010000

08000fa0 <LL_GPIO_SetPinMode>:
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	; 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	fa93 f3a3 	rbit	r3, r3
 8000fba:	613b      	str	r3, [r7, #16]
  return result;
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	fab3 f383 	clz	r3, r3
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	fa93 f3a3 	rbit	r3, r3
 8000fda:	61bb      	str	r3, [r7, #24]
  return result;
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fab3 f383 	clz	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	431a      	orrs	r2, r3
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	601a      	str	r2, [r3, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	3724      	adds	r7, #36	; 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <LL_GPIO_SetPinPull>:
{
 8000ffe:	b480      	push	{r7}
 8001000:	b089      	sub	sp, #36	; 0x24
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	613b      	str	r3, [r7, #16]
  return result;
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	fab3 f383 	clz	r3, r3
 8001020:	b2db      	uxtb	r3, r3
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2103      	movs	r1, #3
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	401a      	ands	r2, r3
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	61bb      	str	r3, [r7, #24]
  return result;
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	fab3 f383 	clz	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	431a      	orrs	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	60da      	str	r2, [r3, #12]
}
 8001050:	bf00      	nop
 8001052:	3724      	adds	r7, #36	; 0x24
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <LL_GPIO_ResetOutputPin>:
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800109a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800109e:	f7ff ff39 	bl	8000f14 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80010a2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80010a6:	f7ff ff35 	bl	8000f14 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 80010aa:	f640 11ff 	movw	r1, #2559	; 0x9ff
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f7ff ffd3 	bl	800105c <LL_GPIO_ResetOutputPin>
                          |digit_2_Pin|digit_1_Pin|digit_3_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segment_DP_Pin|segment_G_Pin|segment_D_Pin);
 80010b6:	2132      	movs	r1, #50	; 0x32
 80010b8:	482b      	ldr	r0, [pc, #172]	; (8001168 <MX_GPIO_Init+0xf0>)
 80010ba:	f7ff ffcf 	bl	800105c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 80010be:	f640 13ff 	movw	r3, #2559	; 0x9ff
 80010c2:	607b      	str	r3, [r7, #4]
                          |digit_2_Pin|digit_1_Pin|digit_3_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010c4:	2301      	movs	r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f001 fc33 	bl	8002946 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segment_DP_Pin|segment_G_Pin|segment_D_Pin;
 80010e0:	2332      	movs	r3, #50	; 0x32
 80010e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	481b      	ldr	r0, [pc, #108]	; (8001168 <MX_GPIO_Init+0xf0>)
 80010fa:	f001 fc24 	bl	8002946 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTB, LL_SYSCFG_EXTI_LINE0);
 80010fe:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff ff1e 	bl	8000f44 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_GPIO_SetPinPull(tlacidlo_GPIO_Port, tlacidlo_Pin, LL_GPIO_PULL_UP);
 8001108:	2201      	movs	r2, #1
 800110a:	2101      	movs	r1, #1
 800110c:	4816      	ldr	r0, [pc, #88]	; (8001168 <MX_GPIO_Init+0xf0>)
 800110e:	f7ff ff76 	bl	8000ffe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(tlacidlo_GPIO_Port, tlacidlo_Pin, LL_GPIO_MODE_INPUT);
 8001112:	2200      	movs	r2, #0
 8001114:	2101      	movs	r1, #1
 8001116:	4814      	ldr	r0, [pc, #80]	; (8001168 <MX_GPIO_Init+0xf0>)
 8001118:	f7ff ff42 	bl	8000fa0 <LL_GPIO_SetPinMode>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800111c:	2301      	movs	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8001120:	2300      	movs	r3, #0
 8001122:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001124:	2301      	movs	r3, #1
 8001126:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800112a:	2300      	movs	r3, #0
 800112c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001130:	2302      	movs	r3, #2
 8001132:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	4618      	mov	r0, r3
 800113c:	f001 fa16 	bl	800256c <LL_EXTI_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001140:	f7ff fe5e 	bl	8000e00 <__NVIC_GetPriorityGrouping>
 8001144:	4603      	mov	r3, r0
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff feae 	bl	8000eac <NVIC_EncodePriority>
 8001150:	4603      	mov	r3, r0
 8001152:	4619      	mov	r1, r3
 8001154:	2006      	movs	r0, #6
 8001156:	f7ff fe7f 	bl	8000e58 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800115a:	2006      	movs	r0, #6
 800115c:	f7ff fe5e 	bl	8000e1c <__NVIC_EnableIRQ>

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	48000400 	.word	0x48000400

0800116c <__NVIC_GetPriorityGrouping>:
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	; (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	; (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	; (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	; 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	; 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f043 0201 	orr.w	r2, r3, #1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800129e:	b480      	push	{r7}
 80012a0:	b083      	sub	sp, #12
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	601a      	str	r2, [r3, #0]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          GCEN          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_GCEN);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	601a      	str	r2, [r3, #0]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_I2C_SetOwnAddress2>:
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK06
  *         @arg @ref LL_I2C_OWNADDRESS2_MASK07
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2, uint32_t OwnAddrMask)
{
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_OA2 | I2C_OAR2_OA2MSK, OwnAddress2 | OwnAddrMask);
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80012f2:	f023 0306 	bic.w	r3, r3, #6
 80012f6:	68b9      	ldr	r1, [r7, #8]
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	431a      	orrs	r2, r3
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	60da      	str	r2, [r3, #12]
}
 8001302:	bf00      	nop
 8001304:	3714      	adds	r7, #20
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         OA2EN         LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_OA2EN);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60da      	str	r2, [r3, #12]
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_I2C_EnableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_EnableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableIT_RX(I2C_TypeDef *I2Cx)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f043 0204 	orr.w	r2, r3, #4
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	601a      	str	r2, [r3, #0]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_I2C_DisableIT_RX>:
  * @rmtoll CR1          RXIE          LL_I2C_DisableIT_RX
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableIT_RX(I2C_TypeDef *I2Cx)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_RXIE);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f023 0204 	bic.w	r2, r3, #4
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	601a      	str	r2, [r3, #0]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <LL_I2C_IsActiveFlag_TXIS>:
  * @rmtoll ISR          TXIS          LL_I2C_IsActiveFlag_TXIS
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXIS(I2C_TypeDef *I2Cx)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_TXIS) == (I2C_ISR_TXIS)) ? 1UL : 0UL);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	699b      	ldr	r3, [r3, #24]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b02      	cmp	r3, #2
 8001380:	d101      	bne.n	8001386 <LL_I2C_IsActiveFlag_TXIS+0x18>
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <LL_I2C_IsActiveFlag_TXIS+0x1a>
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_RXNE) == (I2C_ISR_RXNE)) ? 1UL : 0UL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b04      	cmp	r3, #4
 80013a6:	d101      	bne.n	80013ac <LL_I2C_IsActiveFlag_RXNE+0x18>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <LL_I2C_IsActiveFlag_RXNE+0x1a>
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_I2C_IsActiveFlag_STOP>:
  * @rmtoll ISR          STOPF         LL_I2C_IsActiveFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_STOP(I2C_TypeDef *I2Cx)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(I2Cx->ISR, I2C_ISR_STOPF) == (I2C_ISR_STOPF)) ? 1UL : 0UL);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	f003 0320 	and.w	r3, r3, #32
 80013ca:	2b20      	cmp	r3, #32
 80013cc:	d101      	bne.n	80013d2 <LL_I2C_IsActiveFlag_STOP+0x18>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e000      	b.n	80013d4 <LL_I2C_IsActiveFlag_STOP+0x1a>
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_I2C_ClearFlag_STOP>:
  * @rmtoll ICR          STOPCF        LL_I2C_ClearFlag_STOP
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_STOP(I2C_TypeDef *I2Cx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->ICR, I2C_ICR_STOPCF);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	f043 0220 	orr.w	r2, r3, #32
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	61da      	str	r2, [r3, #28]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_I2C_EnableAutoEndMode>:
  * @rmtoll CR2          AUTOEND       LL_I2C_EnableAutoEndMode
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableAutoEndMode(I2C_TypeDef *I2Cx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR2, I2C_CR2_AUTOEND);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	605a      	str	r2, [r3, #4]
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <LL_I2C_HandleTransfer>:
  *         @arg @ref LL_I2C_GENERATE_RESTART_10BIT_WRITE
  * @retval None
  */
__STATIC_INLINE void LL_I2C_HandleTransfer(I2C_TypeDef *I2Cx, uint32_t SlaveAddr, uint32_t SlaveAddrSize,
                                           uint32_t TransferSize, uint32_t EndMode, uint32_t Request)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_SADD | I2C_CR2_ADD10 |
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	0d5b      	lsrs	r3, r3, #21
 8001436:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <LL_I2C_HandleTransfer+0x48>)
 800143c:	430b      	orrs	r3, r1
 800143e:	43db      	mvns	r3, r3
 8001440:	401a      	ands	r2, r3
 8001442:	68b9      	ldr	r1, [r7, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4319      	orrs	r1, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	041b      	lsls	r3, r3, #16
 800144c:	4319      	orrs	r1, r3
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	4319      	orrs	r1, r3
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	430b      	orrs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
             (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) |
             I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_RELOAD |
             I2C_CR2_NBYTES | I2C_CR2_AUTOEND | I2C_CR2_HEAD10R,
             SlaveAddr | SlaveAddrSize | (TransferSize << I2C_CR2_NBYTES_Pos) | EndMode | Request);
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	03ff7bff 	.word	0x03ff7bff

0800146c <LL_I2C_ReceiveData8>:
  * @rmtoll RXDR         RXDATA        LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->RXDR, I2C_RXDR_RXDATA));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001478:	b2db      	uxtb	r3, r3
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	460b      	mov	r3, r1
 8001490:	70fb      	strb	r3, [r7, #3]
  WRITE_REG(I2Cx->TXDR, Data);
 8001492:	78fa      	ldrb	r2, [r7, #3]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_AHB1_GRP1_EnableClock>:
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	4907      	ldr	r1, [pc, #28]	; (80014d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80014ba:	695a      	ldr	r2, [r3, #20]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4013      	ands	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40021000 	.word	0x40021000

080014d4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <LL_APB1_GRP1_EnableClock+0x2c>)
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4013      	ands	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014f2:	68fb      	ldr	r3, [r7, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40021000 	.word	0x40021000

08001504 <MX_I2C1_Init>:
volatile uint8_t ubReceiveIndex = 0;
/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 800150a:	f107 031c 	add.w	r3, r7, #28
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
 800152c:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800152e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001532:	f7ff ffb7 	bl	80014a4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001536:	23c0      	movs	r3, #192	; 0xc0
 8001538:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800153a:	2302      	movs	r3, #2
 800153c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001542:	2301      	movs	r3, #1
 8001544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001546:	2301      	movs	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 800154a:	2304      	movs	r3, #4
 800154c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	4619      	mov	r1, r3
 8001552:	4821      	ldr	r0, [pc, #132]	; (80015d8 <MX_I2C1_Init+0xd4>)
 8001554:	f001 f9f7 	bl	8002946 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001558:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800155c:	f7ff ffba 	bl	80014d4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001560:	f7ff fe04 	bl	800116c <__NVIC_GetPriorityGrouping>
 8001564:	4603      	mov	r3, r0
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff fe54 	bl	8001218 <NVIC_EncodePriority>
 8001570:	4603      	mov	r3, r0
 8001572:	4619      	mov	r1, r3
 8001574:	201f      	movs	r0, #31
 8001576:	f7ff fe25 	bl	80011c4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 800157a:	201f      	movs	r0, #31
 800157c:	f7ff fe04 	bl	8001188 <__NVIC_EnableIRQ>

  /** I2C Initialization
  */
  LL_I2C_EnableAutoEndMode(I2C1);
 8001580:	4816      	ldr	r0, [pc, #88]	; (80015dc <MX_I2C1_Init+0xd8>)
 8001582:	f7ff ff3d 	bl	8001400 <LL_I2C_EnableAutoEndMode>
  LL_I2C_DisableOwnAddress2(I2C1);
 8001586:	4815      	ldr	r0, [pc, #84]	; (80015dc <MX_I2C1_Init+0xd8>)
 8001588:	f7ff fec1 	bl	800130e <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800158c:	4813      	ldr	r0, [pc, #76]	; (80015dc <MX_I2C1_Init+0xd8>)
 800158e:	f7ff fe96 	bl	80012be <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001592:	4812      	ldr	r0, [pc, #72]	; (80015dc <MX_I2C1_Init+0xd8>)
 8001594:	f7ff fe83 	bl	800129e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001598:	2300      	movs	r3, #0
 800159a:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.Timing = 0x2000090E;
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_I2C1_Init+0xdc>)
 800159e:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80015b4:	f107 031c 	add.w	r3, r7, #28
 80015b8:	4619      	mov	r1, r3
 80015ba:	4808      	ldr	r0, [pc, #32]	; (80015dc <MX_I2C1_Init+0xd8>)
 80015bc:	f001 fad6 	bl	8002b6c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0, LL_I2C_OWNADDRESS2_NOMASK);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <MX_I2C1_Init+0xd8>)
 80015c6:	f7ff fe8a 	bl	80012de <LL_I2C_SetOwnAddress2>

  LL_I2C_Enable(I2C1);
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <MX_I2C1_Init+0xd8>)
 80015cc:	f7ff fe57 	bl	800127e <LL_I2C_Enable>
}
 80015d0:	bf00      	nop
 80015d2:	3738      	adds	r7, #56	; 0x38
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	48000400 	.word	0x48000400
 80015dc:	40005400 	.word	0x40005400
 80015e0:	2000090e 	.word	0x2000090e

080015e4 <i2c_master_write>:

/* USER CODE BEGIN 1 */
void i2c_master_write(uint8_t data, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af02      	add	r7, sp, #8
 80015ea:	4604      	mov	r4, r0
 80015ec:	4608      	mov	r0, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4623      	mov	r3, r4
 80015f4:	71fb      	strb	r3, [r7, #7]
 80015f6:	4603      	mov	r3, r0
 80015f8:	71bb      	strb	r3, [r7, #6]
 80015fa:	460b      	mov	r3, r1
 80015fc:	717b      	strb	r3, [r7, #5]
 80015fe:	4613      	mov	r3, r2
 8001600:	713b      	strb	r3, [r7, #4]
	if(read_flag)
 8001602:	793b      	ldrb	r3, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <i2c_master_write+0x2c>
	{
		register_addr |= (1 << 7);
 8001608:	79bb      	ldrb	r3, [r7, #6]
 800160a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800160e:	71bb      	strb	r3, [r7, #6]
	}

	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 2, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 8001610:	7979      	ldrb	r1, [r7, #5]
 8001612:	4b14      	ldr	r3, [pc, #80]	; (8001664 <i2c_master_write+0x80>)
 8001614:	9301      	str	r3, [sp, #4]
 8001616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2302      	movs	r3, #2
 800161e:	2200      	movs	r2, #0
 8001620:	4811      	ldr	r0, [pc, #68]	; (8001668 <i2c_master_write+0x84>)
 8001622:	f7ff fefd 	bl	8001420 <LL_I2C_HandleTransfer>

	LL_I2C_TransmitData8(I2C1, register_addr);
 8001626:	79bb      	ldrb	r3, [r7, #6]
 8001628:	4619      	mov	r1, r3
 800162a:	480f      	ldr	r0, [pc, #60]	; (8001668 <i2c_master_write+0x84>)
 800162c:	f7ff ff2b 	bl	8001486 <LL_I2C_TransmitData8>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001630:	e00a      	b.n	8001648 <i2c_master_write+0x64>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 8001632:	480d      	ldr	r0, [pc, #52]	; (8001668 <i2c_master_write+0x84>)
 8001634:	f7ff fe9b 	bl	800136e <LL_I2C_IsActiveFlag_TXIS>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <i2c_master_write+0x64>
		{
			LL_I2C_TransmitData8(I2C1, data);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4619      	mov	r1, r3
 8001642:	4809      	ldr	r0, [pc, #36]	; (8001668 <i2c_master_write+0x84>)
 8001644:	f7ff ff1f 	bl	8001486 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 8001648:	4807      	ldr	r0, [pc, #28]	; (8001668 <i2c_master_write+0x84>)
 800164a:	f7ff feb6 	bl	80013ba <LL_I2C_IsActiveFlag_STOP>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0ee      	beq.n	8001632 <i2c_master_write+0x4e>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 8001654:	4804      	ldr	r0, [pc, #16]	; (8001668 <i2c_master_write+0x84>)
 8001656:	f7ff fec3 	bl	80013e0 <LL_I2C_ClearFlag_STOP>
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bd90      	pop	{r4, r7, pc}
 8001662:	bf00      	nop
 8001664:	80002000 	.word	0x80002000
 8001668:	40005400 	.word	0x40005400

0800166c <i2c_master_read>:


uint8_t* i2c_master_read(uint8_t* buffer, uint8_t length, uint8_t register_addr, uint8_t slave_addr, uint8_t read_flag)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af02      	add	r7, sp, #8
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4603      	mov	r3, r0
 800167c:	70fb      	strb	r3, [r7, #3]
 800167e:	460b      	mov	r3, r1
 8001680:	70bb      	strb	r3, [r7, #2]
 8001682:	4613      	mov	r3, r2
 8001684:	707b      	strb	r3, [r7, #1]
	aReceiveBuffer_read = buffer;
 8001686:	4a31      	ldr	r2, [pc, #196]	; (800174c <i2c_master_read+0xe0>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6013      	str	r3, [r2, #0]

	if(read_flag)
 800168c:	7c3b      	ldrb	r3, [r7, #16]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <i2c_master_read+0x2e>
	{
		register_addr |= (1 << 7);
 8001692:	78bb      	ldrb	r3, [r7, #2]
 8001694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001698:	70bb      	strb	r3, [r7, #2]
	}

	end_of_read_flag = 0;
 800169a:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <i2c_master_read+0xe4>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]

	LL_I2C_EnableIT_RX(I2C1);
 80016a0:	482c      	ldr	r0, [pc, #176]	; (8001754 <i2c_master_read+0xe8>)
 80016a2:	f7ff fe44 	bl	800132e <LL_I2C_EnableIT_RX>

	//poziadam slejva o citanie z jeho registra
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, 1, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_WRITE);
 80016a6:	7879      	ldrb	r1, [r7, #1]
 80016a8:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <i2c_master_read+0xec>)
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2301      	movs	r3, #1
 80016b4:	2200      	movs	r2, #0
 80016b6:	4827      	ldr	r0, [pc, #156]	; (8001754 <i2c_master_read+0xe8>)
 80016b8:	f7ff feb2 	bl	8001420 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80016bc:	e00a      	b.n	80016d4 <i2c_master_read+0x68>
	{
		if(LL_I2C_IsActiveFlag_TXIS(I2C1))
 80016be:	4825      	ldr	r0, [pc, #148]	; (8001754 <i2c_master_read+0xe8>)
 80016c0:	f7ff fe55 	bl	800136e <LL_I2C_IsActiveFlag_TXIS>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d004      	beq.n	80016d4 <i2c_master_read+0x68>
		{
			LL_I2C_TransmitData8(I2C1, register_addr);
 80016ca:	78bb      	ldrb	r3, [r7, #2]
 80016cc:	4619      	mov	r1, r3
 80016ce:	4821      	ldr	r0, [pc, #132]	; (8001754 <i2c_master_read+0xe8>)
 80016d0:	f7ff fed9 	bl	8001486 <LL_I2C_TransmitData8>
	while(!LL_I2C_IsActiveFlag_STOP(I2C1))
 80016d4:	481f      	ldr	r0, [pc, #124]	; (8001754 <i2c_master_read+0xe8>)
 80016d6:	f7ff fe70 	bl	80013ba <LL_I2C_IsActiveFlag_STOP>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0ee      	beq.n	80016be <i2c_master_read+0x52>
		}
	}
	LL_I2C_ClearFlag_STOP(I2C1);
 80016e0:	481c      	ldr	r0, [pc, #112]	; (8001754 <i2c_master_read+0xe8>)
 80016e2:	f7ff fe7d 	bl	80013e0 <LL_I2C_ClearFlag_STOP>
	while(LL_I2C_IsActiveFlag_STOP(I2C1)){}
 80016e6:	bf00      	nop
 80016e8:	481a      	ldr	r0, [pc, #104]	; (8001754 <i2c_master_read+0xe8>)
 80016ea:	f7ff fe66 	bl	80013ba <LL_I2C_IsActiveFlag_STOP>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1f9      	bne.n	80016e8 <i2c_master_read+0x7c>

	//citam register od slejva
	LL_I2C_HandleTransfer(I2C1, slave_addr, LL_I2C_ADDRSLAVE_7BIT, length, LL_I2C_MODE_AUTOEND, LL_I2C_GENERATE_START_READ);
 80016f4:	7879      	ldrb	r1, [r7, #1]
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <i2c_master_read+0xf0>)
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	4613      	mov	r3, r2
 8001704:	2200      	movs	r2, #0
 8001706:	4813      	ldr	r0, [pc, #76]	; (8001754 <i2c_master_read+0xe8>)
 8001708:	f7ff fe8a 	bl	8001420 <LL_I2C_HandleTransfer>

	while(!LL_I2C_IsActiveFlag_STOP(I2C1)){};
 800170c:	bf00      	nop
 800170e:	4811      	ldr	r0, [pc, #68]	; (8001754 <i2c_master_read+0xe8>)
 8001710:	f7ff fe53 	bl	80013ba <LL_I2C_IsActiveFlag_STOP>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d0f9      	beq.n	800170e <i2c_master_read+0xa2>

	//End of transfer
	LL_I2C_ClearFlag_STOP(I2C1);
 800171a:	480e      	ldr	r0, [pc, #56]	; (8001754 <i2c_master_read+0xe8>)
 800171c:	f7ff fe60 	bl	80013e0 <LL_I2C_ClearFlag_STOP>
	LL_I2C_DisableIT_RX(I2C1);
 8001720:	480c      	ldr	r0, [pc, #48]	; (8001754 <i2c_master_read+0xe8>)
 8001722:	f7ff fe14 	bl	800134e <LL_I2C_DisableIT_RX>
	I2C1->ICR |= (1 << 4);
 8001726:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <i2c_master_read+0xe8>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	4a0a      	ldr	r2, [pc, #40]	; (8001754 <i2c_master_read+0xe8>)
 800172c:	f043 0310 	orr.w	r3, r3, #16
 8001730:	61d3      	str	r3, [r2, #28]
	ubReceiveIndex = 0;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <i2c_master_read+0xf4>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
	end_of_read_flag = 1;
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <i2c_master_read+0xe4>)
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]

	return aReceiveBuffer_read;
 800173e:	4b03      	ldr	r3, [pc, #12]	; (800174c <i2c_master_read+0xe0>)
 8001740:	681b      	ldr	r3, [r3, #0]
}
 8001742:	4618      	mov	r0, r3
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000250 	.word	0x20000250
 8001750:	2000022a 	.word	0x2000022a
 8001754:	40005400 	.word	0x40005400
 8001758:	80002000 	.word	0x80002000
 800175c:	80002400 	.word	0x80002400
 8001760:	2000022b 	.word	0x2000022b

08001764 <I2C_eventCallback>:

void I2C_eventCallback(void)
{
 8001764:	b598      	push	{r3, r4, r7, lr}
 8001766:	af00      	add	r7, sp, #0
	/* Check RXNE flag value in ISR register */
	if(LL_I2C_IsActiveFlag_RXNE(I2C1))
 8001768:	4812      	ldr	r0, [pc, #72]	; (80017b4 <I2C_eventCallback+0x50>)
 800176a:	f7ff fe13 	bl	8001394 <LL_I2C_IsActiveFlag_RXNE>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d01c      	beq.n	80017ae <I2C_eventCallback+0x4a>
	{
		/* Call function Master Reception Callback */
		aReceiveBuffer_read[ubReceiveIndex++] = LL_I2C_ReceiveData8(I2C1);
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <I2C_eventCallback+0x54>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <I2C_eventCallback+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	1c59      	adds	r1, r3, #1
 8001780:	b2c8      	uxtb	r0, r1
 8001782:	490e      	ldr	r1, [pc, #56]	; (80017bc <I2C_eventCallback+0x58>)
 8001784:	7008      	strb	r0, [r1, #0]
 8001786:	18d4      	adds	r4, r2, r3
 8001788:	480a      	ldr	r0, [pc, #40]	; (80017b4 <I2C_eventCallback+0x50>)
 800178a:	f7ff fe6f 	bl	800146c <LL_I2C_ReceiveData8>
 800178e:	4603      	mov	r3, r0
 8001790:	7023      	strb	r3, [r4, #0]
		(ubReceiveIndex > 19) ? ubReceiveIndex = 0 : ubReceiveIndex;
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <I2C_eventCallback+0x58>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b13      	cmp	r3, #19
 800179a:	d903      	bls.n	80017a4 <I2C_eventCallback+0x40>
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <I2C_eventCallback+0x58>)
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e001      	b.n	80017a8 <I2C_eventCallback+0x44>
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <I2C_eventCallback+0x58>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
		end_of_read_flag = 0;
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <I2C_eventCallback+0x5c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	701a      	strb	r2, [r3, #0]
	}
}
 80017ae:	bf00      	nop
 80017b0:	bd98      	pop	{r3, r4, r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40005400 	.word	0x40005400
 80017b8:	20000250 	.word	0x20000250
 80017bc:	2000022b 	.word	0x2000022b
 80017c0:	2000022a 	.word	0x2000022a

080017c4 <lsm6ds0_read_byte>:
#include "lsm6ds0.h"

uint8_t addres = LSM6DS0_DEVICE_ADDRESS_0;

uint8_t lsm6ds0_read_byte(uint8_t reg_addr)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af02      	add	r7, sp, #8
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
	return *(i2c_master_read(&data, 1, reg_addr, addres, 0));
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <lsm6ds0_read_byte+0x30>)
 80017d4:	7819      	ldrb	r1, [r3, #0]
 80017d6:	79fa      	ldrb	r2, [r7, #7]
 80017d8:	f107 000f 	add.w	r0, r7, #15
 80017dc:	2300      	movs	r3, #0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	460b      	mov	r3, r1
 80017e2:	2101      	movs	r1, #1
 80017e4:	f7ff ff42 	bl	800166c <i2c_master_read>
 80017e8:	4603      	mov	r3, r0
 80017ea:	781b      	ldrb	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000035 	.word	0x20000035

080017f8 <lsm6ds0_write_byte>:


void lsm6ds0_write_byte(uint8_t reg_addr, uint8_t value)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	460a      	mov	r2, r1
 8001802:	71fb      	strb	r3, [r7, #7]
 8001804:	4613      	mov	r3, r2
 8001806:	71bb      	strb	r3, [r7, #6]
	i2c_master_write(value, reg_addr, addres, 0);
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <lsm6ds0_write_byte+0x28>)
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	79f9      	ldrb	r1, [r7, #7]
 800180e:	79b8      	ldrb	r0, [r7, #6]
 8001810:	2300      	movs	r3, #0
 8001812:	f7ff fee7 	bl	80015e4 <i2c_master_write>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000035 	.word	0x20000035

08001824 <lsm6ds0_readArray>:


void lsm6ds0_readArray(uint8_t * data, uint8_t reg, uint8_t length)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af02      	add	r7, sp, #8
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
 8001830:	4613      	mov	r3, r2
 8001832:	70bb      	strb	r3, [r7, #2]
	i2c_master_read(data, length, reg, addres, 1);
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <lsm6ds0_readArray+0x2c>)
 8001836:	7818      	ldrb	r0, [r3, #0]
 8001838:	78fa      	ldrb	r2, [r7, #3]
 800183a:	78b9      	ldrb	r1, [r7, #2]
 800183c:	2301      	movs	r3, #1
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	4603      	mov	r3, r0
 8001842:	6878      	ldr	r0, [r7, #4]
 8001844:	f7ff ff12 	bl	800166c <i2c_master_read>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000035 	.word	0x20000035

08001854 <lsm6ds0_get_acc>:
	return (((int16_t)((temp[1] << 8) | temp[0])) >> 3)  + 25;
}


void lsm6ds0_get_acc(float* x, float* y, float* z)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
	int16_t xx, yy, zz;

	uint8_t temp;

	//get current scale and use it for final calculation
    temp = lsm6ds0_read_byte(LSM6DS0_ADDRESS_CTRL1);
 8001860:	2010      	movs	r0, #16
 8001862:	f7ff ffaf 	bl	80017c4 <lsm6ds0_read_byte>
 8001866:	4603      	mov	r3, r0
 8001868:	77fb      	strb	r3, [r7, #31]

	temp = temp >> 2;
 800186a:	7ffb      	ldrb	r3, [r7, #31]
 800186c:	089b      	lsrs	r3, r3, #2
 800186e:	77fb      	strb	r3, [r7, #31]
    temp &= 0x03;			//full scale bits exctracted
 8001870:	7ffb      	ldrb	r3, [r7, #31]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	77fb      	strb	r3, [r7, #31]

	lsm6ds0_readArray(data, LSM6DS0_ADDRESS_ACCX, 6);
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	2206      	movs	r2, #6
 800187e:	2128      	movs	r1, #40	; 0x28
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ffcf 	bl	8001824 <lsm6ds0_readArray>

	xx = ((uint16_t)data[1]) << 8 | data[0];
 8001886:	7c7b      	ldrb	r3, [r7, #17]
 8001888:	021b      	lsls	r3, r3, #8
 800188a:	b21a      	sxth	r2, r3
 800188c:	7c3b      	ldrb	r3, [r7, #16]
 800188e:	b21b      	sxth	r3, r3
 8001890:	4313      	orrs	r3, r2
 8001892:	83bb      	strh	r3, [r7, #28]
	yy = ((uint16_t)data[3]) << 8 | data[2];
 8001894:	7cfb      	ldrb	r3, [r7, #19]
 8001896:	021b      	lsls	r3, r3, #8
 8001898:	b21a      	sxth	r2, r3
 800189a:	7cbb      	ldrb	r3, [r7, #18]
 800189c:	b21b      	sxth	r3, r3
 800189e:	4313      	orrs	r3, r2
 80018a0:	837b      	strh	r3, [r7, #26]
	zz = ((uint16_t)data[5]) << 8 | data[4];
 80018a2:	7d7b      	ldrb	r3, [r7, #21]
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	b21a      	sxth	r2, r3
 80018a8:	7d3b      	ldrb	r3, [r7, #20]
 80018aa:	b21b      	sxth	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	833b      	strh	r3, [r7, #24]

	*x = (xx >> 4) / 1000.0f;
 80018b0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018b4:	111b      	asrs	r3, r3, #4
 80018b6:	b21b      	sxth	r3, r3
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001914 <lsm6ds0_get_acc+0xc0>
 80018c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	edc3 7a00 	vstr	s15, [r3]
	*y = (yy >> 4) / 1000.0f;
 80018ce:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80018d2:	111b      	asrs	r3, r3, #4
 80018d4:	b21b      	sxth	r3, r3
 80018d6:	ee07 3a90 	vmov	s15, r3
 80018da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018de:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8001914 <lsm6ds0_get_acc+0xc0>
 80018e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	edc3 7a00 	vstr	s15, [r3]
	*z = (zz >> 4) / 1000.0f;
 80018ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80018f0:	111b      	asrs	r3, r3, #4
 80018f2:	b21b      	sxth	r3, r3
 80018f4:	ee07 3a90 	vmov	s15, r3
 80018f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018fc:	eddf 6a05 	vldr	s13, [pc, #20]	; 8001914 <lsm6ds0_get_acc+0xc0>
 8001900:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	edc3 7a00 	vstr	s15, [r3]
}
 800190a:	bf00      	nop
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	447a0000 	.word	0x447a0000

08001918 <lsm6ds0_init>:


uint8_t lsm6ds0_init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0

	uint8_t status = 1;
 800191e:	2301      	movs	r3, #1
 8001920:	71fb      	strb	r3, [r7, #7]

	//LIS3MDL_ACC_ON;

	LL_mDelay(100);
 8001922:	2064      	movs	r0, #100	; 0x64
 8001924:	f001 fd6e 	bl	8003404 <LL_mDelay>

	uint8_t val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001928:	200f      	movs	r0, #15
 800192a:	f7ff ff4b 	bl	80017c4 <lsm6ds0_read_byte>
 800192e:	4603      	mov	r3, r0
 8001930:	71bb      	strb	r3, [r7, #6]

	if(val == LSM6DS0_WHO_AM_I_VALUE)
 8001932:	79bb      	ldrb	r3, [r7, #6]
 8001934:	2b68      	cmp	r3, #104	; 0x68
 8001936:	d102      	bne.n	800193e <lsm6ds0_init+0x26>
	{
		status = 1;
 8001938:	2301      	movs	r3, #1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	e00f      	b.n	800195e <lsm6ds0_init+0x46>
	}
	else			//if the device is not found on one address, try another one
	{
		addres = LSM6DS0_DEVICE_ADDRESS_1;
 800193e:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <lsm6ds0_init+0x60>)
 8001940:	22d6      	movs	r2, #214	; 0xd6
 8001942:	701a      	strb	r2, [r3, #0]
		val = lsm6ds0_read_byte(LSM6DS0_WHO_AM_I_ADDRES);
 8001944:	200f      	movs	r0, #15
 8001946:	f7ff ff3d 	bl	80017c4 <lsm6ds0_read_byte>
 800194a:	4603      	mov	r3, r0
 800194c:	71bb      	strb	r3, [r7, #6]
		if(val == LSM6DS0_WHO_AM_I_VALUE)
 800194e:	79bb      	ldrb	r3, [r7, #6]
 8001950:	2b68      	cmp	r3, #104	; 0x68
 8001952:	d102      	bne.n	800195a <lsm6ds0_init+0x42>
		{
			status = 1;
 8001954:	2301      	movs	r3, #1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	e001      	b.n	800195e <lsm6ds0_init+0x46>
		}
		else
		{
			status = 0;
 800195a:	2300      	movs	r3, #0
 800195c:	71fb      	strb	r3, [r7, #7]
		}
	}

	//acc device init

	uint8_t ctrl1 = 8 << 4; // +-2g res
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	717b      	strb	r3, [r7, #5]
	lsm6ds0_write_byte(LSM6DS0_ADDRESS_CTRL1, ctrl1);
 8001962:	797b      	ldrb	r3, [r7, #5]
 8001964:	4619      	mov	r1, r3
 8001966:	2010      	movs	r0, #16
 8001968:	f7ff ff46 	bl	80017f8 <lsm6ds0_write_byte>

	return status;
 800196c:	79fb      	ldrb	r3, [r7, #7]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20000035 	.word	0x20000035

0800197c <__NVIC_SetPriorityGrouping>:
{
 800197c:	b480      	push	{r7}
 800197e:	b085      	sub	sp, #20
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001998:	4013      	ands	r3, r2
 800199a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ae:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <__NVIC_SetPriorityGrouping+0x44>)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	60d3      	str	r3, [r2, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <LL_RCC_HSI_Enable+0x1c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <LL_RCC_HSI_Enable+0x1c>)
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000

080019e4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <LL_RCC_HSI_IsReady+0x20>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	bf0c      	ite	eq
 80019f4:	2301      	moveq	r3, #1
 80019f6:	2300      	movne	r3, #0
 80019f8:	b2db      	uxtb	r3, r3
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	40021000 	.word	0x40021000

08001a08 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4904      	ldr	r1, [pc, #16]	; (8001a30 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	40021000 	.word	0x40021000

08001a34 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <LL_RCC_SetSysClkSource+0x24>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f023 0203 	bic.w	r2, r3, #3
 8001a44:	4904      	ldr	r1, [pc, #16]	; (8001a58 <LL_RCC_SetSysClkSource+0x24>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40021000 	.word	0x40021000

08001a5c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001a60:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <LL_RCC_GetSysClkSource+0x18>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 030c 	and.w	r3, r3, #12
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000

08001a78 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <LL_RCC_SetAHBPrescaler+0x24>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a88:	4904      	ldr	r1, [pc, #16]	; (8001a9c <LL_RCC_SetAHBPrescaler+0x24>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ab0:	4904      	ldr	r1, [pc, #16]	; (8001ac4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	604b      	str	r3, [r1, #4]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <LL_RCC_SetAPB2Prescaler+0x24>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ad8:	4904      	ldr	r1, [pc, #16]	; (8001aec <LL_RCC_SetAPB2Prescaler+0x24>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000

08001af0 <LL_RCC_SetI2CClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetI2CClockSource(uint32_t I2CxSource)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, ((I2CxSource  & 0xFF000000U) >> 24U), (I2CxSource & 0x00FFFFFFU));
 8001af8:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <LL_RCC_SetI2CClockSource+0x2c>)
 8001afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	0e1b      	lsrs	r3, r3, #24
 8001b00:	43db      	mvns	r3, r3
 8001b02:	401a      	ands	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001b0a:	4904      	ldr	r1, [pc, #16]	; (8001b1c <LL_RCC_SetI2CClockSource+0x2c>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40021000 	.word	0x40021000

08001b20 <LL_APB1_GRP1_EnableClock>:
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b2a:	69da      	ldr	r2, [r3, #28]
 8001b2c:	4907      	ldr	r1, [pc, #28]	; (8001b4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001b36:	69da      	ldr	r2, [r3, #28]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	bf00      	nop
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000

08001b50 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001b58:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b5a:	699a      	ldr	r2, [r3, #24]
 8001b5c:	4907      	ldr	r1, [pc, #28]	; (8001b7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001b64:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001b66:	699a      	ldr	r2, [r3, #24]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	40021000 	.word	0x40021000

08001b80 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <LL_FLASH_SetLatency+0x24>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f023 0207 	bic.w	r2, r3, #7
 8001b90:	4904      	ldr	r1, [pc, #16]	; (8001ba4 <LL_FLASH_SetLatency+0x24>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	40022000 	.word	0x40022000

08001ba8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001bac:	4b04      	ldr	r3, [pc, #16]	; (8001bc0 <LL_FLASH_GetLatency+0x18>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40022000 	.word	0x40022000

08001bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001bc8:	2001      	movs	r0, #1
 8001bca:	f7ff ffc1 	bl	8001b50 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001bce:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001bd2:	f7ff ffa5 	bl	8001b20 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd6:	2003      	movs	r0, #3
 8001bd8:	f7ff fed0 	bl	800197c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bdc:	f000 f820 	bl	8001c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be0:	f7ff fa4a 	bl	8001078 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001be4:	f000 faac 	bl	8002140 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001be8:	f000 fb0a 	bl	8002200 <MX_TIM3_Init>
  MX_I2C1_Init();
 8001bec:	f7ff fc8a 	bl	8001504 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  val = lsm6ds0_init();
 8001bf0:	f7ff fe92 	bl	8001918 <lsm6ds0_init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <main+0x4c>)
 8001bfa:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <main+0x50>)
 8001bfe:	4a06      	ldr	r2, [pc, #24]	; (8001c18 <main+0x54>)
 8001c00:	4619      	mov	r1, r3
 8001c02:	4806      	ldr	r0, [pc, #24]	; (8001c1c <main+0x58>)
 8001c04:	f7ff fe26 	bl	8001854 <lsm6ds0_get_acc>
	  LL_mDelay(50);
 8001c08:	2032      	movs	r0, #50	; 0x32
 8001c0a:	f001 fbfb 	bl	8003404 <LL_mDelay>
	  lsm6ds0_get_acc(acc, (acc+1), (acc+2));
 8001c0e:	e7f5      	b.n	8001bfc <main+0x38>
 8001c10:	2000022d 	.word	0x2000022d
 8001c14:	20000258 	.word	0x20000258
 8001c18:	2000025c 	.word	0x2000025c
 8001c1c:	20000254 	.word	0x20000254

08001c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff ffab 	bl	8001b80 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffbc 	bl	8001ba8 <LL_FLASH_GetLatency>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1fa      	bne.n	8001c2c <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8001c36:	f7ff fec5 	bl	80019c4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001c3a:	bf00      	nop
 8001c3c:	f7ff fed2 	bl	80019e4 <LL_RCC_HSI_IsReady>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d1fa      	bne.n	8001c3c <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001c46:	2010      	movs	r0, #16
 8001c48:	f7ff fede 	bl	8001a08 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001c4c:	2000      	movs	r0, #0
 8001c4e:	f7ff ff13 	bl	8001a78 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff ff24 	bl	8001aa0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff ff35 	bl	8001ac8 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff fee8 	bl	8001a34 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8001c64:	bf00      	nop
 8001c66:	f7ff fef9 	bl	8001a5c <LL_RCC_GetSysClkSource>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1fa      	bne.n	8001c66 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8001c70:	4805      	ldr	r0, [pc, #20]	; (8001c88 <SystemClock_Config+0x68>)
 8001c72:	f001 fbb9 	bl	80033e8 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8001c76:	4804      	ldr	r0, [pc, #16]	; (8001c88 <SystemClock_Config+0x68>)
 8001c78:	f001 fbe8 	bl	800344c <LL_SetSystemCoreClock>
  LL_RCC_SetI2CClockSource(LL_RCC_I2C1_CLKSOURCE_HSI);
 8001c7c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001c80:	f7ff ff36 	bl	8001af0 <LL_RCC_SetI2CClockSource>
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	007a1200 	.word	0x007a1200

08001c8c <MAIN_buttonShiftDataID>:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr,"ALT_%06.1f",sensorData[dataID]));
				break;
		}
	}

	void MAIN_buttonShiftDataID(){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
		dataID++;
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <MAIN_buttonShiftDataID+0x34>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	3301      	adds	r3, #1
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MAIN_buttonShiftDataID+0x34>)
 8001c9a:	701a      	strb	r2, [r3, #0]
		dataID %= 5;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <MAIN_buttonShiftDataID+0x34>)
 8001c9e:	781a      	ldrb	r2, [r3, #0]
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <MAIN_buttonShiftDataID+0x38>)
 8001ca2:	fba3 1302 	umull	r1, r3, r3, r2
 8001ca6:	0899      	lsrs	r1, r3, #2
 8001ca8:	460b      	mov	r3, r1
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	b2da      	uxtb	r2, r3
 8001cb2:	4b03      	ldr	r3, [pc, #12]	; (8001cc0 <MAIN_buttonShiftDataID+0x34>)
 8001cb4:	701a      	strb	r2, [r3, #0]
		DISPLAY_resetCurPos();
 8001cb6:	f7ff f897 	bl	8000de8 <DISPLAY_resetCurPos>
	}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000022c 	.word	0x2000022c
 8001cc4:	cccccccd 	.word	0xcccccccd

08001cc8 <MAIN_updateSensorData>:

	void MAIN_updateSensorData(){
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
		//TO DO
	}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <LL_EXTI_IsActiveFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8001ce0:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001ce2:	695a      	ldr	r2, [r3, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	bf0c      	ite	eq
 8001cee:	2301      	moveq	r3, #1
 8001cf0:	2300      	movne	r3, #0
 8001cf2:	b2db      	uxtb	r3, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40010400 	.word	0x40010400

08001d04 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8001d0c:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6153      	str	r3, [r2, #20]
}
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40010400 	.word	0x40010400

08001d24 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f06f 0201 	mvn.w	r2, #1
 8001d32:	611a      	str	r2, [r3, #16]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d101      	bne.n	8001d58 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d78:	e7fe      	b.n	8001d78 <HardFault_Handler+0x4>

08001d7a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d7e:	e7fe      	b.n	8001d7e <MemManage_Handler+0x4>

08001d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d84:	e7fe      	b.n	8001d84 <BusFault_Handler+0x4>

08001d86 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d86:	b480      	push	{r7}
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d8a:	e7fe      	b.n	8001d8a <UsageFault_Handler+0x4>

08001d8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f7ff ff85 	bl	8001cd8 <LL_EXTI_IsActiveFlag_0_31>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f7ff ff95 	bl	8001d04 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    MAIN_buttonShiftDataID();
 8001dda:	f7ff ff57 	bl	8001c8c <MAIN_buttonShiftDataID>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dde:	bf00      	nop
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 8001de6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001dea:	f7ff ffa9 	bl	8001d40 <LL_TIM_IsActiveFlag_UPDATE>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <TIM2_IRQHandler+0x22>
		DISPLAY_displayCurStr();
 8001df4:	f7fe fea0 	bl	8000b38 <DISPLAY_displayCurStr>
		MAIN_updateSensorData();
 8001df8:	f7ff ff66 	bl	8001cc8 <MAIN_updateSensorData>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 8001dfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e00:	f7ff ff90 	bl	8001d24 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 8001e0c:	4806      	ldr	r0, [pc, #24]	; (8001e28 <TIM3_IRQHandler+0x20>)
 8001e0e:	f7ff ff97 	bl	8001d40 <LL_TIM_IsActiveFlag_UPDATE>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <TIM3_IRQHandler+0x1a>
		DISPLAY_shiftCurStr();
 8001e18:	f7fe ff72 	bl	8000d00 <DISPLAY_shiftCurStr>
		LL_TIM_ClearFlag_UPDATE(TIM3);
 8001e1c:	4802      	ldr	r0, [pc, #8]	; (8001e28 <TIM3_IRQHandler+0x20>)
 8001e1e:	f7ff ff81 	bl	8001d24 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40000400 	.word	0x40000400

08001e2c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXT line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
	I2C_eventCallback();
 8001e30:	f7ff fc98 	bl	8001764 <I2C_eventCallback>
  /* USER CODE END I2C1_EV_IRQn 0 */

  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e40:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <_sbrk+0x5c>)
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <_sbrk+0x60>)
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <_sbrk+0x64>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <_sbrk+0x68>)
 8001e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <_sbrk+0x64>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d207      	bcs.n	8001e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e68:	f001 fb00 	bl	800346c <__errno>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	230c      	movs	r3, #12
 8001e70:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e72:	f04f 33ff 	mov.w	r3, #4294967295
 8001e76:	e009      	b.n	8001e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <_sbrk+0x64>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	4a05      	ldr	r2, [pc, #20]	; (8001e9c <_sbrk+0x64>)
 8001e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20003000 	.word	0x20003000
 8001e98:	00000400 	.word	0x00000400
 8001e9c:	20000230 	.word	0x20000230
 8001ea0:	20000288 	.word	0x20000288

08001ea4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <SystemInit+0x20>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	4a05      	ldr	r2, [pc, #20]	; (8001ec4 <SystemInit+0x20>)
 8001eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000ed00 	.word	0xe000ed00

08001ec8 <__NVIC_GetPriorityGrouping>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ecc:	4b04      	ldr	r3, [pc, #16]	; (8001ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	0a1b      	lsrs	r3, r3, #8
 8001ed2:	f003 0307 	and.w	r3, r3, #7
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_EnableIRQ>:
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	db0b      	blt.n	8001f0e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	f003 021f 	and.w	r2, r3, #31
 8001efc:	4907      	ldr	r1, [pc, #28]	; (8001f1c <__NVIC_EnableIRQ+0x38>)
 8001efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	2001      	movs	r0, #1
 8001f06:	fa00 f202 	lsl.w	r2, r0, r2
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e100 	.word	0xe000e100

08001f20 <__NVIC_SetPriority>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	db0a      	blt.n	8001f4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	490c      	ldr	r1, [pc, #48]	; (8001f6c <__NVIC_SetPriority+0x4c>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	0112      	lsls	r2, r2, #4
 8001f40:	b2d2      	uxtb	r2, r2
 8001f42:	440b      	add	r3, r1
 8001f44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001f48:	e00a      	b.n	8001f60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4908      	ldr	r1, [pc, #32]	; (8001f70 <__NVIC_SetPriority+0x50>)
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	3b04      	subs	r3, #4
 8001f58:	0112      	lsls	r2, r2, #4
 8001f5a:	b2d2      	uxtb	r2, r2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	761a      	strb	r2, [r3, #24]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000e100 	.word	0xe000e100
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <NVIC_EncodePriority>:
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f003 0307 	and.w	r3, r3, #7
 8001f86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f1c3 0307 	rsb	r3, r3, #7
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf28      	it	cs
 8001f92:	2304      	movcs	r3, #4
 8001f94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	3304      	adds	r3, #4
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <NVIC_EncodePriority+0x30>
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3b03      	subs	r3, #3
 8001fa2:	e000      	b.n	8001fa6 <NVIC_EncodePriority+0x32>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43da      	mvns	r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc6:	43d9      	mvns	r1, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fcc:	4313      	orrs	r3, r2
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3724      	adds	r7, #36	; 0x24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <LL_APB1_GRP1_EnableClock>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001fe4:	4b08      	ldr	r3, [pc, #32]	; (8002008 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fe6:	69da      	ldr	r2, [r3, #28]
 8001fe8:	4907      	ldr	r1, [pc, #28]	; (8002008 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40021000 	.word	0x40021000

0800200c <LL_TIM_DisableARRPreload>:
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	601a      	str	r2, [r3, #0]
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_TIM_OC_DisableFast>:
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d028      	beq.n	800208e <LL_TIM_OC_DisableFast+0x62>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b04      	cmp	r3, #4
 8002040:	d023      	beq.n	800208a <LL_TIM_OC_DisableFast+0x5e>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b10      	cmp	r3, #16
 8002046:	d01e      	beq.n	8002086 <LL_TIM_OC_DisableFast+0x5a>
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	2b40      	cmp	r3, #64	; 0x40
 800204c:	d019      	beq.n	8002082 <LL_TIM_OC_DisableFast+0x56>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002054:	d013      	beq.n	800207e <LL_TIM_OC_DisableFast+0x52>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800205c:	d00d      	beq.n	800207a <LL_TIM_OC_DisableFast+0x4e>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002064:	d007      	beq.n	8002076 <LL_TIM_OC_DisableFast+0x4a>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800206c:	d101      	bne.n	8002072 <LL_TIM_OC_DisableFast+0x46>
 800206e:	2307      	movs	r3, #7
 8002070:	e00e      	b.n	8002090 <LL_TIM_OC_DisableFast+0x64>
 8002072:	2308      	movs	r3, #8
 8002074:	e00c      	b.n	8002090 <LL_TIM_OC_DisableFast+0x64>
 8002076:	2306      	movs	r3, #6
 8002078:	e00a      	b.n	8002090 <LL_TIM_OC_DisableFast+0x64>
 800207a:	2305      	movs	r3, #5
 800207c:	e008      	b.n	8002090 <LL_TIM_OC_DisableFast+0x64>
 800207e:	2304      	movs	r3, #4
 8002080:	e006      	b.n	8002090 <LL_TIM_OC_DisableFast+0x64>
 8002082:	2303      	movs	r3, #3
 8002084:	e004      	b.n	8002090 <LL_TIM_OC_DisableFast+0x64>
 8002086:	2302      	movs	r3, #2
 8002088:	e002      	b.n	8002090 <LL_TIM_OC_DisableFast+0x64>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <LL_TIM_OC_DisableFast+0x64>
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	3318      	adds	r3, #24
 8002096:	4619      	mov	r1, r3
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <LL_TIM_OC_DisableFast+0x9c>)
 800209c:	5cd3      	ldrb	r3, [r2, r3]
 800209e:	440b      	add	r3, r1
 80020a0:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	4908      	ldr	r1, [pc, #32]	; (80020cc <LL_TIM_OC_DisableFast+0xa0>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	4619      	mov	r1, r3
 80020ae:	2304      	movs	r3, #4
 80020b0:	408b      	lsls	r3, r1
 80020b2:	43db      	mvns	r3, r3
 80020b4:	401a      	ands	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	601a      	str	r2, [r3, #0]
}
 80020ba:	bf00      	nop
 80020bc:	3714      	adds	r7, #20
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	08004fcc 	.word	0x08004fcc
 80020cc:	08004fd8 	.word	0x08004fd8

080020d0 <LL_TIM_SetClockSource>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80020e2:	f023 0307 	bic.w	r3, r3, #7
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	609a      	str	r2, [r3, #8]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <LL_TIM_SetTriggerOutput>:
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	605a      	str	r2, [r3, #4]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_TIM_DisableMasterSlaveMode>:
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	609a      	str	r2, [r3, #8]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <MX_TIM2_Init>:
void add_TIM3_Init(void);
/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b08e      	sub	sp, #56	; 0x38
 8002144:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	609a      	str	r2, [r3, #8]
 8002152:	60da      	str	r2, [r3, #12]
 8002154:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002156:	1d3b      	adds	r3, r7, #4
 8002158:	2220      	movs	r2, #32
 800215a:	2100      	movs	r1, #0
 800215c:	4618      	mov	r0, r3
 800215e:	f001 f9cf 	bl	8003500 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002162:	2001      	movs	r0, #1
 8002164:	f7ff ff3a 	bl	8001fdc <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002168:	f7ff feae 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 800216c:	4603      	mov	r3, r0
 800216e:	2200      	movs	r2, #0
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fefe 	bl	8001f74 <NVIC_EncodePriority>
 8002178:	4603      	mov	r3, r0
 800217a:	4619      	mov	r1, r3
 800217c:	201c      	movs	r0, #28
 800217e:	f7ff fecf 	bl	8001f20 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002182:	201c      	movs	r0, #28
 8002184:	f7ff feae 	bl	8001ee4 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 8002188:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800218c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800218e:	2300      	movs	r3, #0
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 1;
 8002192:	2301      	movs	r3, #1
 8002194:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002196:	2300      	movs	r3, #0
 8002198:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800219a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219e:	4619      	mov	r1, r3
 80021a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021a4:	f000 fdae 	bl	8002d04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80021a8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021ac:	f7ff ff2e 	bl	800200c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80021b0:	2100      	movs	r1, #0
 80021b2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021b6:	f7ff ff8b 	bl	80020d0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 80021ba:	2310      	movs	r3, #16
 80021bc:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80021ce:	1d3b      	adds	r3, r7, #4
 80021d0:	461a      	mov	r2, r3
 80021d2:	2101      	movs	r1, #1
 80021d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021d8:	f000 fe06 	bl	8002de8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80021dc:	2101      	movs	r1, #1
 80021de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021e2:	f7ff ff23 	bl	800202c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80021e6:	2100      	movs	r1, #0
 80021e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021ec:	f7ff ff85 	bl	80020fa <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80021f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80021f4:	f7ff ff94 	bl	8002120 <LL_TIM_DisableMasterSlaveMode>

}
 80021f8:	bf00      	nop
 80021fa:	3738      	adds	r7, #56	; 0x38
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08e      	sub	sp, #56	; 0x38
 8002204:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	2220      	movs	r2, #32
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f001 f96f 	bl	8003500 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002222:	2002      	movs	r0, #2
 8002224:	f7ff feda 	bl	8001fdc <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002228:	f7ff fe4e 	bl	8001ec8 <__NVIC_GetPriorityGrouping>
 800222c:	4603      	mov	r3, r0
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	4618      	mov	r0, r3
 8002234:	f7ff fe9e 	bl	8001f74 <NVIC_EncodePriority>
 8002238:	4603      	mov	r3, r0
 800223a:	4619      	mov	r1, r3
 800223c:	201d      	movs	r0, #29
 800223e:	f7ff fe6f 	bl	8001f20 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002242:	201d      	movs	r0, #29
 8002244:	f7ff fe4e 	bl	8001ee4 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 8002248:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800224c:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800224e:	2300      	movs	r3, #0
 8002250:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 500;
 8002252:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002256:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800225c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002260:	4619      	mov	r1, r3
 8002262:	4814      	ldr	r0, [pc, #80]	; (80022b4 <MX_TIM3_Init+0xb4>)
 8002264:	f000 fd4e 	bl	8002d04 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002268:	4812      	ldr	r0, [pc, #72]	; (80022b4 <MX_TIM3_Init+0xb4>)
 800226a:	f7ff fecf 	bl	800200c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 800226e:	2100      	movs	r1, #0
 8002270:	4810      	ldr	r0, [pc, #64]	; (80022b4 <MX_TIM3_Init+0xb4>)
 8002272:	f7ff ff2d 	bl	80020d0 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002276:	2310      	movs	r3, #16
 8002278:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800227a:	2300      	movs	r3, #0
 800227c:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	461a      	mov	r2, r3
 800228e:	2101      	movs	r1, #1
 8002290:	4808      	ldr	r0, [pc, #32]	; (80022b4 <MX_TIM3_Init+0xb4>)
 8002292:	f000 fda9 	bl	8002de8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002296:	2101      	movs	r1, #1
 8002298:	4806      	ldr	r0, [pc, #24]	; (80022b4 <MX_TIM3_Init+0xb4>)
 800229a:	f7ff fec7 	bl	800202c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800229e:	2100      	movs	r1, #0
 80022a0:	4804      	ldr	r0, [pc, #16]	; (80022b4 <MX_TIM3_Init+0xb4>)
 80022a2:	f7ff ff2a 	bl	80020fa <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80022a6:	4803      	ldr	r0, [pc, #12]	; (80022b4 <MX_TIM3_Init+0xb4>)
 80022a8:	f7ff ff3a 	bl	8002120 <LL_TIM_DisableMasterSlaveMode>

}
 80022ac:	bf00      	nop
 80022ae:	3738      	adds	r7, #56	; 0x38
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40000400 	.word	0x40000400

080022b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022bc:	480d      	ldr	r0, [pc, #52]	; (80022f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80022be:	490e      	ldr	r1, [pc, #56]	; (80022f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022c0:	4a0e      	ldr	r2, [pc, #56]	; (80022fc <LoopForever+0xe>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c4:	e002      	b.n	80022cc <LoopCopyDataInit>

080022c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ca:	3304      	adds	r3, #4

080022cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022d0:	d3f9      	bcc.n	80022c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022d2:	4a0b      	ldr	r2, [pc, #44]	; (8002300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022d4:	4c0b      	ldr	r4, [pc, #44]	; (8002304 <LoopForever+0x16>)
  movs r3, #0
 80022d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d8:	e001      	b.n	80022de <LoopFillZerobss>

080022da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022dc:	3204      	adds	r2, #4

080022de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022e0:	d3fb      	bcc.n	80022da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022e2:	f7ff fddf 	bl	8001ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022e6:	f001 f8c7 	bl	8003478 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022ea:	f7ff fc6b 	bl	8001bc4 <main>

080022ee <LoopForever>:

LoopForever:
    b LoopForever
 80022ee:	e7fe      	b.n	80022ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022f0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80022f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f8:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 80022fc:	08005214 	.word	0x08005214
  ldr r2, =_sbss
 8002300:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8002304:	20000284 	.word	0x20000284

08002308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC1_2_IRQHandler>
	...

0800230c <LL_EXTI_EnableIT_0_31>:
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <LL_EXTI_EnableIT_0_31+0x20>)
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4904      	ldr	r1, [pc, #16]	; (800232c <LL_EXTI_EnableIT_0_31+0x20>)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4313      	orrs	r3, r2
 800231e:	600b      	str	r3, [r1, #0]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40010400 	.word	0x40010400

08002330 <LL_EXTI_EnableIT_32_63>:
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002338:	4b05      	ldr	r3, [pc, #20]	; (8002350 <LL_EXTI_EnableIT_32_63+0x20>)
 800233a:	6a1a      	ldr	r2, [r3, #32]
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <LL_EXTI_EnableIT_32_63+0x20>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4313      	orrs	r3, r2
 8002342:	620b      	str	r3, [r1, #32]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	40010400 	.word	0x40010400

08002354 <LL_EXTI_DisableIT_0_31>:
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <LL_EXTI_DisableIT_0_31+0x24>)
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	43db      	mvns	r3, r3
 8002364:	4904      	ldr	r1, [pc, #16]	; (8002378 <LL_EXTI_DisableIT_0_31+0x24>)
 8002366:	4013      	ands	r3, r2
 8002368:	600b      	str	r3, [r1, #0]
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40010400 	.word	0x40010400

0800237c <LL_EXTI_DisableIT_32_63>:
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002384:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <LL_EXTI_DisableIT_32_63+0x24>)
 8002386:	6a1a      	ldr	r2, [r3, #32]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	43db      	mvns	r3, r3
 800238c:	4904      	ldr	r1, [pc, #16]	; (80023a0 <LL_EXTI_DisableIT_32_63+0x24>)
 800238e:	4013      	ands	r3, r2
 8002390:	620b      	str	r3, [r1, #32]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40010400 	.word	0x40010400

080023a4 <LL_EXTI_EnableEvent_0_31>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4904      	ldr	r1, [pc, #16]	; (80023c4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	40010400 	.word	0x40010400

080023c8 <LL_EXTI_EnableEvent_32_63>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80023d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023d4:	4904      	ldr	r1, [pc, #16]	; (80023e8 <LL_EXTI_EnableEvent_32_63+0x20>)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4313      	orrs	r3, r2
 80023da:	624b      	str	r3, [r1, #36]	; 0x24
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr
 80023e8:	40010400 	.word	0x40010400

080023ec <LL_EXTI_DisableEvent_0_31>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <LL_EXTI_DisableEvent_0_31+0x24>)
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	4904      	ldr	r1, [pc, #16]	; (8002410 <LL_EXTI_DisableEvent_0_31+0x24>)
 80023fe:	4013      	ands	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40010400 	.word	0x40010400

08002414 <LL_EXTI_DisableEvent_32_63>:
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <LL_EXTI_DisableEvent_32_63+0x24>)
 800241e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	43db      	mvns	r3, r3
 8002424:	4904      	ldr	r1, [pc, #16]	; (8002438 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002426:	4013      	ands	r3, r2
 8002428:	624b      	str	r3, [r1, #36]	; 0x24
}
 800242a:	bf00      	nop
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	40010400 	.word	0x40010400

0800243c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002444:	4b05      	ldr	r3, [pc, #20]	; (800245c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	4904      	ldr	r1, [pc, #16]	; (800245c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40010400 	.word	0x40010400

08002460 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002468:	4b05      	ldr	r3, [pc, #20]	; (8002480 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800246a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800246c:	4904      	ldr	r1, [pc, #16]	; (8002480 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4313      	orrs	r3, r2
 8002472:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40010400 	.word	0x40010400

08002484 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	43db      	mvns	r3, r3
 8002494:	4904      	ldr	r1, [pc, #16]	; (80024a8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002496:	4013      	ands	r3, r2
 8002498:	608b      	str	r3, [r1, #8]
}
 800249a:	bf00      	nop
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40010400 	.word	0x40010400

080024ac <LL_EXTI_DisableRisingTrig_32_63>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80024b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	4904      	ldr	r1, [pc, #16]	; (80024d0 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80024be:	4013      	ands	r3, r2
 80024c0:	628b      	str	r3, [r1, #40]	; 0x28
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40010400 	.word	0x40010400

080024d4 <LL_EXTI_EnableFallingTrig_0_31>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80024de:	68da      	ldr	r2, [r3, #12]
 80024e0:	4904      	ldr	r1, [pc, #16]	; (80024f4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	60cb      	str	r3, [r1, #12]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	40010400 	.word	0x40010400

080024f8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002504:	4904      	ldr	r1, [pc, #16]	; (8002518 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4313      	orrs	r3, r2
 800250a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr
 8002518:	40010400 	.word	0x40010400

0800251c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8002524:	4b06      	ldr	r3, [pc, #24]	; (8002540 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002526:	68da      	ldr	r2, [r3, #12]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	43db      	mvns	r3, r3
 800252c:	4904      	ldr	r1, [pc, #16]	; (8002540 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800252e:	4013      	ands	r3, r2
 8002530:	60cb      	str	r3, [r1, #12]
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40010400 	.word	0x40010400

08002544 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800254c:	4b06      	ldr	r3, [pc, #24]	; (8002568 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800254e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	43db      	mvns	r3, r3
 8002554:	4904      	ldr	r1, [pc, #16]	; (8002568 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002556:	4013      	ands	r3, r2
 8002558:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40010400 	.word	0x40010400

0800256c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
#endif
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7a1b      	ldrb	r3, [r3, #8]
 800257c:	2b00      	cmp	r3, #0
 800257e:	f000 80c2 	beq.w	8002706 <LL_EXTI_Init+0x19a>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d05b      	beq.n	8002642 <LL_EXTI_Init+0xd6>
    {
      switch (EXTI_InitStruct->Mode)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	7a5b      	ldrb	r3, [r3, #9]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d00e      	beq.n	80025b0 <LL_EXTI_Init+0x44>
 8002592:	2b02      	cmp	r3, #2
 8002594:	d017      	beq.n	80025c6 <LL_EXTI_Init+0x5a>
 8002596:	2b00      	cmp	r3, #0
 8002598:	d120      	bne.n	80025dc <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff24 	bl	80023ec <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff feaf 	bl	800230c <LL_EXTI_EnableIT_0_31>
          break;
 80025ae:	e018      	b.n	80025e2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff fecd 	bl	8002354 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff fef0 	bl	80023a4 <LL_EXTI_EnableEvent_0_31>
          break;
 80025c4:	e00d      	b.n	80025e2 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff fe9e 	bl	800230c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fee5 	bl	80023a4 <LL_EXTI_EnableEvent_0_31>
          break;
 80025da:	e002      	b.n	80025e2 <LL_EXTI_Init+0x76>
        default:
          status = ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
          break;
 80025e0:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	7a9b      	ldrb	r3, [r3, #10]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d02b      	beq.n	8002642 <LL_EXTI_Init+0xd6>
      {
        switch (EXTI_InitStruct->Trigger)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	7a9b      	ldrb	r3, [r3, #10]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d00e      	beq.n	8002610 <LL_EXTI_Init+0xa4>
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d017      	beq.n	8002626 <LL_EXTI_Init+0xba>
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d120      	bne.n	800263c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff ff8c 	bl	800251c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff17 	bl	800243c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800260e:	e019      	b.n	8002644 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff ff35 	bl	8002484 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff ff58 	bl	80024d4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002624:	e00e      	b.n	8002644 <LL_EXTI_Init+0xd8>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff06 	bl	800243c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f7ff ff4d 	bl	80024d4 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800263a:	e003      	b.n	8002644 <LL_EXTI_Init+0xd8>
          default:
            status = ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
            break;
 8002640:	e000      	b.n	8002644 <LL_EXTI_Init+0xd8>
        }
      }
 8002642:	bf00      	nop
    }
#if defined(EXTI_32_63_SUPPORT)
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d071      	beq.n	8002730 <LL_EXTI_Init+0x1c4>
    {
      switch (EXTI_InitStruct->Mode)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	7a5b      	ldrb	r3, [r3, #9]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d00e      	beq.n	8002672 <LL_EXTI_Init+0x106>
 8002654:	2b02      	cmp	r3, #2
 8002656:	d017      	beq.n	8002688 <LL_EXTI_Init+0x11c>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d120      	bne.n	800269e <LL_EXTI_Init+0x132>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff fed7 	bl	8002414 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4618      	mov	r0, r3
 800266c:	f7ff fe60 	bl	8002330 <LL_EXTI_EnableIT_32_63>
          break;
 8002670:	e018      	b.n	80026a4 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fe80 	bl	800237c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff fea1 	bl	80023c8 <LL_EXTI_EnableEvent_32_63>
          break;
 8002686:	e00d      	b.n	80026a4 <LL_EXTI_Init+0x138>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	4618      	mov	r0, r3
 800268e:	f7ff fe4f 	bl	8002330 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4618      	mov	r0, r3
 8002698:	f7ff fe96 	bl	80023c8 <LL_EXTI_EnableEvent_32_63>
          break;
 800269c:	e002      	b.n	80026a4 <LL_EXTI_Init+0x138>
        default:
          status = ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
          break;
 80026a2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7a9b      	ldrb	r3, [r3, #10]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d041      	beq.n	8002730 <LL_EXTI_Init+0x1c4>
      {
        switch (EXTI_InitStruct->Trigger)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7a9b      	ldrb	r3, [r3, #10]
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d00e      	beq.n	80026d2 <LL_EXTI_Init+0x166>
 80026b4:	2b03      	cmp	r3, #3
 80026b6:	d017      	beq.n	80026e8 <LL_EXTI_Init+0x17c>
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d120      	bne.n	80026fe <LL_EXTI_Init+0x192>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff3f 	bl	8002544 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fec8 	bl	8002460 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80026d0:	e02f      	b.n	8002732 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fee8 	bl	80024ac <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff ff09 	bl	80024f8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80026e6:	e024      	b.n	8002732 <LL_EXTI_Init+0x1c6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff feb7 	bl	8002460 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff fefe 	bl	80024f8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80026fc:	e019      	b.n	8002732 <LL_EXTI_Init+0x1c6>
          default:
            status = ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	73fb      	strb	r3, [r7, #15]
            break;
 8002702:	bf00      	nop
 8002704:	e015      	b.n	8002732 <LL_EXTI_Init+0x1c6>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fe22 	bl	8002354 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fe69 	bl	80023ec <LL_EXTI_DisableEvent_0_31>
#if defined(EXTI_32_63_SUPPORT)
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff fe2c 	bl	800237c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff fe73 	bl	8002414 <LL_EXTI_DisableEvent_32_63>
 800272e:	e000      	b.n	8002732 <LL_EXTI_Init+0x1c6>
      }
 8002730:	bf00      	nop
#endif
  }
  return status;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <LL_GPIO_SetPinMode>:
{
 800273c:	b480      	push	{r7}
 800273e:	b089      	sub	sp, #36	; 0x24
 8002740:	af00      	add	r7, sp, #0
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	613b      	str	r3, [r7, #16]
  return result;
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	fab3 f383 	clz	r3, r3
 800275e:	b2db      	uxtb	r3, r3
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2103      	movs	r1, #3
 8002764:	fa01 f303 	lsl.w	r3, r1, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	401a      	ands	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	fa93 f3a3 	rbit	r3, r3
 8002776:	61bb      	str	r3, [r7, #24]
  return result;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	fa01 f303 	lsl.w	r3, r1, r3
 8002788:	431a      	orrs	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	601a      	str	r2, [r3, #0]
}
 800278e:	bf00      	nop
 8002790:	3724      	adds	r7, #36	; 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <LL_GPIO_SetPinOutputType>:
{
 800279a:	b480      	push	{r7}
 800279c:	b085      	sub	sp, #20
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	401a      	ands	r2, r3
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	fb01 f303 	mul.w	r3, r1, r3
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	605a      	str	r2, [r3, #4]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <LL_GPIO_SetPinSpeed>:
{
 80027ca:	b480      	push	{r7}
 80027cc:	b089      	sub	sp, #36	; 0x24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	fa93 f3a3 	rbit	r3, r3
 80027e4:	613b      	str	r3, [r7, #16]
  return result;
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2103      	movs	r1, #3
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	401a      	ands	r2, r3
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	fa93 f3a3 	rbit	r3, r3
 8002804:	61bb      	str	r3, [r7, #24]
  return result;
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	431a      	orrs	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	3724      	adds	r7, #36	; 0x24
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_GPIO_SetPinPull>:
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	; 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	fa93 f3a3 	rbit	r3, r3
 8002842:	613b      	str	r3, [r7, #16]
  return result;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2103      	movs	r1, #3
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	401a      	ands	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	fa93 f3a3 	rbit	r3, r3
 8002862:	61bb      	str	r3, [r7, #24]
  return result;
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	fa01 f303 	lsl.w	r3, r1, r3
 8002874:	431a      	orrs	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	60da      	str	r2, [r3, #12]
}
 800287a:	bf00      	nop
 800287c:	3724      	adds	r7, #36	; 0x24
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <LL_GPIO_SetAFPin_0_7>:
{
 8002886:	b480      	push	{r7}
 8002888:	b089      	sub	sp, #36	; 0x24
 800288a:	af00      	add	r7, sp, #0
 800288c:	60f8      	str	r0, [r7, #12]
 800288e:	60b9      	str	r1, [r7, #8]
 8002890:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6a1a      	ldr	r2, [r3, #32]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	613b      	str	r3, [r7, #16]
  return result;
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	fab3 f383 	clz	r3, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	210f      	movs	r1, #15
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	401a      	ands	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	61bb      	str	r3, [r7, #24]
  return result;
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	fa01 f303 	lsl.w	r3, r1, r3
 80028d2:	431a      	orrs	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	621a      	str	r2, [r3, #32]
}
 80028d8:	bf00      	nop
 80028da:	3724      	adds	r7, #36	; 0x24
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <LL_GPIO_SetAFPin_8_15>:
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa93 f3a3 	rbit	r3, r3
 8002900:	613b      	str	r3, [r7, #16]
  return result;
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	fab3 f383 	clz	r3, r3
 8002908:	b2db      	uxtb	r3, r3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	210f      	movs	r1, #15
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	401a      	ands	r2, r3
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	61bb      	str	r3, [r7, #24]
  return result;
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	fa01 f303 	lsl.w	r3, r1, r3
 8002934:	431a      	orrs	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24
}
 800293a:	bf00      	nop
 800293c:	3724      	adds	r7, #36	; 0x24
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b088      	sub	sp, #32
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	613b      	str	r3, [r7, #16]
  return result;
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	fab3 f383 	clz	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002968:	e051      	b.n	8002a0e <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	2101      	movs	r1, #1
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	4013      	ands	r3, r2
 8002978:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d043      	beq.n	8002a08 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b01      	cmp	r3, #1
 8002986:	d003      	beq.n	8002990 <LL_GPIO_Init+0x4a>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d10e      	bne.n	80029ae <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	461a      	mov	r2, r3
 8002996:	69b9      	ldr	r1, [r7, #24]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff16 	bl	80027ca <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	6819      	ldr	r1, [r3, #0]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	461a      	mov	r2, r3
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff fef6 	bl	800279a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	461a      	mov	r2, r3
 80029b4:	69b9      	ldr	r1, [r7, #24]
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff ff36 	bl	8002828 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d11a      	bne.n	80029fa <LL_GPIO_Init+0xb4>
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	60bb      	str	r3, [r7, #8]
  return result;
 80029d0:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b07      	cmp	r3, #7
 80029da:	d807      	bhi.n	80029ec <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	461a      	mov	r2, r3
 80029e2:	69b9      	ldr	r1, [r7, #24]
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff4e 	bl	8002886 <LL_GPIO_SetAFPin_0_7>
 80029ea:	e006      	b.n	80029fa <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	461a      	mov	r2, r3
 80029f2:	69b9      	ldr	r1, [r7, #24]
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff75 	bl	80028e4 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	461a      	mov	r2, r3
 8002a00:	69b9      	ldr	r1, [r7, #24]
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f7ff fe9a 	bl	800273c <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1a6      	bne.n	800296a <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3720      	adds	r7, #32
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <LL_I2C_Enable>:
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	601a      	str	r2, [r3, #0]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <LL_I2C_Disable>:
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 0201 	bic.w	r2, r3, #1
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	601a      	str	r2, [r3, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <LL_I2C_ConfigFilters>:
{
 8002a66:	b480      	push	{r7}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ANFOFF | I2C_CR1_DNF, AnalogFilter | (DigitalFilter << I2C_CR1_DNF_Pos));
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0219      	lsls	r1, r3, #8
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	430b      	orrs	r3, r1
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	601a      	str	r2, [r3, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_I2C_SetOwnAddress1>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002aa8:	f023 0307 	bic.w	r3, r3, #7
 8002aac:	68b9      	ldr	r1, [r7, #8]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	609a      	str	r2, [r3, #8]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <LL_I2C_EnableOwnAddress1>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <LL_I2C_DisableOwnAddress1>:
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR1, I2C_OAR1_OA1EN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	609a      	str	r2, [r3, #8]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_I2C_SetTiming>:
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(I2Cx->TIMINGR, Timing);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	611a      	str	r2, [r3, #16]
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <LL_I2C_SetMode>:
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBHEN | I2C_CR1_SMBDEN, PeripheralMode);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <LL_I2C_AcknowledgeNextData>:
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
 8002b4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_NACK, TypeAcknowledge);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	605a      	str	r2, [r3, #4]
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: I2C registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff ff65 	bl	8002a46 <LL_I2C_Disable>
  /*---------------------------- I2Cx CR1 Configuration ------------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_CR1_ANFOFF bit
   * - DigitalFilter: I2C_CR1_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	461a      	mov	r2, r3
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7ff ff6d 	bl	8002a66 <LL_I2C_ConfigFilters>
  /*---------------------------- I2Cx TIMINGR Configuration --------------------
   * Configure the SDA setup, hold time and the SCL high, low period with parameter :
   * - Timing: I2C_TIMINGR_PRESC[3:0], I2C_TIMINGR_SCLDEL[3:0], I2C_TIMINGR_SDADEL[3:0],
   *           I2C_TIMINGR_SCLH[7:0] and I2C_TIMINGR_SCLL[7:0] bits
   */
  LL_I2C_SetTiming(I2Cx, I2C_InitStruct->Timing);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff ffb6 	bl	8002b04 <LL_I2C_SetTiming>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ff44 	bl	8002a26 <LL_I2C_Enable>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_OA1[9:0] bits
   * - OwnAddrSize:  I2C_OAR1_OA1MODE bit
   */
  LL_I2C_DisableOwnAddress1(I2Cx);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffa0 	bl	8002ae4 <LL_I2C_DisableOwnAddress1>
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6919      	ldr	r1, [r3, #16]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	461a      	mov	r2, r3
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ff70 	bl	8002a94 <LL_I2C_SetOwnAddress1>

  /* OwnAdress1 == 0 is reserved for General Call address */
  if (I2C_InitStruct->OwnAddress1 != 0U)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <LL_I2C_Init+0x56>
  {
    LL_I2C_EnableOwnAddress1(I2Cx);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff81 	bl	8002ac4 <LL_I2C_EnableOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBDEN and I2C_CR1_SMBHEN bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ffa9 	bl	8002b20 <LL_I2C_SetMode>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ffb6 	bl	8002b46 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <LL_TIM_SetPrescaler>:
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <LL_TIM_SetAutoReload>:
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_TIM_SetRepetitionCounter>:
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_TIM_OC_SetCompareCH1>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <LL_TIM_OC_SetCompareCH2>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	683a      	ldr	r2, [r7, #0]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <LL_TIM_OC_SetCompareCH3>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr

08002c8c <LL_TIM_OC_SetCompareCH4>:
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <LL_TIM_OC_SetCompareCH5>:
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_TIM_OC_SetCompareCH6>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	615a      	str	r2, [r3, #20]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a2f      	ldr	r2, [pc, #188]	; (8002dd4 <LL_TIM_Init+0xd0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d007      	beq.n	8002d2c <LL_TIM_Init+0x28>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d22:	d003      	beq.n	8002d2c <LL_TIM_Init+0x28>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a2c      	ldr	r2, [pc, #176]	; (8002dd8 <LL_TIM_Init+0xd4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d106      	bne.n	8002d3a <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a25      	ldr	r2, [pc, #148]	; (8002dd4 <LL_TIM_Init+0xd0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d013      	beq.n	8002d6a <LL_TIM_Init+0x66>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d48:	d00f      	beq.n	8002d6a <LL_TIM_Init+0x66>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a22      	ldr	r2, [pc, #136]	; (8002dd8 <LL_TIM_Init+0xd4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00b      	beq.n	8002d6a <LL_TIM_Init+0x66>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a21      	ldr	r2, [pc, #132]	; (8002ddc <LL_TIM_Init+0xd8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d007      	beq.n	8002d6a <LL_TIM_Init+0x66>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a20      	ldr	r2, [pc, #128]	; (8002de0 <LL_TIM_Init+0xdc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d003      	beq.n	8002d6a <LL_TIM_Init+0x66>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1f      	ldr	r2, [pc, #124]	; (8002de4 <LL_TIM_Init+0xe0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d106      	bne.n	8002d78 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff3b 	bl	8002c00 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	4619      	mov	r1, r3
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ff27 	bl	8002be4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a0e      	ldr	r2, [pc, #56]	; (8002dd4 <LL_TIM_Init+0xd0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00b      	beq.n	8002db6 <LL_TIM_Init+0xb2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <LL_TIM_Init+0xd8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d007      	beq.n	8002db6 <LL_TIM_Init+0xb2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <LL_TIM_Init+0xdc>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d003      	beq.n	8002db6 <LL_TIM_Init+0xb2>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a0c      	ldr	r2, [pc, #48]	; (8002de4 <LL_TIM_Init+0xe0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d105      	bne.n	8002dc2 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff2d 	bl	8002c1c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff ff8e 	bl	8002ce4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	40000400 	.word	0x40000400
 8002ddc:	40014000 	.word	0x40014000
 8002de0:	40014400 	.word	0x40014400
 8002de4:	40014800 	.word	0x40014800

08002de8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dfe:	d01f      	beq.n	8002e40 <LL_TIM_OC_Init+0x58>
 8002e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e04:	d804      	bhi.n	8002e10 <LL_TIM_OC_Init+0x28>
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d00c      	beq.n	8002e24 <LL_TIM_OC_Init+0x3c>
 8002e0a:	2b10      	cmp	r3, #16
 8002e0c:	d011      	beq.n	8002e32 <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8002e0e:	e033      	b.n	8002e78 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d022      	beq.n	8002e5c <LL_TIM_OC_Init+0x74>
 8002e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e1a:	d026      	beq.n	8002e6a <LL_TIM_OC_Init+0x82>
 8002e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e20:	d015      	beq.n	8002e4e <LL_TIM_OC_Init+0x66>
      break;
 8002e22:	e029      	b.n	8002e78 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f82c 	bl	8002e84 <OC1Config>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8002e30:	e022      	b.n	8002e78 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f000 f89f 	bl	8002f78 <OC2Config>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e3e:	e01b      	b.n	8002e78 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 f916 	bl	8003074 <OC3Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e4c:	e014      	b.n	8002e78 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f98d 	bl	8003170 <OC4Config>
 8002e56:	4603      	mov	r3, r0
 8002e58:	75fb      	strb	r3, [r7, #23]
      break;
 8002e5a:	e00d      	b.n	8002e78 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	68f8      	ldr	r0, [r7, #12]
 8002e60:	f000 f9ec 	bl	800323c <OC5Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	75fb      	strb	r3, [r7, #23]
      break;
 8002e68:	e006      	b.n	8002e78 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f000 fa43 	bl	80032f8 <OC6Config>
 8002e72:	4603      	mov	r3, r0
 8002e74:	75fb      	strb	r3, [r7, #23]
      break;
 8002e76:	bf00      	nop
  }

  return result;
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f023 0201 	bic.w	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 0303 	bic.w	r3, r3, #3
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f023 0202 	bic.w	r2, r3, #2
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f023 0201 	bic.w	r2, r3, #1
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a20      	ldr	r2, [pc, #128]	; (8002f68 <OC1Config+0xe4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00b      	beq.n	8002f02 <OC1Config+0x7e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <OC1Config+0xe8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d007      	beq.n	8002f02 <OC1Config+0x7e>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <OC1Config+0xec>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d003      	beq.n	8002f02 <OC1Config+0x7e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <OC1Config+0xf0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d11e      	bne.n	8002f40 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 0208 	bic.w	r2, r3, #8
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	f023 0204 	bic.w	r2, r3, #4
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	69db      	ldr	r3, [r3, #28]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	4619      	mov	r1, r3
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff fe70 	bl	8002c38 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3718      	adds	r7, #24
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40014400 	.word	0x40014400
 8002f74:	40014800 	.word	0x40014800

08002f78 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	f023 0210 	bic.w	r2, r3, #16
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	0212      	lsls	r2, r2, #8
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 0220 	bic.w	r2, r3, #32
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f023 0210 	bic.w	r2, r3, #16
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a21      	ldr	r2, [pc, #132]	; (8003064 <OC2Config+0xec>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00b      	beq.n	8002ffc <OC2Config+0x84>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a20      	ldr	r2, [pc, #128]	; (8003068 <OC2Config+0xf0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d007      	beq.n	8002ffc <OC2Config+0x84>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a1f      	ldr	r2, [pc, #124]	; (800306c <OC2Config+0xf4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d003      	beq.n	8002ffc <OC2Config+0x84>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	; (8003070 <OC2Config+0xf8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d11f      	bne.n	800303c <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	019b      	lsls	r3, r3, #6
 8003008:	4313      	orrs	r3, r2
 800300a:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	019b      	lsls	r3, r3, #6
 8003018:	4313      	orrs	r3, r2
 800301a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4619      	mov	r1, r3
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fe00 	bl	8002c54 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3718      	adds	r7, #24
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40012c00 	.word	0x40012c00
 8003068:	40014000 	.word	0x40014000
 800306c:	40014400 	.word	0x40014400
 8003070:	40014800 	.word	0x40014800

08003074 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0303 	bic.w	r3, r3, #3
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	4313      	orrs	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	021b      	lsls	r3, r3, #8
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a21      	ldr	r2, [pc, #132]	; (8003160 <OC3Config+0xec>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00b      	beq.n	80030f6 <OC3Config+0x82>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a20      	ldr	r2, [pc, #128]	; (8003164 <OC3Config+0xf0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d007      	beq.n	80030f6 <OC3Config+0x82>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a1f      	ldr	r2, [pc, #124]	; (8003168 <OC3Config+0xf4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d003      	beq.n	80030f6 <OC3Config+0x82>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4a1e      	ldr	r2, [pc, #120]	; (800316c <OC3Config+0xf8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d11f      	bne.n	8003136 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	029b      	lsls	r3, r3, #10
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	029b      	lsls	r3, r3, #10
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	015b      	lsls	r3, r3, #5
 8003132:	4313      	orrs	r3, r2
 8003134:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7ff fd91 	bl	8002c70 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40012c00 	.word	0x40012c00
 8003164:	40014000 	.word	0x40014000
 8003168:	40014400 	.word	0x40014400
 800316c:	40014800 	.word	0x40014800

08003170 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800319e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	0212      	lsls	r2, r2, #8
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	031b      	lsls	r3, r3, #12
 80031c0:	4313      	orrs	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	031b      	lsls	r3, r3, #12
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a15      	ldr	r2, [pc, #84]	; (800322c <OC4Config+0xbc>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d00b      	beq.n	80031f4 <OC4Config+0x84>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a14      	ldr	r2, [pc, #80]	; (8003230 <OC4Config+0xc0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d007      	beq.n	80031f4 <OC4Config+0x84>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a13      	ldr	r2, [pc, #76]	; (8003234 <OC4Config+0xc4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <OC4Config+0x84>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a12      	ldr	r2, [pc, #72]	; (8003238 <OC4Config+0xc8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d107      	bne.n	8003204 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	019b      	lsls	r3, r3, #6
 8003200:	4313      	orrs	r3, r2
 8003202:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff fd38 	bl	8002c8c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3718      	adds	r7, #24
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40012c00 	.word	0x40012c00
 8003230:	40014000 	.word	0x40014000
 8003234:	40014400 	.word	0x40014400
 8003238:	40014800 	.word	0x40014800

0800323c <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	4313      	orrs	r3, r2
 800326e:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	041b      	lsls	r3, r3, #16
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	041b      	lsls	r3, r3, #16
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <OC5Config+0xac>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00b      	beq.n	80032b0 <OC5Config+0x74>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a14      	ldr	r2, [pc, #80]	; (80032ec <OC5Config+0xb0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <OC5Config+0x74>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <OC5Config+0xb4>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <OC5Config+0x74>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a12      	ldr	r2, [pc, #72]	; (80032f4 <OC5Config+0xb8>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d109      	bne.n	80032c4 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	021b      	lsls	r3, r3, #8
 80032be:	431a      	orrs	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	4619      	mov	r1, r3
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fce9 	bl	8002ca8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40012c00 	.word	0x40012c00
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800

080032f8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003320:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	6812      	ldr	r2, [r2, #0]
 8003328:	0212      	lsls	r2, r2, #8
 800332a:	4313      	orrs	r3, r2
 800332c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	051b      	lsls	r3, r3, #20
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	051b      	lsls	r3, r3, #20
 800334a:	4313      	orrs	r3, r2
 800334c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a14      	ldr	r2, [pc, #80]	; (80033a4 <OC6Config+0xac>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d00b      	beq.n	800336e <OC6Config+0x76>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a13      	ldr	r2, [pc, #76]	; (80033a8 <OC6Config+0xb0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d007      	beq.n	800336e <OC6Config+0x76>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a12      	ldr	r2, [pc, #72]	; (80033ac <OC6Config+0xb4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d003      	beq.n	800336e <OC6Config+0x76>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a11      	ldr	r2, [pc, #68]	; (80033b0 <OC6Config+0xb8>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d109      	bne.n	8003382 <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	699b      	ldr	r3, [r3, #24]
 800337a:	029b      	lsls	r3, r3, #10
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4619      	mov	r1, r3
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff fc9a 	bl	8002cc8 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	68fa      	ldr	r2, [r7, #12]
 8003398:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40014000 	.word	0x40014000
 80033ac:	40014400 	.word	0x40014400
 80033b0:	40014800 	.word	0x40014800

080033b4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033c6:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <LL_InitTick+0x30>)
 80033c8:	3b01      	subs	r3, #1
 80033ca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <LL_InitTick+0x30>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033d2:	4b04      	ldr	r3, [pc, #16]	; (80033e4 <LL_InitTick+0x30>)
 80033d4:	2205      	movs	r2, #5
 80033d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000e010 	.word	0xe000e010

080033e8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80033f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f7ff ffdd 	bl	80033b4 <LL_InitTick>
}
 80033fa:	bf00      	nop
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800340c:	4b0e      	ldr	r3, [pc, #56]	; (8003448 <LL_mDelay+0x44>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003412:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800341a:	d00c      	beq.n	8003436 <LL_mDelay+0x32>
  {
    Delay++;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3301      	adds	r3, #1
 8003420:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8003422:	e008      	b.n	8003436 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <LL_mDelay+0x44>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d002      	beq.n	8003436 <LL_mDelay+0x32>
    {
      Delay--;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	3b01      	subs	r3, #1
 8003434:	607b      	str	r3, [r7, #4]
  while (Delay)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f3      	bne.n	8003424 <LL_mDelay+0x20>
    }
  }
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000e010 	.word	0xe000e010

0800344c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003454:	4a04      	ldr	r2, [pc, #16]	; (8003468 <LL_SetSystemCoreClock+0x1c>)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6013      	str	r3, [r2, #0]
}
 800345a:	bf00      	nop
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000038 	.word	0x20000038

0800346c <__errno>:
 800346c:	4b01      	ldr	r3, [pc, #4]	; (8003474 <__errno+0x8>)
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	2000003c 	.word	0x2000003c

08003478 <__libc_init_array>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	4e0d      	ldr	r6, [pc, #52]	; (80034b0 <__libc_init_array+0x38>)
 800347c:	4c0d      	ldr	r4, [pc, #52]	; (80034b4 <__libc_init_array+0x3c>)
 800347e:	1ba4      	subs	r4, r4, r6
 8003480:	10a4      	asrs	r4, r4, #2
 8003482:	2500      	movs	r5, #0
 8003484:	42a5      	cmp	r5, r4
 8003486:	d109      	bne.n	800349c <__libc_init_array+0x24>
 8003488:	4e0b      	ldr	r6, [pc, #44]	; (80034b8 <__libc_init_array+0x40>)
 800348a:	4c0c      	ldr	r4, [pc, #48]	; (80034bc <__libc_init_array+0x44>)
 800348c:	f001 fd52 	bl	8004f34 <_init>
 8003490:	1ba4      	subs	r4, r4, r6
 8003492:	10a4      	asrs	r4, r4, #2
 8003494:	2500      	movs	r5, #0
 8003496:	42a5      	cmp	r5, r4
 8003498:	d105      	bne.n	80034a6 <__libc_init_array+0x2e>
 800349a:	bd70      	pop	{r4, r5, r6, pc}
 800349c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a0:	4798      	blx	r3
 80034a2:	3501      	adds	r5, #1
 80034a4:	e7ee      	b.n	8003484 <__libc_init_array+0xc>
 80034a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034aa:	4798      	blx	r3
 80034ac:	3501      	adds	r5, #1
 80034ae:	e7f2      	b.n	8003496 <__libc_init_array+0x1e>
 80034b0:	0800520c 	.word	0x0800520c
 80034b4:	0800520c 	.word	0x0800520c
 80034b8:	0800520c 	.word	0x0800520c
 80034bc:	08005210 	.word	0x08005210

080034c0 <__locale_ctype_ptr>:
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <__locale_ctype_ptr+0x14>)
 80034c2:	4a05      	ldr	r2, [pc, #20]	; (80034d8 <__locale_ctype_ptr+0x18>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	bf08      	it	eq
 80034cc:	4613      	moveq	r3, r2
 80034ce:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80034d2:	4770      	bx	lr
 80034d4:	2000003c 	.word	0x2000003c
 80034d8:	200000a0 	.word	0x200000a0

080034dc <__ascii_mbtowc>:
 80034dc:	b082      	sub	sp, #8
 80034de:	b901      	cbnz	r1, 80034e2 <__ascii_mbtowc+0x6>
 80034e0:	a901      	add	r1, sp, #4
 80034e2:	b142      	cbz	r2, 80034f6 <__ascii_mbtowc+0x1a>
 80034e4:	b14b      	cbz	r3, 80034fa <__ascii_mbtowc+0x1e>
 80034e6:	7813      	ldrb	r3, [r2, #0]
 80034e8:	600b      	str	r3, [r1, #0]
 80034ea:	7812      	ldrb	r2, [r2, #0]
 80034ec:	1c10      	adds	r0, r2, #0
 80034ee:	bf18      	it	ne
 80034f0:	2001      	movne	r0, #1
 80034f2:	b002      	add	sp, #8
 80034f4:	4770      	bx	lr
 80034f6:	4610      	mov	r0, r2
 80034f8:	e7fb      	b.n	80034f2 <__ascii_mbtowc+0x16>
 80034fa:	f06f 0001 	mvn.w	r0, #1
 80034fe:	e7f8      	b.n	80034f2 <__ascii_mbtowc+0x16>

08003500 <memset>:
 8003500:	4402      	add	r2, r0
 8003502:	4603      	mov	r3, r0
 8003504:	4293      	cmp	r3, r2
 8003506:	d100      	bne.n	800350a <memset+0xa>
 8003508:	4770      	bx	lr
 800350a:	f803 1b01 	strb.w	r1, [r3], #1
 800350e:	e7f9      	b.n	8003504 <memset+0x4>

08003510 <__cvt>:
 8003510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003514:	ec55 4b10 	vmov	r4, r5, d0
 8003518:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800351a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800351e:	2d00      	cmp	r5, #0
 8003520:	460e      	mov	r6, r1
 8003522:	4691      	mov	r9, r2
 8003524:	4619      	mov	r1, r3
 8003526:	bfb8      	it	lt
 8003528:	4622      	movlt	r2, r4
 800352a:	462b      	mov	r3, r5
 800352c:	f027 0720 	bic.w	r7, r7, #32
 8003530:	bfbb      	ittet	lt
 8003532:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003536:	461d      	movlt	r5, r3
 8003538:	2300      	movge	r3, #0
 800353a:	232d      	movlt	r3, #45	; 0x2d
 800353c:	bfb8      	it	lt
 800353e:	4614      	movlt	r4, r2
 8003540:	2f46      	cmp	r7, #70	; 0x46
 8003542:	700b      	strb	r3, [r1, #0]
 8003544:	d004      	beq.n	8003550 <__cvt+0x40>
 8003546:	2f45      	cmp	r7, #69	; 0x45
 8003548:	d100      	bne.n	800354c <__cvt+0x3c>
 800354a:	3601      	adds	r6, #1
 800354c:	2102      	movs	r1, #2
 800354e:	e000      	b.n	8003552 <__cvt+0x42>
 8003550:	2103      	movs	r1, #3
 8003552:	ab03      	add	r3, sp, #12
 8003554:	9301      	str	r3, [sp, #4]
 8003556:	ab02      	add	r3, sp, #8
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	4632      	mov	r2, r6
 800355c:	4653      	mov	r3, sl
 800355e:	ec45 4b10 	vmov	d0, r4, r5
 8003562:	f000 fbb9 	bl	8003cd8 <_dtoa_r>
 8003566:	2f47      	cmp	r7, #71	; 0x47
 8003568:	4680      	mov	r8, r0
 800356a:	d102      	bne.n	8003572 <__cvt+0x62>
 800356c:	f019 0f01 	tst.w	r9, #1
 8003570:	d026      	beq.n	80035c0 <__cvt+0xb0>
 8003572:	2f46      	cmp	r7, #70	; 0x46
 8003574:	eb08 0906 	add.w	r9, r8, r6
 8003578:	d111      	bne.n	800359e <__cvt+0x8e>
 800357a:	f898 3000 	ldrb.w	r3, [r8]
 800357e:	2b30      	cmp	r3, #48	; 0x30
 8003580:	d10a      	bne.n	8003598 <__cvt+0x88>
 8003582:	2200      	movs	r2, #0
 8003584:	2300      	movs	r3, #0
 8003586:	4620      	mov	r0, r4
 8003588:	4629      	mov	r1, r5
 800358a:	f7fd fa49 	bl	8000a20 <__aeabi_dcmpeq>
 800358e:	b918      	cbnz	r0, 8003598 <__cvt+0x88>
 8003590:	f1c6 0601 	rsb	r6, r6, #1
 8003594:	f8ca 6000 	str.w	r6, [sl]
 8003598:	f8da 3000 	ldr.w	r3, [sl]
 800359c:	4499      	add	r9, r3
 800359e:	2200      	movs	r2, #0
 80035a0:	2300      	movs	r3, #0
 80035a2:	4620      	mov	r0, r4
 80035a4:	4629      	mov	r1, r5
 80035a6:	f7fd fa3b 	bl	8000a20 <__aeabi_dcmpeq>
 80035aa:	b938      	cbnz	r0, 80035bc <__cvt+0xac>
 80035ac:	2230      	movs	r2, #48	; 0x30
 80035ae:	9b03      	ldr	r3, [sp, #12]
 80035b0:	454b      	cmp	r3, r9
 80035b2:	d205      	bcs.n	80035c0 <__cvt+0xb0>
 80035b4:	1c59      	adds	r1, r3, #1
 80035b6:	9103      	str	r1, [sp, #12]
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e7f8      	b.n	80035ae <__cvt+0x9e>
 80035bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80035c0:	9b03      	ldr	r3, [sp, #12]
 80035c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035c4:	eba3 0308 	sub.w	r3, r3, r8
 80035c8:	4640      	mov	r0, r8
 80035ca:	6013      	str	r3, [r2, #0]
 80035cc:	b004      	add	sp, #16
 80035ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080035d2 <__exponent>:
 80035d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035d4:	2900      	cmp	r1, #0
 80035d6:	4604      	mov	r4, r0
 80035d8:	bfba      	itte	lt
 80035da:	4249      	neglt	r1, r1
 80035dc:	232d      	movlt	r3, #45	; 0x2d
 80035de:	232b      	movge	r3, #43	; 0x2b
 80035e0:	2909      	cmp	r1, #9
 80035e2:	f804 2b02 	strb.w	r2, [r4], #2
 80035e6:	7043      	strb	r3, [r0, #1]
 80035e8:	dd20      	ble.n	800362c <__exponent+0x5a>
 80035ea:	f10d 0307 	add.w	r3, sp, #7
 80035ee:	461f      	mov	r7, r3
 80035f0:	260a      	movs	r6, #10
 80035f2:	fb91 f5f6 	sdiv	r5, r1, r6
 80035f6:	fb06 1115 	mls	r1, r6, r5, r1
 80035fa:	3130      	adds	r1, #48	; 0x30
 80035fc:	2d09      	cmp	r5, #9
 80035fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003602:	f103 32ff 	add.w	r2, r3, #4294967295
 8003606:	4629      	mov	r1, r5
 8003608:	dc09      	bgt.n	800361e <__exponent+0x4c>
 800360a:	3130      	adds	r1, #48	; 0x30
 800360c:	3b02      	subs	r3, #2
 800360e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003612:	42bb      	cmp	r3, r7
 8003614:	4622      	mov	r2, r4
 8003616:	d304      	bcc.n	8003622 <__exponent+0x50>
 8003618:	1a10      	subs	r0, r2, r0
 800361a:	b003      	add	sp, #12
 800361c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800361e:	4613      	mov	r3, r2
 8003620:	e7e7      	b.n	80035f2 <__exponent+0x20>
 8003622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003626:	f804 2b01 	strb.w	r2, [r4], #1
 800362a:	e7f2      	b.n	8003612 <__exponent+0x40>
 800362c:	2330      	movs	r3, #48	; 0x30
 800362e:	4419      	add	r1, r3
 8003630:	7083      	strb	r3, [r0, #2]
 8003632:	1d02      	adds	r2, r0, #4
 8003634:	70c1      	strb	r1, [r0, #3]
 8003636:	e7ef      	b.n	8003618 <__exponent+0x46>

08003638 <_printf_float>:
 8003638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800363c:	b08d      	sub	sp, #52	; 0x34
 800363e:	460c      	mov	r4, r1
 8003640:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003644:	4616      	mov	r6, r2
 8003646:	461f      	mov	r7, r3
 8003648:	4605      	mov	r5, r0
 800364a:	f001 f8fd 	bl	8004848 <_localeconv_r>
 800364e:	6803      	ldr	r3, [r0, #0]
 8003650:	9304      	str	r3, [sp, #16]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc fdb8 	bl	80001c8 <strlen>
 8003658:	2300      	movs	r3, #0
 800365a:	930a      	str	r3, [sp, #40]	; 0x28
 800365c:	f8d8 3000 	ldr.w	r3, [r8]
 8003660:	9005      	str	r0, [sp, #20]
 8003662:	3307      	adds	r3, #7
 8003664:	f023 0307 	bic.w	r3, r3, #7
 8003668:	f103 0208 	add.w	r2, r3, #8
 800366c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003670:	f8d4 b000 	ldr.w	fp, [r4]
 8003674:	f8c8 2000 	str.w	r2, [r8]
 8003678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003680:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003684:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003688:	9307      	str	r3, [sp, #28]
 800368a:	f8cd 8018 	str.w	r8, [sp, #24]
 800368e:	f04f 32ff 	mov.w	r2, #4294967295
 8003692:	4ba7      	ldr	r3, [pc, #668]	; (8003930 <_printf_float+0x2f8>)
 8003694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003698:	f7fd f9f4 	bl	8000a84 <__aeabi_dcmpun>
 800369c:	bb70      	cbnz	r0, 80036fc <_printf_float+0xc4>
 800369e:	f04f 32ff 	mov.w	r2, #4294967295
 80036a2:	4ba3      	ldr	r3, [pc, #652]	; (8003930 <_printf_float+0x2f8>)
 80036a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80036a8:	f7fd f9ce 	bl	8000a48 <__aeabi_dcmple>
 80036ac:	bb30      	cbnz	r0, 80036fc <_printf_float+0xc4>
 80036ae:	2200      	movs	r2, #0
 80036b0:	2300      	movs	r3, #0
 80036b2:	4640      	mov	r0, r8
 80036b4:	4649      	mov	r1, r9
 80036b6:	f7fd f9bd 	bl	8000a34 <__aeabi_dcmplt>
 80036ba:	b110      	cbz	r0, 80036c2 <_printf_float+0x8a>
 80036bc:	232d      	movs	r3, #45	; 0x2d
 80036be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80036c2:	4a9c      	ldr	r2, [pc, #624]	; (8003934 <_printf_float+0x2fc>)
 80036c4:	4b9c      	ldr	r3, [pc, #624]	; (8003938 <_printf_float+0x300>)
 80036c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80036ca:	bf8c      	ite	hi
 80036cc:	4690      	movhi	r8, r2
 80036ce:	4698      	movls	r8, r3
 80036d0:	2303      	movs	r3, #3
 80036d2:	f02b 0204 	bic.w	r2, fp, #4
 80036d6:	6123      	str	r3, [r4, #16]
 80036d8:	6022      	str	r2, [r4, #0]
 80036da:	f04f 0900 	mov.w	r9, #0
 80036de:	9700      	str	r7, [sp, #0]
 80036e0:	4633      	mov	r3, r6
 80036e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80036e4:	4621      	mov	r1, r4
 80036e6:	4628      	mov	r0, r5
 80036e8:	f000 f9e6 	bl	8003ab8 <_printf_common>
 80036ec:	3001      	adds	r0, #1
 80036ee:	f040 808d 	bne.w	800380c <_printf_float+0x1d4>
 80036f2:	f04f 30ff 	mov.w	r0, #4294967295
 80036f6:	b00d      	add	sp, #52	; 0x34
 80036f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036fc:	4642      	mov	r2, r8
 80036fe:	464b      	mov	r3, r9
 8003700:	4640      	mov	r0, r8
 8003702:	4649      	mov	r1, r9
 8003704:	f7fd f9be 	bl	8000a84 <__aeabi_dcmpun>
 8003708:	b110      	cbz	r0, 8003710 <_printf_float+0xd8>
 800370a:	4a8c      	ldr	r2, [pc, #560]	; (800393c <_printf_float+0x304>)
 800370c:	4b8c      	ldr	r3, [pc, #560]	; (8003940 <_printf_float+0x308>)
 800370e:	e7da      	b.n	80036c6 <_printf_float+0x8e>
 8003710:	6861      	ldr	r1, [r4, #4]
 8003712:	1c4b      	adds	r3, r1, #1
 8003714:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003718:	a80a      	add	r0, sp, #40	; 0x28
 800371a:	d13e      	bne.n	800379a <_printf_float+0x162>
 800371c:	2306      	movs	r3, #6
 800371e:	6063      	str	r3, [r4, #4]
 8003720:	2300      	movs	r3, #0
 8003722:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003726:	ab09      	add	r3, sp, #36	; 0x24
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	ec49 8b10 	vmov	d0, r8, r9
 800372e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003732:	6022      	str	r2, [r4, #0]
 8003734:	f8cd a004 	str.w	sl, [sp, #4]
 8003738:	6861      	ldr	r1, [r4, #4]
 800373a:	4628      	mov	r0, r5
 800373c:	f7ff fee8 	bl	8003510 <__cvt>
 8003740:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003744:	2b47      	cmp	r3, #71	; 0x47
 8003746:	4680      	mov	r8, r0
 8003748:	d109      	bne.n	800375e <_printf_float+0x126>
 800374a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800374c:	1cd8      	adds	r0, r3, #3
 800374e:	db02      	blt.n	8003756 <_printf_float+0x11e>
 8003750:	6862      	ldr	r2, [r4, #4]
 8003752:	4293      	cmp	r3, r2
 8003754:	dd47      	ble.n	80037e6 <_printf_float+0x1ae>
 8003756:	f1aa 0a02 	sub.w	sl, sl, #2
 800375a:	fa5f fa8a 	uxtb.w	sl, sl
 800375e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003762:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003764:	d824      	bhi.n	80037b0 <_printf_float+0x178>
 8003766:	3901      	subs	r1, #1
 8003768:	4652      	mov	r2, sl
 800376a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800376e:	9109      	str	r1, [sp, #36]	; 0x24
 8003770:	f7ff ff2f 	bl	80035d2 <__exponent>
 8003774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003776:	1813      	adds	r3, r2, r0
 8003778:	2a01      	cmp	r2, #1
 800377a:	4681      	mov	r9, r0
 800377c:	6123      	str	r3, [r4, #16]
 800377e:	dc02      	bgt.n	8003786 <_printf_float+0x14e>
 8003780:	6822      	ldr	r2, [r4, #0]
 8003782:	07d1      	lsls	r1, r2, #31
 8003784:	d501      	bpl.n	800378a <_printf_float+0x152>
 8003786:	3301      	adds	r3, #1
 8003788:	6123      	str	r3, [r4, #16]
 800378a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0a5      	beq.n	80036de <_printf_float+0xa6>
 8003792:	232d      	movs	r3, #45	; 0x2d
 8003794:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003798:	e7a1      	b.n	80036de <_printf_float+0xa6>
 800379a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800379e:	f000 8177 	beq.w	8003a90 <_printf_float+0x458>
 80037a2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80037a6:	d1bb      	bne.n	8003720 <_printf_float+0xe8>
 80037a8:	2900      	cmp	r1, #0
 80037aa:	d1b9      	bne.n	8003720 <_printf_float+0xe8>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e7b6      	b.n	800371e <_printf_float+0xe6>
 80037b0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80037b4:	d119      	bne.n	80037ea <_printf_float+0x1b2>
 80037b6:	2900      	cmp	r1, #0
 80037b8:	6863      	ldr	r3, [r4, #4]
 80037ba:	dd0c      	ble.n	80037d6 <_printf_float+0x19e>
 80037bc:	6121      	str	r1, [r4, #16]
 80037be:	b913      	cbnz	r3, 80037c6 <_printf_float+0x18e>
 80037c0:	6822      	ldr	r2, [r4, #0]
 80037c2:	07d2      	lsls	r2, r2, #31
 80037c4:	d502      	bpl.n	80037cc <_printf_float+0x194>
 80037c6:	3301      	adds	r3, #1
 80037c8:	440b      	add	r3, r1
 80037ca:	6123      	str	r3, [r4, #16]
 80037cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ce:	65a3      	str	r3, [r4, #88]	; 0x58
 80037d0:	f04f 0900 	mov.w	r9, #0
 80037d4:	e7d9      	b.n	800378a <_printf_float+0x152>
 80037d6:	b913      	cbnz	r3, 80037de <_printf_float+0x1a6>
 80037d8:	6822      	ldr	r2, [r4, #0]
 80037da:	07d0      	lsls	r0, r2, #31
 80037dc:	d501      	bpl.n	80037e2 <_printf_float+0x1aa>
 80037de:	3302      	adds	r3, #2
 80037e0:	e7f3      	b.n	80037ca <_printf_float+0x192>
 80037e2:	2301      	movs	r3, #1
 80037e4:	e7f1      	b.n	80037ca <_printf_float+0x192>
 80037e6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80037ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80037ee:	4293      	cmp	r3, r2
 80037f0:	db05      	blt.n	80037fe <_printf_float+0x1c6>
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	6123      	str	r3, [r4, #16]
 80037f6:	07d1      	lsls	r1, r2, #31
 80037f8:	d5e8      	bpl.n	80037cc <_printf_float+0x194>
 80037fa:	3301      	adds	r3, #1
 80037fc:	e7e5      	b.n	80037ca <_printf_float+0x192>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	bfd4      	ite	le
 8003802:	f1c3 0302 	rsble	r3, r3, #2
 8003806:	2301      	movgt	r3, #1
 8003808:	4413      	add	r3, r2
 800380a:	e7de      	b.n	80037ca <_printf_float+0x192>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	055a      	lsls	r2, r3, #21
 8003810:	d407      	bmi.n	8003822 <_printf_float+0x1ea>
 8003812:	6923      	ldr	r3, [r4, #16]
 8003814:	4642      	mov	r2, r8
 8003816:	4631      	mov	r1, r6
 8003818:	4628      	mov	r0, r5
 800381a:	47b8      	blx	r7
 800381c:	3001      	adds	r0, #1
 800381e:	d12b      	bne.n	8003878 <_printf_float+0x240>
 8003820:	e767      	b.n	80036f2 <_printf_float+0xba>
 8003822:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003826:	f240 80dc 	bls.w	80039e2 <_printf_float+0x3aa>
 800382a:	2200      	movs	r2, #0
 800382c:	2300      	movs	r3, #0
 800382e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003832:	f7fd f8f5 	bl	8000a20 <__aeabi_dcmpeq>
 8003836:	2800      	cmp	r0, #0
 8003838:	d033      	beq.n	80038a2 <_printf_float+0x26a>
 800383a:	2301      	movs	r3, #1
 800383c:	4a41      	ldr	r2, [pc, #260]	; (8003944 <_printf_float+0x30c>)
 800383e:	4631      	mov	r1, r6
 8003840:	4628      	mov	r0, r5
 8003842:	47b8      	blx	r7
 8003844:	3001      	adds	r0, #1
 8003846:	f43f af54 	beq.w	80036f2 <_printf_float+0xba>
 800384a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800384e:	429a      	cmp	r2, r3
 8003850:	db02      	blt.n	8003858 <_printf_float+0x220>
 8003852:	6823      	ldr	r3, [r4, #0]
 8003854:	07d8      	lsls	r0, r3, #31
 8003856:	d50f      	bpl.n	8003878 <_printf_float+0x240>
 8003858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800385c:	4631      	mov	r1, r6
 800385e:	4628      	mov	r0, r5
 8003860:	47b8      	blx	r7
 8003862:	3001      	adds	r0, #1
 8003864:	f43f af45 	beq.w	80036f2 <_printf_float+0xba>
 8003868:	f04f 0800 	mov.w	r8, #0
 800386c:	f104 091a 	add.w	r9, r4, #26
 8003870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003872:	3b01      	subs	r3, #1
 8003874:	4543      	cmp	r3, r8
 8003876:	dc09      	bgt.n	800388c <_printf_float+0x254>
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	079b      	lsls	r3, r3, #30
 800387c:	f100 8103 	bmi.w	8003a86 <_printf_float+0x44e>
 8003880:	68e0      	ldr	r0, [r4, #12]
 8003882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003884:	4298      	cmp	r0, r3
 8003886:	bfb8      	it	lt
 8003888:	4618      	movlt	r0, r3
 800388a:	e734      	b.n	80036f6 <_printf_float+0xbe>
 800388c:	2301      	movs	r3, #1
 800388e:	464a      	mov	r2, r9
 8003890:	4631      	mov	r1, r6
 8003892:	4628      	mov	r0, r5
 8003894:	47b8      	blx	r7
 8003896:	3001      	adds	r0, #1
 8003898:	f43f af2b 	beq.w	80036f2 <_printf_float+0xba>
 800389c:	f108 0801 	add.w	r8, r8, #1
 80038a0:	e7e6      	b.n	8003870 <_printf_float+0x238>
 80038a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	dc2b      	bgt.n	8003900 <_printf_float+0x2c8>
 80038a8:	2301      	movs	r3, #1
 80038aa:	4a26      	ldr	r2, [pc, #152]	; (8003944 <_printf_float+0x30c>)
 80038ac:	4631      	mov	r1, r6
 80038ae:	4628      	mov	r0, r5
 80038b0:	47b8      	blx	r7
 80038b2:	3001      	adds	r0, #1
 80038b4:	f43f af1d 	beq.w	80036f2 <_printf_float+0xba>
 80038b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038ba:	b923      	cbnz	r3, 80038c6 <_printf_float+0x28e>
 80038bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038be:	b913      	cbnz	r3, 80038c6 <_printf_float+0x28e>
 80038c0:	6823      	ldr	r3, [r4, #0]
 80038c2:	07d9      	lsls	r1, r3, #31
 80038c4:	d5d8      	bpl.n	8003878 <_printf_float+0x240>
 80038c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80038ca:	4631      	mov	r1, r6
 80038cc:	4628      	mov	r0, r5
 80038ce:	47b8      	blx	r7
 80038d0:	3001      	adds	r0, #1
 80038d2:	f43f af0e 	beq.w	80036f2 <_printf_float+0xba>
 80038d6:	f04f 0900 	mov.w	r9, #0
 80038da:	f104 0a1a 	add.w	sl, r4, #26
 80038de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038e0:	425b      	negs	r3, r3
 80038e2:	454b      	cmp	r3, r9
 80038e4:	dc01      	bgt.n	80038ea <_printf_float+0x2b2>
 80038e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038e8:	e794      	b.n	8003814 <_printf_float+0x1dc>
 80038ea:	2301      	movs	r3, #1
 80038ec:	4652      	mov	r2, sl
 80038ee:	4631      	mov	r1, r6
 80038f0:	4628      	mov	r0, r5
 80038f2:	47b8      	blx	r7
 80038f4:	3001      	adds	r0, #1
 80038f6:	f43f aefc 	beq.w	80036f2 <_printf_float+0xba>
 80038fa:	f109 0901 	add.w	r9, r9, #1
 80038fe:	e7ee      	b.n	80038de <_printf_float+0x2a6>
 8003900:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003902:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003904:	429a      	cmp	r2, r3
 8003906:	bfa8      	it	ge
 8003908:	461a      	movge	r2, r3
 800390a:	2a00      	cmp	r2, #0
 800390c:	4691      	mov	r9, r2
 800390e:	dd07      	ble.n	8003920 <_printf_float+0x2e8>
 8003910:	4613      	mov	r3, r2
 8003912:	4631      	mov	r1, r6
 8003914:	4642      	mov	r2, r8
 8003916:	4628      	mov	r0, r5
 8003918:	47b8      	blx	r7
 800391a:	3001      	adds	r0, #1
 800391c:	f43f aee9 	beq.w	80036f2 <_printf_float+0xba>
 8003920:	f104 031a 	add.w	r3, r4, #26
 8003924:	f04f 0b00 	mov.w	fp, #0
 8003928:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800392c:	9306      	str	r3, [sp, #24]
 800392e:	e015      	b.n	800395c <_printf_float+0x324>
 8003930:	7fefffff 	.word	0x7fefffff
 8003934:	08004fef 	.word	0x08004fef
 8003938:	08004feb 	.word	0x08004feb
 800393c:	08004ff7 	.word	0x08004ff7
 8003940:	08004ff3 	.word	0x08004ff3
 8003944:	08004ffb 	.word	0x08004ffb
 8003948:	2301      	movs	r3, #1
 800394a:	9a06      	ldr	r2, [sp, #24]
 800394c:	4631      	mov	r1, r6
 800394e:	4628      	mov	r0, r5
 8003950:	47b8      	blx	r7
 8003952:	3001      	adds	r0, #1
 8003954:	f43f aecd 	beq.w	80036f2 <_printf_float+0xba>
 8003958:	f10b 0b01 	add.w	fp, fp, #1
 800395c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003960:	ebaa 0309 	sub.w	r3, sl, r9
 8003964:	455b      	cmp	r3, fp
 8003966:	dcef      	bgt.n	8003948 <_printf_float+0x310>
 8003968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800396c:	429a      	cmp	r2, r3
 800396e:	44d0      	add	r8, sl
 8003970:	db15      	blt.n	800399e <_printf_float+0x366>
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	07da      	lsls	r2, r3, #31
 8003976:	d412      	bmi.n	800399e <_printf_float+0x366>
 8003978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800397a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800397c:	eba3 020a 	sub.w	r2, r3, sl
 8003980:	eba3 0a01 	sub.w	sl, r3, r1
 8003984:	4592      	cmp	sl, r2
 8003986:	bfa8      	it	ge
 8003988:	4692      	movge	sl, r2
 800398a:	f1ba 0f00 	cmp.w	sl, #0
 800398e:	dc0e      	bgt.n	80039ae <_printf_float+0x376>
 8003990:	f04f 0800 	mov.w	r8, #0
 8003994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003998:	f104 091a 	add.w	r9, r4, #26
 800399c:	e019      	b.n	80039d2 <_printf_float+0x39a>
 800399e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80039a2:	4631      	mov	r1, r6
 80039a4:	4628      	mov	r0, r5
 80039a6:	47b8      	blx	r7
 80039a8:	3001      	adds	r0, #1
 80039aa:	d1e5      	bne.n	8003978 <_printf_float+0x340>
 80039ac:	e6a1      	b.n	80036f2 <_printf_float+0xba>
 80039ae:	4653      	mov	r3, sl
 80039b0:	4642      	mov	r2, r8
 80039b2:	4631      	mov	r1, r6
 80039b4:	4628      	mov	r0, r5
 80039b6:	47b8      	blx	r7
 80039b8:	3001      	adds	r0, #1
 80039ba:	d1e9      	bne.n	8003990 <_printf_float+0x358>
 80039bc:	e699      	b.n	80036f2 <_printf_float+0xba>
 80039be:	2301      	movs	r3, #1
 80039c0:	464a      	mov	r2, r9
 80039c2:	4631      	mov	r1, r6
 80039c4:	4628      	mov	r0, r5
 80039c6:	47b8      	blx	r7
 80039c8:	3001      	adds	r0, #1
 80039ca:	f43f ae92 	beq.w	80036f2 <_printf_float+0xba>
 80039ce:	f108 0801 	add.w	r8, r8, #1
 80039d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	eba3 030a 	sub.w	r3, r3, sl
 80039dc:	4543      	cmp	r3, r8
 80039de:	dcee      	bgt.n	80039be <_printf_float+0x386>
 80039e0:	e74a      	b.n	8003878 <_printf_float+0x240>
 80039e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80039e4:	2a01      	cmp	r2, #1
 80039e6:	dc01      	bgt.n	80039ec <_printf_float+0x3b4>
 80039e8:	07db      	lsls	r3, r3, #31
 80039ea:	d53a      	bpl.n	8003a62 <_printf_float+0x42a>
 80039ec:	2301      	movs	r3, #1
 80039ee:	4642      	mov	r2, r8
 80039f0:	4631      	mov	r1, r6
 80039f2:	4628      	mov	r0, r5
 80039f4:	47b8      	blx	r7
 80039f6:	3001      	adds	r0, #1
 80039f8:	f43f ae7b 	beq.w	80036f2 <_printf_float+0xba>
 80039fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003a00:	4631      	mov	r1, r6
 8003a02:	4628      	mov	r0, r5
 8003a04:	47b8      	blx	r7
 8003a06:	3001      	adds	r0, #1
 8003a08:	f108 0801 	add.w	r8, r8, #1
 8003a0c:	f43f ae71 	beq.w	80036f2 <_printf_float+0xba>
 8003a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a12:	2200      	movs	r2, #0
 8003a14:	f103 3aff 	add.w	sl, r3, #4294967295
 8003a18:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f7fc ffff 	bl	8000a20 <__aeabi_dcmpeq>
 8003a22:	b9c8      	cbnz	r0, 8003a58 <_printf_float+0x420>
 8003a24:	4653      	mov	r3, sl
 8003a26:	4642      	mov	r2, r8
 8003a28:	4631      	mov	r1, r6
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	47b8      	blx	r7
 8003a2e:	3001      	adds	r0, #1
 8003a30:	d10e      	bne.n	8003a50 <_printf_float+0x418>
 8003a32:	e65e      	b.n	80036f2 <_printf_float+0xba>
 8003a34:	2301      	movs	r3, #1
 8003a36:	4652      	mov	r2, sl
 8003a38:	4631      	mov	r1, r6
 8003a3a:	4628      	mov	r0, r5
 8003a3c:	47b8      	blx	r7
 8003a3e:	3001      	adds	r0, #1
 8003a40:	f43f ae57 	beq.w	80036f2 <_printf_float+0xba>
 8003a44:	f108 0801 	add.w	r8, r8, #1
 8003a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	4543      	cmp	r3, r8
 8003a4e:	dcf1      	bgt.n	8003a34 <_printf_float+0x3fc>
 8003a50:	464b      	mov	r3, r9
 8003a52:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a56:	e6de      	b.n	8003816 <_printf_float+0x1de>
 8003a58:	f04f 0800 	mov.w	r8, #0
 8003a5c:	f104 0a1a 	add.w	sl, r4, #26
 8003a60:	e7f2      	b.n	8003a48 <_printf_float+0x410>
 8003a62:	2301      	movs	r3, #1
 8003a64:	e7df      	b.n	8003a26 <_printf_float+0x3ee>
 8003a66:	2301      	movs	r3, #1
 8003a68:	464a      	mov	r2, r9
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	47b8      	blx	r7
 8003a70:	3001      	adds	r0, #1
 8003a72:	f43f ae3e 	beq.w	80036f2 <_printf_float+0xba>
 8003a76:	f108 0801 	add.w	r8, r8, #1
 8003a7a:	68e3      	ldr	r3, [r4, #12]
 8003a7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	4543      	cmp	r3, r8
 8003a82:	dcf0      	bgt.n	8003a66 <_printf_float+0x42e>
 8003a84:	e6fc      	b.n	8003880 <_printf_float+0x248>
 8003a86:	f04f 0800 	mov.w	r8, #0
 8003a8a:	f104 0919 	add.w	r9, r4, #25
 8003a8e:	e7f4      	b.n	8003a7a <_printf_float+0x442>
 8003a90:	2900      	cmp	r1, #0
 8003a92:	f43f ae8b 	beq.w	80037ac <_printf_float+0x174>
 8003a96:	2300      	movs	r3, #0
 8003a98:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003a9c:	ab09      	add	r3, sp, #36	; 0x24
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	ec49 8b10 	vmov	d0, r8, r9
 8003aa4:	6022      	str	r2, [r4, #0]
 8003aa6:	f8cd a004 	str.w	sl, [sp, #4]
 8003aaa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003aae:	4628      	mov	r0, r5
 8003ab0:	f7ff fd2e 	bl	8003510 <__cvt>
 8003ab4:	4680      	mov	r8, r0
 8003ab6:	e648      	b.n	800374a <_printf_float+0x112>

08003ab8 <_printf_common>:
 8003ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003abc:	4691      	mov	r9, r2
 8003abe:	461f      	mov	r7, r3
 8003ac0:	688a      	ldr	r2, [r1, #8]
 8003ac2:	690b      	ldr	r3, [r1, #16]
 8003ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bfb8      	it	lt
 8003acc:	4613      	movlt	r3, r2
 8003ace:	f8c9 3000 	str.w	r3, [r9]
 8003ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ad6:	4606      	mov	r6, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	b112      	cbz	r2, 8003ae2 <_printf_common+0x2a>
 8003adc:	3301      	adds	r3, #1
 8003ade:	f8c9 3000 	str.w	r3, [r9]
 8003ae2:	6823      	ldr	r3, [r4, #0]
 8003ae4:	0699      	lsls	r1, r3, #26
 8003ae6:	bf42      	ittt	mi
 8003ae8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003aec:	3302      	addmi	r3, #2
 8003aee:	f8c9 3000 	strmi.w	r3, [r9]
 8003af2:	6825      	ldr	r5, [r4, #0]
 8003af4:	f015 0506 	ands.w	r5, r5, #6
 8003af8:	d107      	bne.n	8003b0a <_printf_common+0x52>
 8003afa:	f104 0a19 	add.w	sl, r4, #25
 8003afe:	68e3      	ldr	r3, [r4, #12]
 8003b00:	f8d9 2000 	ldr.w	r2, [r9]
 8003b04:	1a9b      	subs	r3, r3, r2
 8003b06:	42ab      	cmp	r3, r5
 8003b08:	dc28      	bgt.n	8003b5c <_printf_common+0xa4>
 8003b0a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b0e:	6822      	ldr	r2, [r4, #0]
 8003b10:	3300      	adds	r3, #0
 8003b12:	bf18      	it	ne
 8003b14:	2301      	movne	r3, #1
 8003b16:	0692      	lsls	r2, r2, #26
 8003b18:	d42d      	bmi.n	8003b76 <_printf_common+0xbe>
 8003b1a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b1e:	4639      	mov	r1, r7
 8003b20:	4630      	mov	r0, r6
 8003b22:	47c0      	blx	r8
 8003b24:	3001      	adds	r0, #1
 8003b26:	d020      	beq.n	8003b6a <_printf_common+0xb2>
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	68e5      	ldr	r5, [r4, #12]
 8003b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8003b30:	f003 0306 	and.w	r3, r3, #6
 8003b34:	2b04      	cmp	r3, #4
 8003b36:	bf08      	it	eq
 8003b38:	1aad      	subeq	r5, r5, r2
 8003b3a:	68a3      	ldr	r3, [r4, #8]
 8003b3c:	6922      	ldr	r2, [r4, #16]
 8003b3e:	bf0c      	ite	eq
 8003b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b44:	2500      	movne	r5, #0
 8003b46:	4293      	cmp	r3, r2
 8003b48:	bfc4      	itt	gt
 8003b4a:	1a9b      	subgt	r3, r3, r2
 8003b4c:	18ed      	addgt	r5, r5, r3
 8003b4e:	f04f 0900 	mov.w	r9, #0
 8003b52:	341a      	adds	r4, #26
 8003b54:	454d      	cmp	r5, r9
 8003b56:	d11a      	bne.n	8003b8e <_printf_common+0xd6>
 8003b58:	2000      	movs	r0, #0
 8003b5a:	e008      	b.n	8003b6e <_printf_common+0xb6>
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	4652      	mov	r2, sl
 8003b60:	4639      	mov	r1, r7
 8003b62:	4630      	mov	r0, r6
 8003b64:	47c0      	blx	r8
 8003b66:	3001      	adds	r0, #1
 8003b68:	d103      	bne.n	8003b72 <_printf_common+0xba>
 8003b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b72:	3501      	adds	r5, #1
 8003b74:	e7c3      	b.n	8003afe <_printf_common+0x46>
 8003b76:	18e1      	adds	r1, r4, r3
 8003b78:	1c5a      	adds	r2, r3, #1
 8003b7a:	2030      	movs	r0, #48	; 0x30
 8003b7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b80:	4422      	add	r2, r4
 8003b82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b86:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	e7c5      	b.n	8003b1a <_printf_common+0x62>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	4622      	mov	r2, r4
 8003b92:	4639      	mov	r1, r7
 8003b94:	4630      	mov	r0, r6
 8003b96:	47c0      	blx	r8
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d0e6      	beq.n	8003b6a <_printf_common+0xb2>
 8003b9c:	f109 0901 	add.w	r9, r9, #1
 8003ba0:	e7d8      	b.n	8003b54 <_printf_common+0x9c>

08003ba2 <__ascii_wctomb>:
 8003ba2:	b149      	cbz	r1, 8003bb8 <__ascii_wctomb+0x16>
 8003ba4:	2aff      	cmp	r2, #255	; 0xff
 8003ba6:	bf85      	ittet	hi
 8003ba8:	238a      	movhi	r3, #138	; 0x8a
 8003baa:	6003      	strhi	r3, [r0, #0]
 8003bac:	700a      	strbls	r2, [r1, #0]
 8003bae:	f04f 30ff 	movhi.w	r0, #4294967295
 8003bb2:	bf98      	it	ls
 8003bb4:	2001      	movls	r0, #1
 8003bb6:	4770      	bx	lr
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4770      	bx	lr

08003bbc <quorem>:
 8003bbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc0:	6903      	ldr	r3, [r0, #16]
 8003bc2:	690c      	ldr	r4, [r1, #16]
 8003bc4:	42a3      	cmp	r3, r4
 8003bc6:	4680      	mov	r8, r0
 8003bc8:	f2c0 8082 	blt.w	8003cd0 <quorem+0x114>
 8003bcc:	3c01      	subs	r4, #1
 8003bce:	f101 0714 	add.w	r7, r1, #20
 8003bd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8003bd6:	f100 0614 	add.w	r6, r0, #20
 8003bda:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003bde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003be2:	eb06 030c 	add.w	r3, r6, ip
 8003be6:	3501      	adds	r5, #1
 8003be8:	eb07 090c 	add.w	r9, r7, ip
 8003bec:	9301      	str	r3, [sp, #4]
 8003bee:	fbb0 f5f5 	udiv	r5, r0, r5
 8003bf2:	b395      	cbz	r5, 8003c5a <quorem+0x9e>
 8003bf4:	f04f 0a00 	mov.w	sl, #0
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	46b6      	mov	lr, r6
 8003bfc:	46d3      	mov	fp, sl
 8003bfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8003c02:	b293      	uxth	r3, r2
 8003c04:	fb05 a303 	mla	r3, r5, r3, sl
 8003c08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	ebab 0303 	sub.w	r3, fp, r3
 8003c12:	0c12      	lsrs	r2, r2, #16
 8003c14:	f8de b000 	ldr.w	fp, [lr]
 8003c18:	fb05 a202 	mla	r2, r5, r2, sl
 8003c1c:	fa13 f38b 	uxtah	r3, r3, fp
 8003c20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003c24:	fa1f fb82 	uxth.w	fp, r2
 8003c28:	f8de 2000 	ldr.w	r2, [lr]
 8003c2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003c30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c3a:	4581      	cmp	r9, r0
 8003c3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003c40:	f84e 3b04 	str.w	r3, [lr], #4
 8003c44:	d2db      	bcs.n	8003bfe <quorem+0x42>
 8003c46:	f856 300c 	ldr.w	r3, [r6, ip]
 8003c4a:	b933      	cbnz	r3, 8003c5a <quorem+0x9e>
 8003c4c:	9b01      	ldr	r3, [sp, #4]
 8003c4e:	3b04      	subs	r3, #4
 8003c50:	429e      	cmp	r6, r3
 8003c52:	461a      	mov	r2, r3
 8003c54:	d330      	bcc.n	8003cb8 <quorem+0xfc>
 8003c56:	f8c8 4010 	str.w	r4, [r8, #16]
 8003c5a:	4640      	mov	r0, r8
 8003c5c:	f001 f82a 	bl	8004cb4 <__mcmp>
 8003c60:	2800      	cmp	r0, #0
 8003c62:	db25      	blt.n	8003cb0 <quorem+0xf4>
 8003c64:	3501      	adds	r5, #1
 8003c66:	4630      	mov	r0, r6
 8003c68:	f04f 0c00 	mov.w	ip, #0
 8003c6c:	f857 2b04 	ldr.w	r2, [r7], #4
 8003c70:	f8d0 e000 	ldr.w	lr, [r0]
 8003c74:	b293      	uxth	r3, r2
 8003c76:	ebac 0303 	sub.w	r3, ip, r3
 8003c7a:	0c12      	lsrs	r2, r2, #16
 8003c7c:	fa13 f38e 	uxtah	r3, r3, lr
 8003c80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003c84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003c8e:	45b9      	cmp	r9, r7
 8003c90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003c94:	f840 3b04 	str.w	r3, [r0], #4
 8003c98:	d2e8      	bcs.n	8003c6c <quorem+0xb0>
 8003c9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003c9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003ca2:	b92a      	cbnz	r2, 8003cb0 <quorem+0xf4>
 8003ca4:	3b04      	subs	r3, #4
 8003ca6:	429e      	cmp	r6, r3
 8003ca8:	461a      	mov	r2, r3
 8003caa:	d30b      	bcc.n	8003cc4 <quorem+0x108>
 8003cac:	f8c8 4010 	str.w	r4, [r8, #16]
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	b003      	add	sp, #12
 8003cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb8:	6812      	ldr	r2, [r2, #0]
 8003cba:	3b04      	subs	r3, #4
 8003cbc:	2a00      	cmp	r2, #0
 8003cbe:	d1ca      	bne.n	8003c56 <quorem+0x9a>
 8003cc0:	3c01      	subs	r4, #1
 8003cc2:	e7c5      	b.n	8003c50 <quorem+0x94>
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	3b04      	subs	r3, #4
 8003cc8:	2a00      	cmp	r2, #0
 8003cca:	d1ef      	bne.n	8003cac <quorem+0xf0>
 8003ccc:	3c01      	subs	r4, #1
 8003cce:	e7ea      	b.n	8003ca6 <quorem+0xea>
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	e7ee      	b.n	8003cb2 <quorem+0xf6>
 8003cd4:	0000      	movs	r0, r0
	...

08003cd8 <_dtoa_r>:
 8003cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cdc:	ec57 6b10 	vmov	r6, r7, d0
 8003ce0:	b097      	sub	sp, #92	; 0x5c
 8003ce2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003ce4:	9106      	str	r1, [sp, #24]
 8003ce6:	4604      	mov	r4, r0
 8003ce8:	920b      	str	r2, [sp, #44]	; 0x2c
 8003cea:	9312      	str	r3, [sp, #72]	; 0x48
 8003cec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003cf0:	e9cd 6700 	strd	r6, r7, [sp]
 8003cf4:	b93d      	cbnz	r5, 8003d06 <_dtoa_r+0x2e>
 8003cf6:	2010      	movs	r0, #16
 8003cf8:	f000 fdb4 	bl	8004864 <malloc>
 8003cfc:	6260      	str	r0, [r4, #36]	; 0x24
 8003cfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003d02:	6005      	str	r5, [r0, #0]
 8003d04:	60c5      	str	r5, [r0, #12]
 8003d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	b151      	cbz	r1, 8003d22 <_dtoa_r+0x4a>
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	604a      	str	r2, [r1, #4]
 8003d10:	2301      	movs	r3, #1
 8003d12:	4093      	lsls	r3, r2
 8003d14:	608b      	str	r3, [r1, #8]
 8003d16:	4620      	mov	r0, r4
 8003d18:	f000 fdeb 	bl	80048f2 <_Bfree>
 8003d1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	1e3b      	subs	r3, r7, #0
 8003d24:	bfbb      	ittet	lt
 8003d26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003d2a:	9301      	strlt	r3, [sp, #4]
 8003d2c:	2300      	movge	r3, #0
 8003d2e:	2201      	movlt	r2, #1
 8003d30:	bfac      	ite	ge
 8003d32:	f8c8 3000 	strge.w	r3, [r8]
 8003d36:	f8c8 2000 	strlt.w	r2, [r8]
 8003d3a:	4baf      	ldr	r3, [pc, #700]	; (8003ff8 <_dtoa_r+0x320>)
 8003d3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003d40:	ea33 0308 	bics.w	r3, r3, r8
 8003d44:	d114      	bne.n	8003d70 <_dtoa_r+0x98>
 8003d46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d48:	f242 730f 	movw	r3, #9999	; 0x270f
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	9b00      	ldr	r3, [sp, #0]
 8003d50:	b923      	cbnz	r3, 8003d5c <_dtoa_r+0x84>
 8003d52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003d56:	2800      	cmp	r0, #0
 8003d58:	f000 8542 	beq.w	80047e0 <_dtoa_r+0xb08>
 8003d5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800400c <_dtoa_r+0x334>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 8544 	beq.w	80047f0 <_dtoa_r+0xb18>
 8003d68:	f10b 0303 	add.w	r3, fp, #3
 8003d6c:	f000 bd3e 	b.w	80047ec <_dtoa_r+0xb14>
 8003d70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003d74:	2200      	movs	r2, #0
 8003d76:	2300      	movs	r3, #0
 8003d78:	4630      	mov	r0, r6
 8003d7a:	4639      	mov	r1, r7
 8003d7c:	f7fc fe50 	bl	8000a20 <__aeabi_dcmpeq>
 8003d80:	4681      	mov	r9, r0
 8003d82:	b168      	cbz	r0, 8003da0 <_dtoa_r+0xc8>
 8003d84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003d86:	2301      	movs	r3, #1
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 8524 	beq.w	80047da <_dtoa_r+0xb02>
 8003d92:	4b9a      	ldr	r3, [pc, #616]	; (8003ffc <_dtoa_r+0x324>)
 8003d94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003d96:	f103 3bff 	add.w	fp, r3, #4294967295
 8003d9a:	6013      	str	r3, [r2, #0]
 8003d9c:	f000 bd28 	b.w	80047f0 <_dtoa_r+0xb18>
 8003da0:	aa14      	add	r2, sp, #80	; 0x50
 8003da2:	a915      	add	r1, sp, #84	; 0x54
 8003da4:	ec47 6b10 	vmov	d0, r6, r7
 8003da8:	4620      	mov	r0, r4
 8003daa:	f000 fffa 	bl	8004da2 <__d2b>
 8003dae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003db2:	9004      	str	r0, [sp, #16]
 8003db4:	2d00      	cmp	r5, #0
 8003db6:	d07c      	beq.n	8003eb2 <_dtoa_r+0x1da>
 8003db8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003dbc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003dc0:	46b2      	mov	sl, r6
 8003dc2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8003dc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003dca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4b8b      	ldr	r3, [pc, #556]	; (8004000 <_dtoa_r+0x328>)
 8003dd2:	4650      	mov	r0, sl
 8003dd4:	4659      	mov	r1, fp
 8003dd6:	f7fc fa03 	bl	80001e0 <__aeabi_dsub>
 8003dda:	a381      	add	r3, pc, #516	; (adr r3, 8003fe0 <_dtoa_r+0x308>)
 8003ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de0:	f7fc fbb6 	bl	8000550 <__aeabi_dmul>
 8003de4:	a380      	add	r3, pc, #512	; (adr r3, 8003fe8 <_dtoa_r+0x310>)
 8003de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dea:	f7fc f9fb 	bl	80001e4 <__adddf3>
 8003dee:	4606      	mov	r6, r0
 8003df0:	4628      	mov	r0, r5
 8003df2:	460f      	mov	r7, r1
 8003df4:	f7fc fb42 	bl	800047c <__aeabi_i2d>
 8003df8:	a37d      	add	r3, pc, #500	; (adr r3, 8003ff0 <_dtoa_r+0x318>)
 8003dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfe:	f7fc fba7 	bl	8000550 <__aeabi_dmul>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4630      	mov	r0, r6
 8003e08:	4639      	mov	r1, r7
 8003e0a:	f7fc f9eb 	bl	80001e4 <__adddf3>
 8003e0e:	4606      	mov	r6, r0
 8003e10:	460f      	mov	r7, r1
 8003e12:	f7fc fe4d 	bl	8000ab0 <__aeabi_d2iz>
 8003e16:	2200      	movs	r2, #0
 8003e18:	4682      	mov	sl, r0
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	4639      	mov	r1, r7
 8003e20:	f7fc fe08 	bl	8000a34 <__aeabi_dcmplt>
 8003e24:	b148      	cbz	r0, 8003e3a <_dtoa_r+0x162>
 8003e26:	4650      	mov	r0, sl
 8003e28:	f7fc fb28 	bl	800047c <__aeabi_i2d>
 8003e2c:	4632      	mov	r2, r6
 8003e2e:	463b      	mov	r3, r7
 8003e30:	f7fc fdf6 	bl	8000a20 <__aeabi_dcmpeq>
 8003e34:	b908      	cbnz	r0, 8003e3a <_dtoa_r+0x162>
 8003e36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e3a:	f1ba 0f16 	cmp.w	sl, #22
 8003e3e:	d859      	bhi.n	8003ef4 <_dtoa_r+0x21c>
 8003e40:	4970      	ldr	r1, [pc, #448]	; (8004004 <_dtoa_r+0x32c>)
 8003e42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003e46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e4e:	f7fc fe0f 	bl	8000a70 <__aeabi_dcmpgt>
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d050      	beq.n	8003ef8 <_dtoa_r+0x220>
 8003e56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003e5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e60:	1b5d      	subs	r5, r3, r5
 8003e62:	f1b5 0801 	subs.w	r8, r5, #1
 8003e66:	bf49      	itett	mi
 8003e68:	f1c5 0301 	rsbmi	r3, r5, #1
 8003e6c:	2300      	movpl	r3, #0
 8003e6e:	9305      	strmi	r3, [sp, #20]
 8003e70:	f04f 0800 	movmi.w	r8, #0
 8003e74:	bf58      	it	pl
 8003e76:	9305      	strpl	r3, [sp, #20]
 8003e78:	f1ba 0f00 	cmp.w	sl, #0
 8003e7c:	db3e      	blt.n	8003efc <_dtoa_r+0x224>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	44d0      	add	r8, sl
 8003e82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003e86:	9307      	str	r3, [sp, #28]
 8003e88:	9b06      	ldr	r3, [sp, #24]
 8003e8a:	2b09      	cmp	r3, #9
 8003e8c:	f200 8090 	bhi.w	8003fb0 <_dtoa_r+0x2d8>
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	bfc4      	itt	gt
 8003e94:	3b04      	subgt	r3, #4
 8003e96:	9306      	strgt	r3, [sp, #24]
 8003e98:	9b06      	ldr	r3, [sp, #24]
 8003e9a:	f1a3 0302 	sub.w	r3, r3, #2
 8003e9e:	bfcc      	ite	gt
 8003ea0:	2500      	movgt	r5, #0
 8003ea2:	2501      	movle	r5, #1
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	f200 808f 	bhi.w	8003fc8 <_dtoa_r+0x2f0>
 8003eaa:	e8df f003 	tbb	[pc, r3]
 8003eae:	7f7d      	.short	0x7f7d
 8003eb0:	7131      	.short	0x7131
 8003eb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8003eb6:	441d      	add	r5, r3
 8003eb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003ebc:	2820      	cmp	r0, #32
 8003ebe:	dd13      	ble.n	8003ee8 <_dtoa_r+0x210>
 8003ec0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003ec4:	9b00      	ldr	r3, [sp, #0]
 8003ec6:	fa08 f800 	lsl.w	r8, r8, r0
 8003eca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003ece:	fa23 f000 	lsr.w	r0, r3, r0
 8003ed2:	ea48 0000 	orr.w	r0, r8, r0
 8003ed6:	f7fc fac1 	bl	800045c <__aeabi_ui2d>
 8003eda:	2301      	movs	r3, #1
 8003edc:	4682      	mov	sl, r0
 8003ede:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8003ee2:	3d01      	subs	r5, #1
 8003ee4:	9313      	str	r3, [sp, #76]	; 0x4c
 8003ee6:	e772      	b.n	8003dce <_dtoa_r+0xf6>
 8003ee8:	9b00      	ldr	r3, [sp, #0]
 8003eea:	f1c0 0020 	rsb	r0, r0, #32
 8003eee:	fa03 f000 	lsl.w	r0, r3, r0
 8003ef2:	e7f0      	b.n	8003ed6 <_dtoa_r+0x1fe>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e7b1      	b.n	8003e5c <_dtoa_r+0x184>
 8003ef8:	900f      	str	r0, [sp, #60]	; 0x3c
 8003efa:	e7b0      	b.n	8003e5e <_dtoa_r+0x186>
 8003efc:	9b05      	ldr	r3, [sp, #20]
 8003efe:	eba3 030a 	sub.w	r3, r3, sl
 8003f02:	9305      	str	r3, [sp, #20]
 8003f04:	f1ca 0300 	rsb	r3, sl, #0
 8003f08:	9307      	str	r3, [sp, #28]
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	930e      	str	r3, [sp, #56]	; 0x38
 8003f0e:	e7bb      	b.n	8003e88 <_dtoa_r+0x1b0>
 8003f10:	2301      	movs	r3, #1
 8003f12:	930a      	str	r3, [sp, #40]	; 0x28
 8003f14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	dd59      	ble.n	8003fce <_dtoa_r+0x2f6>
 8003f1a:	9302      	str	r3, [sp, #8]
 8003f1c:	4699      	mov	r9, r3
 8003f1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003f20:	2200      	movs	r2, #0
 8003f22:	6072      	str	r2, [r6, #4]
 8003f24:	2204      	movs	r2, #4
 8003f26:	f102 0014 	add.w	r0, r2, #20
 8003f2a:	4298      	cmp	r0, r3
 8003f2c:	6871      	ldr	r1, [r6, #4]
 8003f2e:	d953      	bls.n	8003fd8 <_dtoa_r+0x300>
 8003f30:	4620      	mov	r0, r4
 8003f32:	f000 fcaa 	bl	800488a <_Balloc>
 8003f36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f38:	6030      	str	r0, [r6, #0]
 8003f3a:	f1b9 0f0e 	cmp.w	r9, #14
 8003f3e:	f8d3 b000 	ldr.w	fp, [r3]
 8003f42:	f200 80e6 	bhi.w	8004112 <_dtoa_r+0x43a>
 8003f46:	2d00      	cmp	r5, #0
 8003f48:	f000 80e3 	beq.w	8004112 <_dtoa_r+0x43a>
 8003f4c:	ed9d 7b00 	vldr	d7, [sp]
 8003f50:	f1ba 0f00 	cmp.w	sl, #0
 8003f54:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003f58:	dd74      	ble.n	8004044 <_dtoa_r+0x36c>
 8003f5a:	4a2a      	ldr	r2, [pc, #168]	; (8004004 <_dtoa_r+0x32c>)
 8003f5c:	f00a 030f 	and.w	r3, sl, #15
 8003f60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003f64:	ed93 7b00 	vldr	d7, [r3]
 8003f68:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003f6c:	06f0      	lsls	r0, r6, #27
 8003f6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003f72:	d565      	bpl.n	8004040 <_dtoa_r+0x368>
 8003f74:	4b24      	ldr	r3, [pc, #144]	; (8004008 <_dtoa_r+0x330>)
 8003f76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f7e:	f7fc fc11 	bl	80007a4 <__aeabi_ddiv>
 8003f82:	e9cd 0100 	strd	r0, r1, [sp]
 8003f86:	f006 060f 	and.w	r6, r6, #15
 8003f8a:	2503      	movs	r5, #3
 8003f8c:	4f1e      	ldr	r7, [pc, #120]	; (8004008 <_dtoa_r+0x330>)
 8003f8e:	e04c      	b.n	800402a <_dtoa_r+0x352>
 8003f90:	2301      	movs	r3, #1
 8003f92:	930a      	str	r3, [sp, #40]	; 0x28
 8003f94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f96:	4453      	add	r3, sl
 8003f98:	f103 0901 	add.w	r9, r3, #1
 8003f9c:	9302      	str	r3, [sp, #8]
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	bfb8      	it	lt
 8003fa4:	2301      	movlt	r3, #1
 8003fa6:	e7ba      	b.n	8003f1e <_dtoa_r+0x246>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e7b2      	b.n	8003f12 <_dtoa_r+0x23a>
 8003fac:	2300      	movs	r3, #0
 8003fae:	e7f0      	b.n	8003f92 <_dtoa_r+0x2ba>
 8003fb0:	2501      	movs	r5, #1
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	9306      	str	r3, [sp, #24]
 8003fb6:	950a      	str	r5, [sp, #40]	; 0x28
 8003fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fbc:	9302      	str	r3, [sp, #8]
 8003fbe:	4699      	mov	r9, r3
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2312      	movs	r3, #18
 8003fc4:	920b      	str	r2, [sp, #44]	; 0x2c
 8003fc6:	e7aa      	b.n	8003f1e <_dtoa_r+0x246>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	930a      	str	r3, [sp, #40]	; 0x28
 8003fcc:	e7f4      	b.n	8003fb8 <_dtoa_r+0x2e0>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	9302      	str	r3, [sp, #8]
 8003fd2:	4699      	mov	r9, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	e7f5      	b.n	8003fc4 <_dtoa_r+0x2ec>
 8003fd8:	3101      	adds	r1, #1
 8003fda:	6071      	str	r1, [r6, #4]
 8003fdc:	0052      	lsls	r2, r2, #1
 8003fde:	e7a2      	b.n	8003f26 <_dtoa_r+0x24e>
 8003fe0:	636f4361 	.word	0x636f4361
 8003fe4:	3fd287a7 	.word	0x3fd287a7
 8003fe8:	8b60c8b3 	.word	0x8b60c8b3
 8003fec:	3fc68a28 	.word	0x3fc68a28
 8003ff0:	509f79fb 	.word	0x509f79fb
 8003ff4:	3fd34413 	.word	0x3fd34413
 8003ff8:	7ff00000 	.word	0x7ff00000
 8003ffc:	08004ffc 	.word	0x08004ffc
 8004000:	3ff80000 	.word	0x3ff80000
 8004004:	08005138 	.word	0x08005138
 8004008:	08005110 	.word	0x08005110
 800400c:	08005107 	.word	0x08005107
 8004010:	07f1      	lsls	r1, r6, #31
 8004012:	d508      	bpl.n	8004026 <_dtoa_r+0x34e>
 8004014:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800401c:	f7fc fa98 	bl	8000550 <__aeabi_dmul>
 8004020:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004024:	3501      	adds	r5, #1
 8004026:	1076      	asrs	r6, r6, #1
 8004028:	3708      	adds	r7, #8
 800402a:	2e00      	cmp	r6, #0
 800402c:	d1f0      	bne.n	8004010 <_dtoa_r+0x338>
 800402e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004036:	f7fc fbb5 	bl	80007a4 <__aeabi_ddiv>
 800403a:	e9cd 0100 	strd	r0, r1, [sp]
 800403e:	e01a      	b.n	8004076 <_dtoa_r+0x39e>
 8004040:	2502      	movs	r5, #2
 8004042:	e7a3      	b.n	8003f8c <_dtoa_r+0x2b4>
 8004044:	f000 80a0 	beq.w	8004188 <_dtoa_r+0x4b0>
 8004048:	f1ca 0600 	rsb	r6, sl, #0
 800404c:	4b9f      	ldr	r3, [pc, #636]	; (80042cc <_dtoa_r+0x5f4>)
 800404e:	4fa0      	ldr	r7, [pc, #640]	; (80042d0 <_dtoa_r+0x5f8>)
 8004050:	f006 020f 	and.w	r2, r6, #15
 8004054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004060:	f7fc fa76 	bl	8000550 <__aeabi_dmul>
 8004064:	e9cd 0100 	strd	r0, r1, [sp]
 8004068:	1136      	asrs	r6, r6, #4
 800406a:	2300      	movs	r3, #0
 800406c:	2502      	movs	r5, #2
 800406e:	2e00      	cmp	r6, #0
 8004070:	d17f      	bne.n	8004172 <_dtoa_r+0x49a>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e1      	bne.n	800403a <_dtoa_r+0x362>
 8004076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8087 	beq.w	800418c <_dtoa_r+0x4b4>
 800407e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004082:	2200      	movs	r2, #0
 8004084:	4b93      	ldr	r3, [pc, #588]	; (80042d4 <_dtoa_r+0x5fc>)
 8004086:	4630      	mov	r0, r6
 8004088:	4639      	mov	r1, r7
 800408a:	f7fc fcd3 	bl	8000a34 <__aeabi_dcmplt>
 800408e:	2800      	cmp	r0, #0
 8004090:	d07c      	beq.n	800418c <_dtoa_r+0x4b4>
 8004092:	f1b9 0f00 	cmp.w	r9, #0
 8004096:	d079      	beq.n	800418c <_dtoa_r+0x4b4>
 8004098:	9b02      	ldr	r3, [sp, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	dd35      	ble.n	800410a <_dtoa_r+0x432>
 800409e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80040a2:	9308      	str	r3, [sp, #32]
 80040a4:	4639      	mov	r1, r7
 80040a6:	2200      	movs	r2, #0
 80040a8:	4b8b      	ldr	r3, [pc, #556]	; (80042d8 <_dtoa_r+0x600>)
 80040aa:	4630      	mov	r0, r6
 80040ac:	f7fc fa50 	bl	8000550 <__aeabi_dmul>
 80040b0:	e9cd 0100 	strd	r0, r1, [sp]
 80040b4:	9f02      	ldr	r7, [sp, #8]
 80040b6:	3501      	adds	r5, #1
 80040b8:	4628      	mov	r0, r5
 80040ba:	f7fc f9df 	bl	800047c <__aeabi_i2d>
 80040be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80040c2:	f7fc fa45 	bl	8000550 <__aeabi_dmul>
 80040c6:	2200      	movs	r2, #0
 80040c8:	4b84      	ldr	r3, [pc, #528]	; (80042dc <_dtoa_r+0x604>)
 80040ca:	f7fc f88b 	bl	80001e4 <__adddf3>
 80040ce:	4605      	mov	r5, r0
 80040d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80040d4:	2f00      	cmp	r7, #0
 80040d6:	d15d      	bne.n	8004194 <_dtoa_r+0x4bc>
 80040d8:	2200      	movs	r2, #0
 80040da:	4b81      	ldr	r3, [pc, #516]	; (80042e0 <_dtoa_r+0x608>)
 80040dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80040e0:	f7fc f87e 	bl	80001e0 <__aeabi_dsub>
 80040e4:	462a      	mov	r2, r5
 80040e6:	4633      	mov	r3, r6
 80040e8:	e9cd 0100 	strd	r0, r1, [sp]
 80040ec:	f7fc fcc0 	bl	8000a70 <__aeabi_dcmpgt>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	f040 8288 	bne.w	8004606 <_dtoa_r+0x92e>
 80040f6:	462a      	mov	r2, r5
 80040f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80040fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004100:	f7fc fc98 	bl	8000a34 <__aeabi_dcmplt>
 8004104:	2800      	cmp	r0, #0
 8004106:	f040 827c 	bne.w	8004602 <_dtoa_r+0x92a>
 800410a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800410e:	e9cd 2300 	strd	r2, r3, [sp]
 8004112:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004114:	2b00      	cmp	r3, #0
 8004116:	f2c0 8150 	blt.w	80043ba <_dtoa_r+0x6e2>
 800411a:	f1ba 0f0e 	cmp.w	sl, #14
 800411e:	f300 814c 	bgt.w	80043ba <_dtoa_r+0x6e2>
 8004122:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <_dtoa_r+0x5f4>)
 8004124:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004128:	ed93 7b00 	vldr	d7, [r3]
 800412c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800412e:	2b00      	cmp	r3, #0
 8004130:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004134:	f280 80d8 	bge.w	80042e8 <_dtoa_r+0x610>
 8004138:	f1b9 0f00 	cmp.w	r9, #0
 800413c:	f300 80d4 	bgt.w	80042e8 <_dtoa_r+0x610>
 8004140:	f040 825e 	bne.w	8004600 <_dtoa_r+0x928>
 8004144:	2200      	movs	r2, #0
 8004146:	4b66      	ldr	r3, [pc, #408]	; (80042e0 <_dtoa_r+0x608>)
 8004148:	ec51 0b17 	vmov	r0, r1, d7
 800414c:	f7fc fa00 	bl	8000550 <__aeabi_dmul>
 8004150:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004154:	f7fc fc82 	bl	8000a5c <__aeabi_dcmpge>
 8004158:	464f      	mov	r7, r9
 800415a:	464e      	mov	r6, r9
 800415c:	2800      	cmp	r0, #0
 800415e:	f040 8234 	bne.w	80045ca <_dtoa_r+0x8f2>
 8004162:	2331      	movs	r3, #49	; 0x31
 8004164:	f10b 0501 	add.w	r5, fp, #1
 8004168:	f88b 3000 	strb.w	r3, [fp]
 800416c:	f10a 0a01 	add.w	sl, sl, #1
 8004170:	e22f      	b.n	80045d2 <_dtoa_r+0x8fa>
 8004172:	07f2      	lsls	r2, r6, #31
 8004174:	d505      	bpl.n	8004182 <_dtoa_r+0x4aa>
 8004176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800417a:	f7fc f9e9 	bl	8000550 <__aeabi_dmul>
 800417e:	3501      	adds	r5, #1
 8004180:	2301      	movs	r3, #1
 8004182:	1076      	asrs	r6, r6, #1
 8004184:	3708      	adds	r7, #8
 8004186:	e772      	b.n	800406e <_dtoa_r+0x396>
 8004188:	2502      	movs	r5, #2
 800418a:	e774      	b.n	8004076 <_dtoa_r+0x39e>
 800418c:	f8cd a020 	str.w	sl, [sp, #32]
 8004190:	464f      	mov	r7, r9
 8004192:	e791      	b.n	80040b8 <_dtoa_r+0x3e0>
 8004194:	4b4d      	ldr	r3, [pc, #308]	; (80042cc <_dtoa_r+0x5f4>)
 8004196:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800419a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800419e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d047      	beq.n	8004234 <_dtoa_r+0x55c>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	2000      	movs	r0, #0
 80041aa:	494e      	ldr	r1, [pc, #312]	; (80042e4 <_dtoa_r+0x60c>)
 80041ac:	f7fc fafa 	bl	80007a4 <__aeabi_ddiv>
 80041b0:	462a      	mov	r2, r5
 80041b2:	4633      	mov	r3, r6
 80041b4:	f7fc f814 	bl	80001e0 <__aeabi_dsub>
 80041b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80041bc:	465d      	mov	r5, fp
 80041be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041c2:	f7fc fc75 	bl	8000ab0 <__aeabi_d2iz>
 80041c6:	4606      	mov	r6, r0
 80041c8:	f7fc f958 	bl	800047c <__aeabi_i2d>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80041d4:	f7fc f804 	bl	80001e0 <__aeabi_dsub>
 80041d8:	3630      	adds	r6, #48	; 0x30
 80041da:	f805 6b01 	strb.w	r6, [r5], #1
 80041de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80041e2:	e9cd 0100 	strd	r0, r1, [sp]
 80041e6:	f7fc fc25 	bl	8000a34 <__aeabi_dcmplt>
 80041ea:	2800      	cmp	r0, #0
 80041ec:	d163      	bne.n	80042b6 <_dtoa_r+0x5de>
 80041ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80041f2:	2000      	movs	r0, #0
 80041f4:	4937      	ldr	r1, [pc, #220]	; (80042d4 <_dtoa_r+0x5fc>)
 80041f6:	f7fb fff3 	bl	80001e0 <__aeabi_dsub>
 80041fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80041fe:	f7fc fc19 	bl	8000a34 <__aeabi_dcmplt>
 8004202:	2800      	cmp	r0, #0
 8004204:	f040 80b7 	bne.w	8004376 <_dtoa_r+0x69e>
 8004208:	eba5 030b 	sub.w	r3, r5, fp
 800420c:	429f      	cmp	r7, r3
 800420e:	f77f af7c 	ble.w	800410a <_dtoa_r+0x432>
 8004212:	2200      	movs	r2, #0
 8004214:	4b30      	ldr	r3, [pc, #192]	; (80042d8 <_dtoa_r+0x600>)
 8004216:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800421a:	f7fc f999 	bl	8000550 <__aeabi_dmul>
 800421e:	2200      	movs	r2, #0
 8004220:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004224:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <_dtoa_r+0x600>)
 8004226:	e9dd 0100 	ldrd	r0, r1, [sp]
 800422a:	f7fc f991 	bl	8000550 <__aeabi_dmul>
 800422e:	e9cd 0100 	strd	r0, r1, [sp]
 8004232:	e7c4      	b.n	80041be <_dtoa_r+0x4e6>
 8004234:	462a      	mov	r2, r5
 8004236:	4633      	mov	r3, r6
 8004238:	f7fc f98a 	bl	8000550 <__aeabi_dmul>
 800423c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004240:	eb0b 0507 	add.w	r5, fp, r7
 8004244:	465e      	mov	r6, fp
 8004246:	e9dd 0100 	ldrd	r0, r1, [sp]
 800424a:	f7fc fc31 	bl	8000ab0 <__aeabi_d2iz>
 800424e:	4607      	mov	r7, r0
 8004250:	f7fc f914 	bl	800047c <__aeabi_i2d>
 8004254:	3730      	adds	r7, #48	; 0x30
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800425e:	f7fb ffbf 	bl	80001e0 <__aeabi_dsub>
 8004262:	f806 7b01 	strb.w	r7, [r6], #1
 8004266:	42ae      	cmp	r6, r5
 8004268:	e9cd 0100 	strd	r0, r1, [sp]
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	d126      	bne.n	80042c0 <_dtoa_r+0x5e8>
 8004272:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <_dtoa_r+0x60c>)
 8004274:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004278:	f7fb ffb4 	bl	80001e4 <__adddf3>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004284:	f7fc fbf4 	bl	8000a70 <__aeabi_dcmpgt>
 8004288:	2800      	cmp	r0, #0
 800428a:	d174      	bne.n	8004376 <_dtoa_r+0x69e>
 800428c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004290:	2000      	movs	r0, #0
 8004292:	4914      	ldr	r1, [pc, #80]	; (80042e4 <_dtoa_r+0x60c>)
 8004294:	f7fb ffa4 	bl	80001e0 <__aeabi_dsub>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80042a0:	f7fc fbc8 	bl	8000a34 <__aeabi_dcmplt>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	f43f af30 	beq.w	800410a <_dtoa_r+0x432>
 80042aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80042ae:	2b30      	cmp	r3, #48	; 0x30
 80042b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80042b4:	d002      	beq.n	80042bc <_dtoa_r+0x5e4>
 80042b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80042ba:	e04a      	b.n	8004352 <_dtoa_r+0x67a>
 80042bc:	4615      	mov	r5, r2
 80042be:	e7f4      	b.n	80042aa <_dtoa_r+0x5d2>
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <_dtoa_r+0x600>)
 80042c2:	f7fc f945 	bl	8000550 <__aeabi_dmul>
 80042c6:	e9cd 0100 	strd	r0, r1, [sp]
 80042ca:	e7bc      	b.n	8004246 <_dtoa_r+0x56e>
 80042cc:	08005138 	.word	0x08005138
 80042d0:	08005110 	.word	0x08005110
 80042d4:	3ff00000 	.word	0x3ff00000
 80042d8:	40240000 	.word	0x40240000
 80042dc:	401c0000 	.word	0x401c0000
 80042e0:	40140000 	.word	0x40140000
 80042e4:	3fe00000 	.word	0x3fe00000
 80042e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80042ec:	465d      	mov	r5, fp
 80042ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042f2:	4630      	mov	r0, r6
 80042f4:	4639      	mov	r1, r7
 80042f6:	f7fc fa55 	bl	80007a4 <__aeabi_ddiv>
 80042fa:	f7fc fbd9 	bl	8000ab0 <__aeabi_d2iz>
 80042fe:	4680      	mov	r8, r0
 8004300:	f7fc f8bc 	bl	800047c <__aeabi_i2d>
 8004304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004308:	f7fc f922 	bl	8000550 <__aeabi_dmul>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4630      	mov	r0, r6
 8004312:	4639      	mov	r1, r7
 8004314:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004318:	f7fb ff62 	bl	80001e0 <__aeabi_dsub>
 800431c:	f805 6b01 	strb.w	r6, [r5], #1
 8004320:	eba5 060b 	sub.w	r6, r5, fp
 8004324:	45b1      	cmp	r9, r6
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	d139      	bne.n	80043a0 <_dtoa_r+0x6c8>
 800432c:	f7fb ff5a 	bl	80001e4 <__adddf3>
 8004330:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004334:	4606      	mov	r6, r0
 8004336:	460f      	mov	r7, r1
 8004338:	f7fc fb9a 	bl	8000a70 <__aeabi_dcmpgt>
 800433c:	b9c8      	cbnz	r0, 8004372 <_dtoa_r+0x69a>
 800433e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004342:	4630      	mov	r0, r6
 8004344:	4639      	mov	r1, r7
 8004346:	f7fc fb6b 	bl	8000a20 <__aeabi_dcmpeq>
 800434a:	b110      	cbz	r0, 8004352 <_dtoa_r+0x67a>
 800434c:	f018 0f01 	tst.w	r8, #1
 8004350:	d10f      	bne.n	8004372 <_dtoa_r+0x69a>
 8004352:	9904      	ldr	r1, [sp, #16]
 8004354:	4620      	mov	r0, r4
 8004356:	f000 facc 	bl	80048f2 <_Bfree>
 800435a:	2300      	movs	r3, #0
 800435c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800435e:	702b      	strb	r3, [r5, #0]
 8004360:	f10a 0301 	add.w	r3, sl, #1
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8241 	beq.w	80047f0 <_dtoa_r+0xb18>
 800436e:	601d      	str	r5, [r3, #0]
 8004370:	e23e      	b.n	80047f0 <_dtoa_r+0xb18>
 8004372:	f8cd a020 	str.w	sl, [sp, #32]
 8004376:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800437a:	2a39      	cmp	r2, #57	; 0x39
 800437c:	f105 33ff 	add.w	r3, r5, #4294967295
 8004380:	d108      	bne.n	8004394 <_dtoa_r+0x6bc>
 8004382:	459b      	cmp	fp, r3
 8004384:	d10a      	bne.n	800439c <_dtoa_r+0x6c4>
 8004386:	9b08      	ldr	r3, [sp, #32]
 8004388:	3301      	adds	r3, #1
 800438a:	9308      	str	r3, [sp, #32]
 800438c:	2330      	movs	r3, #48	; 0x30
 800438e:	f88b 3000 	strb.w	r3, [fp]
 8004392:	465b      	mov	r3, fp
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	3201      	adds	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	e78c      	b.n	80042b6 <_dtoa_r+0x5de>
 800439c:	461d      	mov	r5, r3
 800439e:	e7ea      	b.n	8004376 <_dtoa_r+0x69e>
 80043a0:	2200      	movs	r2, #0
 80043a2:	4b9b      	ldr	r3, [pc, #620]	; (8004610 <_dtoa_r+0x938>)
 80043a4:	f7fc f8d4 	bl	8000550 <__aeabi_dmul>
 80043a8:	2200      	movs	r2, #0
 80043aa:	2300      	movs	r3, #0
 80043ac:	4606      	mov	r6, r0
 80043ae:	460f      	mov	r7, r1
 80043b0:	f7fc fb36 	bl	8000a20 <__aeabi_dcmpeq>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d09a      	beq.n	80042ee <_dtoa_r+0x616>
 80043b8:	e7cb      	b.n	8004352 <_dtoa_r+0x67a>
 80043ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043bc:	2a00      	cmp	r2, #0
 80043be:	f000 808b 	beq.w	80044d8 <_dtoa_r+0x800>
 80043c2:	9a06      	ldr	r2, [sp, #24]
 80043c4:	2a01      	cmp	r2, #1
 80043c6:	dc6e      	bgt.n	80044a6 <_dtoa_r+0x7ce>
 80043c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80043ca:	2a00      	cmp	r2, #0
 80043cc:	d067      	beq.n	800449e <_dtoa_r+0x7c6>
 80043ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80043d2:	9f07      	ldr	r7, [sp, #28]
 80043d4:	9d05      	ldr	r5, [sp, #20]
 80043d6:	9a05      	ldr	r2, [sp, #20]
 80043d8:	2101      	movs	r1, #1
 80043da:	441a      	add	r2, r3
 80043dc:	4620      	mov	r0, r4
 80043de:	9205      	str	r2, [sp, #20]
 80043e0:	4498      	add	r8, r3
 80043e2:	f000 fb26 	bl	8004a32 <__i2b>
 80043e6:	4606      	mov	r6, r0
 80043e8:	2d00      	cmp	r5, #0
 80043ea:	dd0c      	ble.n	8004406 <_dtoa_r+0x72e>
 80043ec:	f1b8 0f00 	cmp.w	r8, #0
 80043f0:	dd09      	ble.n	8004406 <_dtoa_r+0x72e>
 80043f2:	4545      	cmp	r5, r8
 80043f4:	9a05      	ldr	r2, [sp, #20]
 80043f6:	462b      	mov	r3, r5
 80043f8:	bfa8      	it	ge
 80043fa:	4643      	movge	r3, r8
 80043fc:	1ad2      	subs	r2, r2, r3
 80043fe:	9205      	str	r2, [sp, #20]
 8004400:	1aed      	subs	r5, r5, r3
 8004402:	eba8 0803 	sub.w	r8, r8, r3
 8004406:	9b07      	ldr	r3, [sp, #28]
 8004408:	b1eb      	cbz	r3, 8004446 <_dtoa_r+0x76e>
 800440a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800440c:	2b00      	cmp	r3, #0
 800440e:	d067      	beq.n	80044e0 <_dtoa_r+0x808>
 8004410:	b18f      	cbz	r7, 8004436 <_dtoa_r+0x75e>
 8004412:	4631      	mov	r1, r6
 8004414:	463a      	mov	r2, r7
 8004416:	4620      	mov	r0, r4
 8004418:	f000 fbaa 	bl	8004b70 <__pow5mult>
 800441c:	9a04      	ldr	r2, [sp, #16]
 800441e:	4601      	mov	r1, r0
 8004420:	4606      	mov	r6, r0
 8004422:	4620      	mov	r0, r4
 8004424:	f000 fb0e 	bl	8004a44 <__multiply>
 8004428:	9904      	ldr	r1, [sp, #16]
 800442a:	9008      	str	r0, [sp, #32]
 800442c:	4620      	mov	r0, r4
 800442e:	f000 fa60 	bl	80048f2 <_Bfree>
 8004432:	9b08      	ldr	r3, [sp, #32]
 8004434:	9304      	str	r3, [sp, #16]
 8004436:	9b07      	ldr	r3, [sp, #28]
 8004438:	1bda      	subs	r2, r3, r7
 800443a:	d004      	beq.n	8004446 <_dtoa_r+0x76e>
 800443c:	9904      	ldr	r1, [sp, #16]
 800443e:	4620      	mov	r0, r4
 8004440:	f000 fb96 	bl	8004b70 <__pow5mult>
 8004444:	9004      	str	r0, [sp, #16]
 8004446:	2101      	movs	r1, #1
 8004448:	4620      	mov	r0, r4
 800444a:	f000 faf2 	bl	8004a32 <__i2b>
 800444e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004450:	4607      	mov	r7, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	f000 81d0 	beq.w	80047f8 <_dtoa_r+0xb20>
 8004458:	461a      	mov	r2, r3
 800445a:	4601      	mov	r1, r0
 800445c:	4620      	mov	r0, r4
 800445e:	f000 fb87 	bl	8004b70 <__pow5mult>
 8004462:	9b06      	ldr	r3, [sp, #24]
 8004464:	2b01      	cmp	r3, #1
 8004466:	4607      	mov	r7, r0
 8004468:	dc40      	bgt.n	80044ec <_dtoa_r+0x814>
 800446a:	9b00      	ldr	r3, [sp, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d139      	bne.n	80044e4 <_dtoa_r+0x80c>
 8004470:	9b01      	ldr	r3, [sp, #4]
 8004472:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004476:	2b00      	cmp	r3, #0
 8004478:	d136      	bne.n	80044e8 <_dtoa_r+0x810>
 800447a:	9b01      	ldr	r3, [sp, #4]
 800447c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004480:	0d1b      	lsrs	r3, r3, #20
 8004482:	051b      	lsls	r3, r3, #20
 8004484:	b12b      	cbz	r3, 8004492 <_dtoa_r+0x7ba>
 8004486:	9b05      	ldr	r3, [sp, #20]
 8004488:	3301      	adds	r3, #1
 800448a:	9305      	str	r3, [sp, #20]
 800448c:	f108 0801 	add.w	r8, r8, #1
 8004490:	2301      	movs	r3, #1
 8004492:	9307      	str	r3, [sp, #28]
 8004494:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004496:	2b00      	cmp	r3, #0
 8004498:	d12a      	bne.n	80044f0 <_dtoa_r+0x818>
 800449a:	2001      	movs	r0, #1
 800449c:	e030      	b.n	8004500 <_dtoa_r+0x828>
 800449e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80044a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80044a4:	e795      	b.n	80043d2 <_dtoa_r+0x6fa>
 80044a6:	9b07      	ldr	r3, [sp, #28]
 80044a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80044ac:	42bb      	cmp	r3, r7
 80044ae:	bfbf      	itttt	lt
 80044b0:	9b07      	ldrlt	r3, [sp, #28]
 80044b2:	9707      	strlt	r7, [sp, #28]
 80044b4:	1afa      	sublt	r2, r7, r3
 80044b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80044b8:	bfbb      	ittet	lt
 80044ba:	189b      	addlt	r3, r3, r2
 80044bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80044be:	1bdf      	subge	r7, r3, r7
 80044c0:	2700      	movlt	r7, #0
 80044c2:	f1b9 0f00 	cmp.w	r9, #0
 80044c6:	bfb5      	itete	lt
 80044c8:	9b05      	ldrlt	r3, [sp, #20]
 80044ca:	9d05      	ldrge	r5, [sp, #20]
 80044cc:	eba3 0509 	sublt.w	r5, r3, r9
 80044d0:	464b      	movge	r3, r9
 80044d2:	bfb8      	it	lt
 80044d4:	2300      	movlt	r3, #0
 80044d6:	e77e      	b.n	80043d6 <_dtoa_r+0x6fe>
 80044d8:	9f07      	ldr	r7, [sp, #28]
 80044da:	9d05      	ldr	r5, [sp, #20]
 80044dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80044de:	e783      	b.n	80043e8 <_dtoa_r+0x710>
 80044e0:	9a07      	ldr	r2, [sp, #28]
 80044e2:	e7ab      	b.n	800443c <_dtoa_r+0x764>
 80044e4:	2300      	movs	r3, #0
 80044e6:	e7d4      	b.n	8004492 <_dtoa_r+0x7ba>
 80044e8:	9b00      	ldr	r3, [sp, #0]
 80044ea:	e7d2      	b.n	8004492 <_dtoa_r+0x7ba>
 80044ec:	2300      	movs	r3, #0
 80044ee:	9307      	str	r3, [sp, #28]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80044f6:	6918      	ldr	r0, [r3, #16]
 80044f8:	f000 fa4d 	bl	8004996 <__hi0bits>
 80044fc:	f1c0 0020 	rsb	r0, r0, #32
 8004500:	4440      	add	r0, r8
 8004502:	f010 001f 	ands.w	r0, r0, #31
 8004506:	d047      	beq.n	8004598 <_dtoa_r+0x8c0>
 8004508:	f1c0 0320 	rsb	r3, r0, #32
 800450c:	2b04      	cmp	r3, #4
 800450e:	dd3b      	ble.n	8004588 <_dtoa_r+0x8b0>
 8004510:	9b05      	ldr	r3, [sp, #20]
 8004512:	f1c0 001c 	rsb	r0, r0, #28
 8004516:	4403      	add	r3, r0
 8004518:	9305      	str	r3, [sp, #20]
 800451a:	4405      	add	r5, r0
 800451c:	4480      	add	r8, r0
 800451e:	9b05      	ldr	r3, [sp, #20]
 8004520:	2b00      	cmp	r3, #0
 8004522:	dd05      	ble.n	8004530 <_dtoa_r+0x858>
 8004524:	461a      	mov	r2, r3
 8004526:	9904      	ldr	r1, [sp, #16]
 8004528:	4620      	mov	r0, r4
 800452a:	f000 fb6f 	bl	8004c0c <__lshift>
 800452e:	9004      	str	r0, [sp, #16]
 8004530:	f1b8 0f00 	cmp.w	r8, #0
 8004534:	dd05      	ble.n	8004542 <_dtoa_r+0x86a>
 8004536:	4639      	mov	r1, r7
 8004538:	4642      	mov	r2, r8
 800453a:	4620      	mov	r0, r4
 800453c:	f000 fb66 	bl	8004c0c <__lshift>
 8004540:	4607      	mov	r7, r0
 8004542:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004544:	b353      	cbz	r3, 800459c <_dtoa_r+0x8c4>
 8004546:	4639      	mov	r1, r7
 8004548:	9804      	ldr	r0, [sp, #16]
 800454a:	f000 fbb3 	bl	8004cb4 <__mcmp>
 800454e:	2800      	cmp	r0, #0
 8004550:	da24      	bge.n	800459c <_dtoa_r+0x8c4>
 8004552:	2300      	movs	r3, #0
 8004554:	220a      	movs	r2, #10
 8004556:	9904      	ldr	r1, [sp, #16]
 8004558:	4620      	mov	r0, r4
 800455a:	f000 f9e1 	bl	8004920 <__multadd>
 800455e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004560:	9004      	str	r0, [sp, #16]
 8004562:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004566:	2b00      	cmp	r3, #0
 8004568:	f000 814d 	beq.w	8004806 <_dtoa_r+0xb2e>
 800456c:	2300      	movs	r3, #0
 800456e:	4631      	mov	r1, r6
 8004570:	220a      	movs	r2, #10
 8004572:	4620      	mov	r0, r4
 8004574:	f000 f9d4 	bl	8004920 <__multadd>
 8004578:	9b02      	ldr	r3, [sp, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	4606      	mov	r6, r0
 800457e:	dc4f      	bgt.n	8004620 <_dtoa_r+0x948>
 8004580:	9b06      	ldr	r3, [sp, #24]
 8004582:	2b02      	cmp	r3, #2
 8004584:	dd4c      	ble.n	8004620 <_dtoa_r+0x948>
 8004586:	e011      	b.n	80045ac <_dtoa_r+0x8d4>
 8004588:	d0c9      	beq.n	800451e <_dtoa_r+0x846>
 800458a:	9a05      	ldr	r2, [sp, #20]
 800458c:	331c      	adds	r3, #28
 800458e:	441a      	add	r2, r3
 8004590:	9205      	str	r2, [sp, #20]
 8004592:	441d      	add	r5, r3
 8004594:	4498      	add	r8, r3
 8004596:	e7c2      	b.n	800451e <_dtoa_r+0x846>
 8004598:	4603      	mov	r3, r0
 800459a:	e7f6      	b.n	800458a <_dtoa_r+0x8b2>
 800459c:	f1b9 0f00 	cmp.w	r9, #0
 80045a0:	dc38      	bgt.n	8004614 <_dtoa_r+0x93c>
 80045a2:	9b06      	ldr	r3, [sp, #24]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	dd35      	ble.n	8004614 <_dtoa_r+0x93c>
 80045a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80045ac:	9b02      	ldr	r3, [sp, #8]
 80045ae:	b963      	cbnz	r3, 80045ca <_dtoa_r+0x8f2>
 80045b0:	4639      	mov	r1, r7
 80045b2:	2205      	movs	r2, #5
 80045b4:	4620      	mov	r0, r4
 80045b6:	f000 f9b3 	bl	8004920 <__multadd>
 80045ba:	4601      	mov	r1, r0
 80045bc:	4607      	mov	r7, r0
 80045be:	9804      	ldr	r0, [sp, #16]
 80045c0:	f000 fb78 	bl	8004cb4 <__mcmp>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	f73f adcc 	bgt.w	8004162 <_dtoa_r+0x48a>
 80045ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045cc:	465d      	mov	r5, fp
 80045ce:	ea6f 0a03 	mvn.w	sl, r3
 80045d2:	f04f 0900 	mov.w	r9, #0
 80045d6:	4639      	mov	r1, r7
 80045d8:	4620      	mov	r0, r4
 80045da:	f000 f98a 	bl	80048f2 <_Bfree>
 80045de:	2e00      	cmp	r6, #0
 80045e0:	f43f aeb7 	beq.w	8004352 <_dtoa_r+0x67a>
 80045e4:	f1b9 0f00 	cmp.w	r9, #0
 80045e8:	d005      	beq.n	80045f6 <_dtoa_r+0x91e>
 80045ea:	45b1      	cmp	r9, r6
 80045ec:	d003      	beq.n	80045f6 <_dtoa_r+0x91e>
 80045ee:	4649      	mov	r1, r9
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 f97e 	bl	80048f2 <_Bfree>
 80045f6:	4631      	mov	r1, r6
 80045f8:	4620      	mov	r0, r4
 80045fa:	f000 f97a 	bl	80048f2 <_Bfree>
 80045fe:	e6a8      	b.n	8004352 <_dtoa_r+0x67a>
 8004600:	2700      	movs	r7, #0
 8004602:	463e      	mov	r6, r7
 8004604:	e7e1      	b.n	80045ca <_dtoa_r+0x8f2>
 8004606:	f8dd a020 	ldr.w	sl, [sp, #32]
 800460a:	463e      	mov	r6, r7
 800460c:	e5a9      	b.n	8004162 <_dtoa_r+0x48a>
 800460e:	bf00      	nop
 8004610:	40240000 	.word	0x40240000
 8004614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004616:	f8cd 9008 	str.w	r9, [sp, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80fa 	beq.w	8004814 <_dtoa_r+0xb3c>
 8004620:	2d00      	cmp	r5, #0
 8004622:	dd05      	ble.n	8004630 <_dtoa_r+0x958>
 8004624:	4631      	mov	r1, r6
 8004626:	462a      	mov	r2, r5
 8004628:	4620      	mov	r0, r4
 800462a:	f000 faef 	bl	8004c0c <__lshift>
 800462e:	4606      	mov	r6, r0
 8004630:	9b07      	ldr	r3, [sp, #28]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d04c      	beq.n	80046d0 <_dtoa_r+0x9f8>
 8004636:	6871      	ldr	r1, [r6, #4]
 8004638:	4620      	mov	r0, r4
 800463a:	f000 f926 	bl	800488a <_Balloc>
 800463e:	6932      	ldr	r2, [r6, #16]
 8004640:	3202      	adds	r2, #2
 8004642:	4605      	mov	r5, r0
 8004644:	0092      	lsls	r2, r2, #2
 8004646:	f106 010c 	add.w	r1, r6, #12
 800464a:	300c      	adds	r0, #12
 800464c:	f000 f912 	bl	8004874 <memcpy>
 8004650:	2201      	movs	r2, #1
 8004652:	4629      	mov	r1, r5
 8004654:	4620      	mov	r0, r4
 8004656:	f000 fad9 	bl	8004c0c <__lshift>
 800465a:	9b00      	ldr	r3, [sp, #0]
 800465c:	f8cd b014 	str.w	fp, [sp, #20]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	46b1      	mov	r9, r6
 8004666:	9307      	str	r3, [sp, #28]
 8004668:	4606      	mov	r6, r0
 800466a:	4639      	mov	r1, r7
 800466c:	9804      	ldr	r0, [sp, #16]
 800466e:	f7ff faa5 	bl	8003bbc <quorem>
 8004672:	4649      	mov	r1, r9
 8004674:	4605      	mov	r5, r0
 8004676:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800467a:	9804      	ldr	r0, [sp, #16]
 800467c:	f000 fb1a 	bl	8004cb4 <__mcmp>
 8004680:	4632      	mov	r2, r6
 8004682:	9000      	str	r0, [sp, #0]
 8004684:	4639      	mov	r1, r7
 8004686:	4620      	mov	r0, r4
 8004688:	f000 fb2e 	bl	8004ce8 <__mdiff>
 800468c:	68c3      	ldr	r3, [r0, #12]
 800468e:	4602      	mov	r2, r0
 8004690:	bb03      	cbnz	r3, 80046d4 <_dtoa_r+0x9fc>
 8004692:	4601      	mov	r1, r0
 8004694:	9008      	str	r0, [sp, #32]
 8004696:	9804      	ldr	r0, [sp, #16]
 8004698:	f000 fb0c 	bl	8004cb4 <__mcmp>
 800469c:	9a08      	ldr	r2, [sp, #32]
 800469e:	4603      	mov	r3, r0
 80046a0:	4611      	mov	r1, r2
 80046a2:	4620      	mov	r0, r4
 80046a4:	9308      	str	r3, [sp, #32]
 80046a6:	f000 f924 	bl	80048f2 <_Bfree>
 80046aa:	9b08      	ldr	r3, [sp, #32]
 80046ac:	b9a3      	cbnz	r3, 80046d8 <_dtoa_r+0xa00>
 80046ae:	9a06      	ldr	r2, [sp, #24]
 80046b0:	b992      	cbnz	r2, 80046d8 <_dtoa_r+0xa00>
 80046b2:	9a07      	ldr	r2, [sp, #28]
 80046b4:	b982      	cbnz	r2, 80046d8 <_dtoa_r+0xa00>
 80046b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80046ba:	d029      	beq.n	8004710 <_dtoa_r+0xa38>
 80046bc:	9b00      	ldr	r3, [sp, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	dd01      	ble.n	80046c6 <_dtoa_r+0x9ee>
 80046c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80046c6:	9b05      	ldr	r3, [sp, #20]
 80046c8:	1c5d      	adds	r5, r3, #1
 80046ca:	f883 8000 	strb.w	r8, [r3]
 80046ce:	e782      	b.n	80045d6 <_dtoa_r+0x8fe>
 80046d0:	4630      	mov	r0, r6
 80046d2:	e7c2      	b.n	800465a <_dtoa_r+0x982>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e7e3      	b.n	80046a0 <_dtoa_r+0x9c8>
 80046d8:	9a00      	ldr	r2, [sp, #0]
 80046da:	2a00      	cmp	r2, #0
 80046dc:	db04      	blt.n	80046e8 <_dtoa_r+0xa10>
 80046de:	d125      	bne.n	800472c <_dtoa_r+0xa54>
 80046e0:	9a06      	ldr	r2, [sp, #24]
 80046e2:	bb1a      	cbnz	r2, 800472c <_dtoa_r+0xa54>
 80046e4:	9a07      	ldr	r2, [sp, #28]
 80046e6:	bb0a      	cbnz	r2, 800472c <_dtoa_r+0xa54>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	ddec      	ble.n	80046c6 <_dtoa_r+0x9ee>
 80046ec:	2201      	movs	r2, #1
 80046ee:	9904      	ldr	r1, [sp, #16]
 80046f0:	4620      	mov	r0, r4
 80046f2:	f000 fa8b 	bl	8004c0c <__lshift>
 80046f6:	4639      	mov	r1, r7
 80046f8:	9004      	str	r0, [sp, #16]
 80046fa:	f000 fadb 	bl	8004cb4 <__mcmp>
 80046fe:	2800      	cmp	r0, #0
 8004700:	dc03      	bgt.n	800470a <_dtoa_r+0xa32>
 8004702:	d1e0      	bne.n	80046c6 <_dtoa_r+0x9ee>
 8004704:	f018 0f01 	tst.w	r8, #1
 8004708:	d0dd      	beq.n	80046c6 <_dtoa_r+0x9ee>
 800470a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800470e:	d1d8      	bne.n	80046c2 <_dtoa_r+0x9ea>
 8004710:	9b05      	ldr	r3, [sp, #20]
 8004712:	9a05      	ldr	r2, [sp, #20]
 8004714:	1c5d      	adds	r5, r3, #1
 8004716:	2339      	movs	r3, #57	; 0x39
 8004718:	7013      	strb	r3, [r2, #0]
 800471a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800471e:	2b39      	cmp	r3, #57	; 0x39
 8004720:	f105 32ff 	add.w	r2, r5, #4294967295
 8004724:	d04f      	beq.n	80047c6 <_dtoa_r+0xaee>
 8004726:	3301      	adds	r3, #1
 8004728:	7013      	strb	r3, [r2, #0]
 800472a:	e754      	b.n	80045d6 <_dtoa_r+0x8fe>
 800472c:	9a05      	ldr	r2, [sp, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f102 0501 	add.w	r5, r2, #1
 8004734:	dd06      	ble.n	8004744 <_dtoa_r+0xa6c>
 8004736:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800473a:	d0e9      	beq.n	8004710 <_dtoa_r+0xa38>
 800473c:	f108 0801 	add.w	r8, r8, #1
 8004740:	9b05      	ldr	r3, [sp, #20]
 8004742:	e7c2      	b.n	80046ca <_dtoa_r+0x9f2>
 8004744:	9a02      	ldr	r2, [sp, #8]
 8004746:	f805 8c01 	strb.w	r8, [r5, #-1]
 800474a:	eba5 030b 	sub.w	r3, r5, fp
 800474e:	4293      	cmp	r3, r2
 8004750:	d021      	beq.n	8004796 <_dtoa_r+0xabe>
 8004752:	2300      	movs	r3, #0
 8004754:	220a      	movs	r2, #10
 8004756:	9904      	ldr	r1, [sp, #16]
 8004758:	4620      	mov	r0, r4
 800475a:	f000 f8e1 	bl	8004920 <__multadd>
 800475e:	45b1      	cmp	r9, r6
 8004760:	9004      	str	r0, [sp, #16]
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	f04f 020a 	mov.w	r2, #10
 800476a:	4649      	mov	r1, r9
 800476c:	4620      	mov	r0, r4
 800476e:	d105      	bne.n	800477c <_dtoa_r+0xaa4>
 8004770:	f000 f8d6 	bl	8004920 <__multadd>
 8004774:	4681      	mov	r9, r0
 8004776:	4606      	mov	r6, r0
 8004778:	9505      	str	r5, [sp, #20]
 800477a:	e776      	b.n	800466a <_dtoa_r+0x992>
 800477c:	f000 f8d0 	bl	8004920 <__multadd>
 8004780:	4631      	mov	r1, r6
 8004782:	4681      	mov	r9, r0
 8004784:	2300      	movs	r3, #0
 8004786:	220a      	movs	r2, #10
 8004788:	4620      	mov	r0, r4
 800478a:	f000 f8c9 	bl	8004920 <__multadd>
 800478e:	4606      	mov	r6, r0
 8004790:	e7f2      	b.n	8004778 <_dtoa_r+0xaa0>
 8004792:	f04f 0900 	mov.w	r9, #0
 8004796:	2201      	movs	r2, #1
 8004798:	9904      	ldr	r1, [sp, #16]
 800479a:	4620      	mov	r0, r4
 800479c:	f000 fa36 	bl	8004c0c <__lshift>
 80047a0:	4639      	mov	r1, r7
 80047a2:	9004      	str	r0, [sp, #16]
 80047a4:	f000 fa86 	bl	8004cb4 <__mcmp>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	dcb6      	bgt.n	800471a <_dtoa_r+0xa42>
 80047ac:	d102      	bne.n	80047b4 <_dtoa_r+0xadc>
 80047ae:	f018 0f01 	tst.w	r8, #1
 80047b2:	d1b2      	bne.n	800471a <_dtoa_r+0xa42>
 80047b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80047b8:	2b30      	cmp	r3, #48	; 0x30
 80047ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80047be:	f47f af0a 	bne.w	80045d6 <_dtoa_r+0x8fe>
 80047c2:	4615      	mov	r5, r2
 80047c4:	e7f6      	b.n	80047b4 <_dtoa_r+0xadc>
 80047c6:	4593      	cmp	fp, r2
 80047c8:	d105      	bne.n	80047d6 <_dtoa_r+0xafe>
 80047ca:	2331      	movs	r3, #49	; 0x31
 80047cc:	f10a 0a01 	add.w	sl, sl, #1
 80047d0:	f88b 3000 	strb.w	r3, [fp]
 80047d4:	e6ff      	b.n	80045d6 <_dtoa_r+0x8fe>
 80047d6:	4615      	mov	r5, r2
 80047d8:	e79f      	b.n	800471a <_dtoa_r+0xa42>
 80047da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8004840 <_dtoa_r+0xb68>
 80047de:	e007      	b.n	80047f0 <_dtoa_r+0xb18>
 80047e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8004844 <_dtoa_r+0xb6c>
 80047e6:	b11b      	cbz	r3, 80047f0 <_dtoa_r+0xb18>
 80047e8:	f10b 0308 	add.w	r3, fp, #8
 80047ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80047ee:	6013      	str	r3, [r2, #0]
 80047f0:	4658      	mov	r0, fp
 80047f2:	b017      	add	sp, #92	; 0x5c
 80047f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047f8:	9b06      	ldr	r3, [sp, #24]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	f77f ae35 	ble.w	800446a <_dtoa_r+0x792>
 8004800:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004802:	9307      	str	r3, [sp, #28]
 8004804:	e649      	b.n	800449a <_dtoa_r+0x7c2>
 8004806:	9b02      	ldr	r3, [sp, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	dc03      	bgt.n	8004814 <_dtoa_r+0xb3c>
 800480c:	9b06      	ldr	r3, [sp, #24]
 800480e:	2b02      	cmp	r3, #2
 8004810:	f73f aecc 	bgt.w	80045ac <_dtoa_r+0x8d4>
 8004814:	465d      	mov	r5, fp
 8004816:	4639      	mov	r1, r7
 8004818:	9804      	ldr	r0, [sp, #16]
 800481a:	f7ff f9cf 	bl	8003bbc <quorem>
 800481e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004822:	f805 8b01 	strb.w	r8, [r5], #1
 8004826:	9a02      	ldr	r2, [sp, #8]
 8004828:	eba5 030b 	sub.w	r3, r5, fp
 800482c:	429a      	cmp	r2, r3
 800482e:	ddb0      	ble.n	8004792 <_dtoa_r+0xaba>
 8004830:	2300      	movs	r3, #0
 8004832:	220a      	movs	r2, #10
 8004834:	9904      	ldr	r1, [sp, #16]
 8004836:	4620      	mov	r0, r4
 8004838:	f000 f872 	bl	8004920 <__multadd>
 800483c:	9004      	str	r0, [sp, #16]
 800483e:	e7ea      	b.n	8004816 <_dtoa_r+0xb3e>
 8004840:	08004ffb 	.word	0x08004ffb
 8004844:	080050fe 	.word	0x080050fe

08004848 <_localeconv_r>:
 8004848:	4b04      	ldr	r3, [pc, #16]	; (800485c <_localeconv_r+0x14>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	6a18      	ldr	r0, [r3, #32]
 800484e:	4b04      	ldr	r3, [pc, #16]	; (8004860 <_localeconv_r+0x18>)
 8004850:	2800      	cmp	r0, #0
 8004852:	bf08      	it	eq
 8004854:	4618      	moveq	r0, r3
 8004856:	30f0      	adds	r0, #240	; 0xf0
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	2000003c 	.word	0x2000003c
 8004860:	200000a0 	.word	0x200000a0

08004864 <malloc>:
 8004864:	4b02      	ldr	r3, [pc, #8]	; (8004870 <malloc+0xc>)
 8004866:	4601      	mov	r1, r0
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	f000 baf7 	b.w	8004e5c <_malloc_r>
 800486e:	bf00      	nop
 8004870:	2000003c 	.word	0x2000003c

08004874 <memcpy>:
 8004874:	b510      	push	{r4, lr}
 8004876:	1e43      	subs	r3, r0, #1
 8004878:	440a      	add	r2, r1
 800487a:	4291      	cmp	r1, r2
 800487c:	d100      	bne.n	8004880 <memcpy+0xc>
 800487e:	bd10      	pop	{r4, pc}
 8004880:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004888:	e7f7      	b.n	800487a <memcpy+0x6>

0800488a <_Balloc>:
 800488a:	b570      	push	{r4, r5, r6, lr}
 800488c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800488e:	4604      	mov	r4, r0
 8004890:	460e      	mov	r6, r1
 8004892:	b93d      	cbnz	r5, 80048a4 <_Balloc+0x1a>
 8004894:	2010      	movs	r0, #16
 8004896:	f7ff ffe5 	bl	8004864 <malloc>
 800489a:	6260      	str	r0, [r4, #36]	; 0x24
 800489c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80048a0:	6005      	str	r5, [r0, #0]
 80048a2:	60c5      	str	r5, [r0, #12]
 80048a4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80048a6:	68eb      	ldr	r3, [r5, #12]
 80048a8:	b183      	cbz	r3, 80048cc <_Balloc+0x42>
 80048aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80048b2:	b9b8      	cbnz	r0, 80048e4 <_Balloc+0x5a>
 80048b4:	2101      	movs	r1, #1
 80048b6:	fa01 f506 	lsl.w	r5, r1, r6
 80048ba:	1d6a      	adds	r2, r5, #5
 80048bc:	0092      	lsls	r2, r2, #2
 80048be:	4620      	mov	r0, r4
 80048c0:	f000 fabe 	bl	8004e40 <_calloc_r>
 80048c4:	b160      	cbz	r0, 80048e0 <_Balloc+0x56>
 80048c6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80048ca:	e00e      	b.n	80048ea <_Balloc+0x60>
 80048cc:	2221      	movs	r2, #33	; 0x21
 80048ce:	2104      	movs	r1, #4
 80048d0:	4620      	mov	r0, r4
 80048d2:	f000 fab5 	bl	8004e40 <_calloc_r>
 80048d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048d8:	60e8      	str	r0, [r5, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e4      	bne.n	80048aa <_Balloc+0x20>
 80048e0:	2000      	movs	r0, #0
 80048e2:	bd70      	pop	{r4, r5, r6, pc}
 80048e4:	6802      	ldr	r2, [r0, #0]
 80048e6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80048ea:	2300      	movs	r3, #0
 80048ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80048f0:	e7f7      	b.n	80048e2 <_Balloc+0x58>

080048f2 <_Bfree>:
 80048f2:	b570      	push	{r4, r5, r6, lr}
 80048f4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80048f6:	4606      	mov	r6, r0
 80048f8:	460d      	mov	r5, r1
 80048fa:	b93c      	cbnz	r4, 800490c <_Bfree+0x1a>
 80048fc:	2010      	movs	r0, #16
 80048fe:	f7ff ffb1 	bl	8004864 <malloc>
 8004902:	6270      	str	r0, [r6, #36]	; 0x24
 8004904:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004908:	6004      	str	r4, [r0, #0]
 800490a:	60c4      	str	r4, [r0, #12]
 800490c:	b13d      	cbz	r5, 800491e <_Bfree+0x2c>
 800490e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004910:	686a      	ldr	r2, [r5, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004918:	6029      	str	r1, [r5, #0]
 800491a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800491e:	bd70      	pop	{r4, r5, r6, pc}

08004920 <__multadd>:
 8004920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004924:	690d      	ldr	r5, [r1, #16]
 8004926:	461f      	mov	r7, r3
 8004928:	4606      	mov	r6, r0
 800492a:	460c      	mov	r4, r1
 800492c:	f101 0c14 	add.w	ip, r1, #20
 8004930:	2300      	movs	r3, #0
 8004932:	f8dc 0000 	ldr.w	r0, [ip]
 8004936:	b281      	uxth	r1, r0
 8004938:	fb02 7101 	mla	r1, r2, r1, r7
 800493c:	0c0f      	lsrs	r7, r1, #16
 800493e:	0c00      	lsrs	r0, r0, #16
 8004940:	fb02 7000 	mla	r0, r2, r0, r7
 8004944:	b289      	uxth	r1, r1
 8004946:	3301      	adds	r3, #1
 8004948:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800494c:	429d      	cmp	r5, r3
 800494e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004952:	f84c 1b04 	str.w	r1, [ip], #4
 8004956:	dcec      	bgt.n	8004932 <__multadd+0x12>
 8004958:	b1d7      	cbz	r7, 8004990 <__multadd+0x70>
 800495a:	68a3      	ldr	r3, [r4, #8]
 800495c:	42ab      	cmp	r3, r5
 800495e:	dc12      	bgt.n	8004986 <__multadd+0x66>
 8004960:	6861      	ldr	r1, [r4, #4]
 8004962:	4630      	mov	r0, r6
 8004964:	3101      	adds	r1, #1
 8004966:	f7ff ff90 	bl	800488a <_Balloc>
 800496a:	6922      	ldr	r2, [r4, #16]
 800496c:	3202      	adds	r2, #2
 800496e:	f104 010c 	add.w	r1, r4, #12
 8004972:	4680      	mov	r8, r0
 8004974:	0092      	lsls	r2, r2, #2
 8004976:	300c      	adds	r0, #12
 8004978:	f7ff ff7c 	bl	8004874 <memcpy>
 800497c:	4621      	mov	r1, r4
 800497e:	4630      	mov	r0, r6
 8004980:	f7ff ffb7 	bl	80048f2 <_Bfree>
 8004984:	4644      	mov	r4, r8
 8004986:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800498a:	3501      	adds	r5, #1
 800498c:	615f      	str	r7, [r3, #20]
 800498e:	6125      	str	r5, [r4, #16]
 8004990:	4620      	mov	r0, r4
 8004992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004996 <__hi0bits>:
 8004996:	0c02      	lsrs	r2, r0, #16
 8004998:	0412      	lsls	r2, r2, #16
 800499a:	4603      	mov	r3, r0
 800499c:	b9b2      	cbnz	r2, 80049cc <__hi0bits+0x36>
 800499e:	0403      	lsls	r3, r0, #16
 80049a0:	2010      	movs	r0, #16
 80049a2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80049a6:	bf04      	itt	eq
 80049a8:	021b      	lsleq	r3, r3, #8
 80049aa:	3008      	addeq	r0, #8
 80049ac:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80049b0:	bf04      	itt	eq
 80049b2:	011b      	lsleq	r3, r3, #4
 80049b4:	3004      	addeq	r0, #4
 80049b6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80049ba:	bf04      	itt	eq
 80049bc:	009b      	lsleq	r3, r3, #2
 80049be:	3002      	addeq	r0, #2
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	db06      	blt.n	80049d2 <__hi0bits+0x3c>
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	d503      	bpl.n	80049d0 <__hi0bits+0x3a>
 80049c8:	3001      	adds	r0, #1
 80049ca:	4770      	bx	lr
 80049cc:	2000      	movs	r0, #0
 80049ce:	e7e8      	b.n	80049a2 <__hi0bits+0xc>
 80049d0:	2020      	movs	r0, #32
 80049d2:	4770      	bx	lr

080049d4 <__lo0bits>:
 80049d4:	6803      	ldr	r3, [r0, #0]
 80049d6:	f013 0207 	ands.w	r2, r3, #7
 80049da:	4601      	mov	r1, r0
 80049dc:	d00b      	beq.n	80049f6 <__lo0bits+0x22>
 80049de:	07da      	lsls	r2, r3, #31
 80049e0:	d423      	bmi.n	8004a2a <__lo0bits+0x56>
 80049e2:	0798      	lsls	r0, r3, #30
 80049e4:	bf49      	itett	mi
 80049e6:	085b      	lsrmi	r3, r3, #1
 80049e8:	089b      	lsrpl	r3, r3, #2
 80049ea:	2001      	movmi	r0, #1
 80049ec:	600b      	strmi	r3, [r1, #0]
 80049ee:	bf5c      	itt	pl
 80049f0:	600b      	strpl	r3, [r1, #0]
 80049f2:	2002      	movpl	r0, #2
 80049f4:	4770      	bx	lr
 80049f6:	b298      	uxth	r0, r3
 80049f8:	b9a8      	cbnz	r0, 8004a26 <__lo0bits+0x52>
 80049fa:	0c1b      	lsrs	r3, r3, #16
 80049fc:	2010      	movs	r0, #16
 80049fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a02:	bf04      	itt	eq
 8004a04:	0a1b      	lsreq	r3, r3, #8
 8004a06:	3008      	addeq	r0, #8
 8004a08:	071a      	lsls	r2, r3, #28
 8004a0a:	bf04      	itt	eq
 8004a0c:	091b      	lsreq	r3, r3, #4
 8004a0e:	3004      	addeq	r0, #4
 8004a10:	079a      	lsls	r2, r3, #30
 8004a12:	bf04      	itt	eq
 8004a14:	089b      	lsreq	r3, r3, #2
 8004a16:	3002      	addeq	r0, #2
 8004a18:	07da      	lsls	r2, r3, #31
 8004a1a:	d402      	bmi.n	8004a22 <__lo0bits+0x4e>
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	d006      	beq.n	8004a2e <__lo0bits+0x5a>
 8004a20:	3001      	adds	r0, #1
 8004a22:	600b      	str	r3, [r1, #0]
 8004a24:	4770      	bx	lr
 8004a26:	4610      	mov	r0, r2
 8004a28:	e7e9      	b.n	80049fe <__lo0bits+0x2a>
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	4770      	bx	lr
 8004a2e:	2020      	movs	r0, #32
 8004a30:	4770      	bx	lr

08004a32 <__i2b>:
 8004a32:	b510      	push	{r4, lr}
 8004a34:	460c      	mov	r4, r1
 8004a36:	2101      	movs	r1, #1
 8004a38:	f7ff ff27 	bl	800488a <_Balloc>
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	6144      	str	r4, [r0, #20]
 8004a40:	6102      	str	r2, [r0, #16]
 8004a42:	bd10      	pop	{r4, pc}

08004a44 <__multiply>:
 8004a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	4614      	mov	r4, r2
 8004a4a:	690a      	ldr	r2, [r1, #16]
 8004a4c:	6923      	ldr	r3, [r4, #16]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	bfb8      	it	lt
 8004a52:	460b      	movlt	r3, r1
 8004a54:	4688      	mov	r8, r1
 8004a56:	bfbc      	itt	lt
 8004a58:	46a0      	movlt	r8, r4
 8004a5a:	461c      	movlt	r4, r3
 8004a5c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004a60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004a64:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004a68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004a6c:	eb07 0609 	add.w	r6, r7, r9
 8004a70:	42b3      	cmp	r3, r6
 8004a72:	bfb8      	it	lt
 8004a74:	3101      	addlt	r1, #1
 8004a76:	f7ff ff08 	bl	800488a <_Balloc>
 8004a7a:	f100 0514 	add.w	r5, r0, #20
 8004a7e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8004a82:	462b      	mov	r3, r5
 8004a84:	2200      	movs	r2, #0
 8004a86:	4573      	cmp	r3, lr
 8004a88:	d316      	bcc.n	8004ab8 <__multiply+0x74>
 8004a8a:	f104 0214 	add.w	r2, r4, #20
 8004a8e:	f108 0114 	add.w	r1, r8, #20
 8004a92:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004a96:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004a9a:	9300      	str	r3, [sp, #0]
 8004a9c:	9b00      	ldr	r3, [sp, #0]
 8004a9e:	9201      	str	r2, [sp, #4]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d80c      	bhi.n	8004abe <__multiply+0x7a>
 8004aa4:	2e00      	cmp	r6, #0
 8004aa6:	dd03      	ble.n	8004ab0 <__multiply+0x6c>
 8004aa8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d05d      	beq.n	8004b6c <__multiply+0x128>
 8004ab0:	6106      	str	r6, [r0, #16]
 8004ab2:	b003      	add	sp, #12
 8004ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ab8:	f843 2b04 	str.w	r2, [r3], #4
 8004abc:	e7e3      	b.n	8004a86 <__multiply+0x42>
 8004abe:	f8b2 b000 	ldrh.w	fp, [r2]
 8004ac2:	f1bb 0f00 	cmp.w	fp, #0
 8004ac6:	d023      	beq.n	8004b10 <__multiply+0xcc>
 8004ac8:	4689      	mov	r9, r1
 8004aca:	46ac      	mov	ip, r5
 8004acc:	f04f 0800 	mov.w	r8, #0
 8004ad0:	f859 4b04 	ldr.w	r4, [r9], #4
 8004ad4:	f8dc a000 	ldr.w	sl, [ip]
 8004ad8:	b2a3      	uxth	r3, r4
 8004ada:	fa1f fa8a 	uxth.w	sl, sl
 8004ade:	fb0b a303 	mla	r3, fp, r3, sl
 8004ae2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004ae6:	f8dc 4000 	ldr.w	r4, [ip]
 8004aea:	4443      	add	r3, r8
 8004aec:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004af0:	fb0b 840a 	mla	r4, fp, sl, r8
 8004af4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004af8:	46e2      	mov	sl, ip
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b00:	454f      	cmp	r7, r9
 8004b02:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004b06:	f84a 3b04 	str.w	r3, [sl], #4
 8004b0a:	d82b      	bhi.n	8004b64 <__multiply+0x120>
 8004b0c:	f8cc 8004 	str.w	r8, [ip, #4]
 8004b10:	9b01      	ldr	r3, [sp, #4]
 8004b12:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004b16:	3204      	adds	r2, #4
 8004b18:	f1ba 0f00 	cmp.w	sl, #0
 8004b1c:	d020      	beq.n	8004b60 <__multiply+0x11c>
 8004b1e:	682b      	ldr	r3, [r5, #0]
 8004b20:	4689      	mov	r9, r1
 8004b22:	46a8      	mov	r8, r5
 8004b24:	f04f 0b00 	mov.w	fp, #0
 8004b28:	f8b9 c000 	ldrh.w	ip, [r9]
 8004b2c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8004b30:	fb0a 440c 	mla	r4, sl, ip, r4
 8004b34:	445c      	add	r4, fp
 8004b36:	46c4      	mov	ip, r8
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004b3e:	f84c 3b04 	str.w	r3, [ip], #4
 8004b42:	f859 3b04 	ldr.w	r3, [r9], #4
 8004b46:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8004b4a:	0c1b      	lsrs	r3, r3, #16
 8004b4c:	fb0a b303 	mla	r3, sl, r3, fp
 8004b50:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004b54:	454f      	cmp	r7, r9
 8004b56:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8004b5a:	d805      	bhi.n	8004b68 <__multiply+0x124>
 8004b5c:	f8c8 3004 	str.w	r3, [r8, #4]
 8004b60:	3504      	adds	r5, #4
 8004b62:	e79b      	b.n	8004a9c <__multiply+0x58>
 8004b64:	46d4      	mov	ip, sl
 8004b66:	e7b3      	b.n	8004ad0 <__multiply+0x8c>
 8004b68:	46e0      	mov	r8, ip
 8004b6a:	e7dd      	b.n	8004b28 <__multiply+0xe4>
 8004b6c:	3e01      	subs	r6, #1
 8004b6e:	e799      	b.n	8004aa4 <__multiply+0x60>

08004b70 <__pow5mult>:
 8004b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b74:	4615      	mov	r5, r2
 8004b76:	f012 0203 	ands.w	r2, r2, #3
 8004b7a:	4606      	mov	r6, r0
 8004b7c:	460f      	mov	r7, r1
 8004b7e:	d007      	beq.n	8004b90 <__pow5mult+0x20>
 8004b80:	3a01      	subs	r2, #1
 8004b82:	4c21      	ldr	r4, [pc, #132]	; (8004c08 <__pow5mult+0x98>)
 8004b84:	2300      	movs	r3, #0
 8004b86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b8a:	f7ff fec9 	bl	8004920 <__multadd>
 8004b8e:	4607      	mov	r7, r0
 8004b90:	10ad      	asrs	r5, r5, #2
 8004b92:	d035      	beq.n	8004c00 <__pow5mult+0x90>
 8004b94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004b96:	b93c      	cbnz	r4, 8004ba8 <__pow5mult+0x38>
 8004b98:	2010      	movs	r0, #16
 8004b9a:	f7ff fe63 	bl	8004864 <malloc>
 8004b9e:	6270      	str	r0, [r6, #36]	; 0x24
 8004ba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ba4:	6004      	str	r4, [r0, #0]
 8004ba6:	60c4      	str	r4, [r0, #12]
 8004ba8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004bac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004bb0:	b94c      	cbnz	r4, 8004bc6 <__pow5mult+0x56>
 8004bb2:	f240 2171 	movw	r1, #625	; 0x271
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	f7ff ff3b 	bl	8004a32 <__i2b>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f8c8 0008 	str.w	r0, [r8, #8]
 8004bc2:	4604      	mov	r4, r0
 8004bc4:	6003      	str	r3, [r0, #0]
 8004bc6:	f04f 0800 	mov.w	r8, #0
 8004bca:	07eb      	lsls	r3, r5, #31
 8004bcc:	d50a      	bpl.n	8004be4 <__pow5mult+0x74>
 8004bce:	4639      	mov	r1, r7
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f7ff ff36 	bl	8004a44 <__multiply>
 8004bd8:	4639      	mov	r1, r7
 8004bda:	4681      	mov	r9, r0
 8004bdc:	4630      	mov	r0, r6
 8004bde:	f7ff fe88 	bl	80048f2 <_Bfree>
 8004be2:	464f      	mov	r7, r9
 8004be4:	106d      	asrs	r5, r5, #1
 8004be6:	d00b      	beq.n	8004c00 <__pow5mult+0x90>
 8004be8:	6820      	ldr	r0, [r4, #0]
 8004bea:	b938      	cbnz	r0, 8004bfc <__pow5mult+0x8c>
 8004bec:	4622      	mov	r2, r4
 8004bee:	4621      	mov	r1, r4
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f7ff ff27 	bl	8004a44 <__multiply>
 8004bf6:	6020      	str	r0, [r4, #0]
 8004bf8:	f8c0 8000 	str.w	r8, [r0]
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	e7e4      	b.n	8004bca <__pow5mult+0x5a>
 8004c00:	4638      	mov	r0, r7
 8004c02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c06:	bf00      	nop
 8004c08:	08005200 	.word	0x08005200

08004c0c <__lshift>:
 8004c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c10:	460c      	mov	r4, r1
 8004c12:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c16:	6923      	ldr	r3, [r4, #16]
 8004c18:	6849      	ldr	r1, [r1, #4]
 8004c1a:	eb0a 0903 	add.w	r9, sl, r3
 8004c1e:	68a3      	ldr	r3, [r4, #8]
 8004c20:	4607      	mov	r7, r0
 8004c22:	4616      	mov	r6, r2
 8004c24:	f109 0501 	add.w	r5, r9, #1
 8004c28:	42ab      	cmp	r3, r5
 8004c2a:	db32      	blt.n	8004c92 <__lshift+0x86>
 8004c2c:	4638      	mov	r0, r7
 8004c2e:	f7ff fe2c 	bl	800488a <_Balloc>
 8004c32:	2300      	movs	r3, #0
 8004c34:	4680      	mov	r8, r0
 8004c36:	f100 0114 	add.w	r1, r0, #20
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	4553      	cmp	r3, sl
 8004c3e:	db2b      	blt.n	8004c98 <__lshift+0x8c>
 8004c40:	6920      	ldr	r0, [r4, #16]
 8004c42:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c46:	f104 0314 	add.w	r3, r4, #20
 8004c4a:	f016 021f 	ands.w	r2, r6, #31
 8004c4e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c52:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004c56:	d025      	beq.n	8004ca4 <__lshift+0x98>
 8004c58:	f1c2 0e20 	rsb	lr, r2, #32
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	681e      	ldr	r6, [r3, #0]
 8004c60:	468a      	mov	sl, r1
 8004c62:	4096      	lsls	r6, r2
 8004c64:	4330      	orrs	r0, r6
 8004c66:	f84a 0b04 	str.w	r0, [sl], #4
 8004c6a:	f853 0b04 	ldr.w	r0, [r3], #4
 8004c6e:	459c      	cmp	ip, r3
 8004c70:	fa20 f00e 	lsr.w	r0, r0, lr
 8004c74:	d814      	bhi.n	8004ca0 <__lshift+0x94>
 8004c76:	6048      	str	r0, [r1, #4]
 8004c78:	b108      	cbz	r0, 8004c7e <__lshift+0x72>
 8004c7a:	f109 0502 	add.w	r5, r9, #2
 8004c7e:	3d01      	subs	r5, #1
 8004c80:	4638      	mov	r0, r7
 8004c82:	f8c8 5010 	str.w	r5, [r8, #16]
 8004c86:	4621      	mov	r1, r4
 8004c88:	f7ff fe33 	bl	80048f2 <_Bfree>
 8004c8c:	4640      	mov	r0, r8
 8004c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c92:	3101      	adds	r1, #1
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	e7c7      	b.n	8004c28 <__lshift+0x1c>
 8004c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	e7cd      	b.n	8004c3c <__lshift+0x30>
 8004ca0:	4651      	mov	r1, sl
 8004ca2:	e7dc      	b.n	8004c5e <__lshift+0x52>
 8004ca4:	3904      	subs	r1, #4
 8004ca6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004caa:	f841 2f04 	str.w	r2, [r1, #4]!
 8004cae:	459c      	cmp	ip, r3
 8004cb0:	d8f9      	bhi.n	8004ca6 <__lshift+0x9a>
 8004cb2:	e7e4      	b.n	8004c7e <__lshift+0x72>

08004cb4 <__mcmp>:
 8004cb4:	6903      	ldr	r3, [r0, #16]
 8004cb6:	690a      	ldr	r2, [r1, #16]
 8004cb8:	1a9b      	subs	r3, r3, r2
 8004cba:	b530      	push	{r4, r5, lr}
 8004cbc:	d10c      	bne.n	8004cd8 <__mcmp+0x24>
 8004cbe:	0092      	lsls	r2, r2, #2
 8004cc0:	3014      	adds	r0, #20
 8004cc2:	3114      	adds	r1, #20
 8004cc4:	1884      	adds	r4, r0, r2
 8004cc6:	4411      	add	r1, r2
 8004cc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004ccc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004cd0:	4295      	cmp	r5, r2
 8004cd2:	d003      	beq.n	8004cdc <__mcmp+0x28>
 8004cd4:	d305      	bcc.n	8004ce2 <__mcmp+0x2e>
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	4618      	mov	r0, r3
 8004cda:	bd30      	pop	{r4, r5, pc}
 8004cdc:	42a0      	cmp	r0, r4
 8004cde:	d3f3      	bcc.n	8004cc8 <__mcmp+0x14>
 8004ce0:	e7fa      	b.n	8004cd8 <__mcmp+0x24>
 8004ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ce6:	e7f7      	b.n	8004cd8 <__mcmp+0x24>

08004ce8 <__mdiff>:
 8004ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cec:	460d      	mov	r5, r1
 8004cee:	4607      	mov	r7, r0
 8004cf0:	4611      	mov	r1, r2
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	4614      	mov	r4, r2
 8004cf6:	f7ff ffdd 	bl	8004cb4 <__mcmp>
 8004cfa:	1e06      	subs	r6, r0, #0
 8004cfc:	d108      	bne.n	8004d10 <__mdiff+0x28>
 8004cfe:	4631      	mov	r1, r6
 8004d00:	4638      	mov	r0, r7
 8004d02:	f7ff fdc2 	bl	800488a <_Balloc>
 8004d06:	2301      	movs	r3, #1
 8004d08:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d10:	bfa4      	itt	ge
 8004d12:	4623      	movge	r3, r4
 8004d14:	462c      	movge	r4, r5
 8004d16:	4638      	mov	r0, r7
 8004d18:	6861      	ldr	r1, [r4, #4]
 8004d1a:	bfa6      	itte	ge
 8004d1c:	461d      	movge	r5, r3
 8004d1e:	2600      	movge	r6, #0
 8004d20:	2601      	movlt	r6, #1
 8004d22:	f7ff fdb2 	bl	800488a <_Balloc>
 8004d26:	692b      	ldr	r3, [r5, #16]
 8004d28:	60c6      	str	r6, [r0, #12]
 8004d2a:	6926      	ldr	r6, [r4, #16]
 8004d2c:	f105 0914 	add.w	r9, r5, #20
 8004d30:	f104 0214 	add.w	r2, r4, #20
 8004d34:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004d38:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004d3c:	f100 0514 	add.w	r5, r0, #20
 8004d40:	f04f 0e00 	mov.w	lr, #0
 8004d44:	f852 ab04 	ldr.w	sl, [r2], #4
 8004d48:	f859 4b04 	ldr.w	r4, [r9], #4
 8004d4c:	fa1e f18a 	uxtah	r1, lr, sl
 8004d50:	b2a3      	uxth	r3, r4
 8004d52:	1ac9      	subs	r1, r1, r3
 8004d54:	0c23      	lsrs	r3, r4, #16
 8004d56:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004d5a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004d5e:	b289      	uxth	r1, r1
 8004d60:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004d64:	45c8      	cmp	r8, r9
 8004d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004d6a:	4694      	mov	ip, r2
 8004d6c:	f845 3b04 	str.w	r3, [r5], #4
 8004d70:	d8e8      	bhi.n	8004d44 <__mdiff+0x5c>
 8004d72:	45bc      	cmp	ip, r7
 8004d74:	d304      	bcc.n	8004d80 <__mdiff+0x98>
 8004d76:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004d7a:	b183      	cbz	r3, 8004d9e <__mdiff+0xb6>
 8004d7c:	6106      	str	r6, [r0, #16]
 8004d7e:	e7c5      	b.n	8004d0c <__mdiff+0x24>
 8004d80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004d84:	fa1e f381 	uxtah	r3, lr, r1
 8004d88:	141a      	asrs	r2, r3, #16
 8004d8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d94:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004d98:	f845 3b04 	str.w	r3, [r5], #4
 8004d9c:	e7e9      	b.n	8004d72 <__mdiff+0x8a>
 8004d9e:	3e01      	subs	r6, #1
 8004da0:	e7e9      	b.n	8004d76 <__mdiff+0x8e>

08004da2 <__d2b>:
 8004da2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004da6:	460e      	mov	r6, r1
 8004da8:	2101      	movs	r1, #1
 8004daa:	ec59 8b10 	vmov	r8, r9, d0
 8004dae:	4615      	mov	r5, r2
 8004db0:	f7ff fd6b 	bl	800488a <_Balloc>
 8004db4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004db8:	4607      	mov	r7, r0
 8004dba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004dbe:	bb34      	cbnz	r4, 8004e0e <__d2b+0x6c>
 8004dc0:	9301      	str	r3, [sp, #4]
 8004dc2:	f1b8 0300 	subs.w	r3, r8, #0
 8004dc6:	d027      	beq.n	8004e18 <__d2b+0x76>
 8004dc8:	a802      	add	r0, sp, #8
 8004dca:	f840 3d08 	str.w	r3, [r0, #-8]!
 8004dce:	f7ff fe01 	bl	80049d4 <__lo0bits>
 8004dd2:	9900      	ldr	r1, [sp, #0]
 8004dd4:	b1f0      	cbz	r0, 8004e14 <__d2b+0x72>
 8004dd6:	9a01      	ldr	r2, [sp, #4]
 8004dd8:	f1c0 0320 	rsb	r3, r0, #32
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	430b      	orrs	r3, r1
 8004de2:	40c2      	lsrs	r2, r0
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	9201      	str	r2, [sp, #4]
 8004de8:	9b01      	ldr	r3, [sp, #4]
 8004dea:	61bb      	str	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	bf14      	ite	ne
 8004df0:	2102      	movne	r1, #2
 8004df2:	2101      	moveq	r1, #1
 8004df4:	6139      	str	r1, [r7, #16]
 8004df6:	b1c4      	cbz	r4, 8004e2a <__d2b+0x88>
 8004df8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004dfc:	4404      	add	r4, r0
 8004dfe:	6034      	str	r4, [r6, #0]
 8004e00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e04:	6028      	str	r0, [r5, #0]
 8004e06:	4638      	mov	r0, r7
 8004e08:	b003      	add	sp, #12
 8004e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e12:	e7d5      	b.n	8004dc0 <__d2b+0x1e>
 8004e14:	6179      	str	r1, [r7, #20]
 8004e16:	e7e7      	b.n	8004de8 <__d2b+0x46>
 8004e18:	a801      	add	r0, sp, #4
 8004e1a:	f7ff fddb 	bl	80049d4 <__lo0bits>
 8004e1e:	9b01      	ldr	r3, [sp, #4]
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	2101      	movs	r1, #1
 8004e24:	6139      	str	r1, [r7, #16]
 8004e26:	3020      	adds	r0, #32
 8004e28:	e7e5      	b.n	8004df6 <__d2b+0x54>
 8004e2a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004e2e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e32:	6030      	str	r0, [r6, #0]
 8004e34:	6918      	ldr	r0, [r3, #16]
 8004e36:	f7ff fdae 	bl	8004996 <__hi0bits>
 8004e3a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004e3e:	e7e1      	b.n	8004e04 <__d2b+0x62>

08004e40 <_calloc_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	fb02 f401 	mul.w	r4, r2, r1
 8004e46:	4621      	mov	r1, r4
 8004e48:	f000 f808 	bl	8004e5c <_malloc_r>
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	b118      	cbz	r0, 8004e58 <_calloc_r+0x18>
 8004e50:	4622      	mov	r2, r4
 8004e52:	2100      	movs	r1, #0
 8004e54:	f7fe fb54 	bl	8003500 <memset>
 8004e58:	4628      	mov	r0, r5
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}

08004e5c <_malloc_r>:
 8004e5c:	b570      	push	{r4, r5, r6, lr}
 8004e5e:	1ccd      	adds	r5, r1, #3
 8004e60:	f025 0503 	bic.w	r5, r5, #3
 8004e64:	3508      	adds	r5, #8
 8004e66:	2d0c      	cmp	r5, #12
 8004e68:	bf38      	it	cc
 8004e6a:	250c      	movcc	r5, #12
 8004e6c:	2d00      	cmp	r5, #0
 8004e6e:	4606      	mov	r6, r0
 8004e70:	db01      	blt.n	8004e76 <_malloc_r+0x1a>
 8004e72:	42a9      	cmp	r1, r5
 8004e74:	d903      	bls.n	8004e7e <_malloc_r+0x22>
 8004e76:	230c      	movs	r3, #12
 8004e78:	6033      	str	r3, [r6, #0]
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
 8004e7e:	f000 f857 	bl	8004f30 <__malloc_lock>
 8004e82:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <_malloc_r+0xac>)
 8004e84:	6814      	ldr	r4, [r2, #0]
 8004e86:	4621      	mov	r1, r4
 8004e88:	b991      	cbnz	r1, 8004eb0 <_malloc_r+0x54>
 8004e8a:	4c20      	ldr	r4, [pc, #128]	; (8004f0c <_malloc_r+0xb0>)
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	b91b      	cbnz	r3, 8004e98 <_malloc_r+0x3c>
 8004e90:	4630      	mov	r0, r6
 8004e92:	f000 f83d 	bl	8004f10 <_sbrk_r>
 8004e96:	6020      	str	r0, [r4, #0]
 8004e98:	4629      	mov	r1, r5
 8004e9a:	4630      	mov	r0, r6
 8004e9c:	f000 f838 	bl	8004f10 <_sbrk_r>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d124      	bne.n	8004eee <_malloc_r+0x92>
 8004ea4:	230c      	movs	r3, #12
 8004ea6:	6033      	str	r3, [r6, #0]
 8004ea8:	4630      	mov	r0, r6
 8004eaa:	f000 f842 	bl	8004f32 <__malloc_unlock>
 8004eae:	e7e4      	b.n	8004e7a <_malloc_r+0x1e>
 8004eb0:	680b      	ldr	r3, [r1, #0]
 8004eb2:	1b5b      	subs	r3, r3, r5
 8004eb4:	d418      	bmi.n	8004ee8 <_malloc_r+0x8c>
 8004eb6:	2b0b      	cmp	r3, #11
 8004eb8:	d90f      	bls.n	8004eda <_malloc_r+0x7e>
 8004eba:	600b      	str	r3, [r1, #0]
 8004ebc:	50cd      	str	r5, [r1, r3]
 8004ebe:	18cc      	adds	r4, r1, r3
 8004ec0:	4630      	mov	r0, r6
 8004ec2:	f000 f836 	bl	8004f32 <__malloc_unlock>
 8004ec6:	f104 000b 	add.w	r0, r4, #11
 8004eca:	1d23      	adds	r3, r4, #4
 8004ecc:	f020 0007 	bic.w	r0, r0, #7
 8004ed0:	1ac3      	subs	r3, r0, r3
 8004ed2:	d0d3      	beq.n	8004e7c <_malloc_r+0x20>
 8004ed4:	425a      	negs	r2, r3
 8004ed6:	50e2      	str	r2, [r4, r3]
 8004ed8:	e7d0      	b.n	8004e7c <_malloc_r+0x20>
 8004eda:	428c      	cmp	r4, r1
 8004edc:	684b      	ldr	r3, [r1, #4]
 8004ede:	bf16      	itet	ne
 8004ee0:	6063      	strne	r3, [r4, #4]
 8004ee2:	6013      	streq	r3, [r2, #0]
 8004ee4:	460c      	movne	r4, r1
 8004ee6:	e7eb      	b.n	8004ec0 <_malloc_r+0x64>
 8004ee8:	460c      	mov	r4, r1
 8004eea:	6849      	ldr	r1, [r1, #4]
 8004eec:	e7cc      	b.n	8004e88 <_malloc_r+0x2c>
 8004eee:	1cc4      	adds	r4, r0, #3
 8004ef0:	f024 0403 	bic.w	r4, r4, #3
 8004ef4:	42a0      	cmp	r0, r4
 8004ef6:	d005      	beq.n	8004f04 <_malloc_r+0xa8>
 8004ef8:	1a21      	subs	r1, r4, r0
 8004efa:	4630      	mov	r0, r6
 8004efc:	f000 f808 	bl	8004f10 <_sbrk_r>
 8004f00:	3001      	adds	r0, #1
 8004f02:	d0cf      	beq.n	8004ea4 <_malloc_r+0x48>
 8004f04:	6025      	str	r5, [r4, #0]
 8004f06:	e7db      	b.n	8004ec0 <_malloc_r+0x64>
 8004f08:	20000234 	.word	0x20000234
 8004f0c:	20000238 	.word	0x20000238

08004f10 <_sbrk_r>:
 8004f10:	b538      	push	{r3, r4, r5, lr}
 8004f12:	4c06      	ldr	r4, [pc, #24]	; (8004f2c <_sbrk_r+0x1c>)
 8004f14:	2300      	movs	r3, #0
 8004f16:	4605      	mov	r5, r0
 8004f18:	4608      	mov	r0, r1
 8004f1a:	6023      	str	r3, [r4, #0]
 8004f1c:	f7fc ff8c 	bl	8001e38 <_sbrk>
 8004f20:	1c43      	adds	r3, r0, #1
 8004f22:	d102      	bne.n	8004f2a <_sbrk_r+0x1a>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	b103      	cbz	r3, 8004f2a <_sbrk_r+0x1a>
 8004f28:	602b      	str	r3, [r5, #0]
 8004f2a:	bd38      	pop	{r3, r4, r5, pc}
 8004f2c:	20000280 	.word	0x20000280

08004f30 <__malloc_lock>:
 8004f30:	4770      	bx	lr

08004f32 <__malloc_unlock>:
 8004f32:	4770      	bx	lr

08004f34 <_init>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	bf00      	nop
 8004f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3a:	bc08      	pop	{r3}
 8004f3c:	469e      	mov	lr, r3
 8004f3e:	4770      	bx	lr

08004f40 <_fini>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr
