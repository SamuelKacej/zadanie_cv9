
zadanie_cv8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004414  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  080045a8  080045a8  000145a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048d8  080048d8  0002020c  2**0
                  CONTENTS
  4 .ARM          00000000  080048d8  080048d8  0002020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048d8  080048d8  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048d8  080048d8  000148d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048dc  080048dc  000148dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080048e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000005c  2000020c  08004aec  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08004aec  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007671  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000148d  00000000  00000000  000278ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000580  00000000  00000000  00028d40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004d8  00000000  00000000  000292c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000173cd  00000000  00000000  00029798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004c23  00000000  00000000  00040b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007888f  00000000  00000000  00045788  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be017  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f38  00000000  00000000  000be094  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000020c 	.word	0x2000020c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800458c 	.word	0x0800458c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000210 	.word	0x20000210
 80001cc:	0800458c 	.word	0x0800458c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	619a      	str	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	370c      	adds	r7, #12
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr

08000bc4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000bd4:	bf00      	nop
 8000bd6:	370c      	adds	r7, #12
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <DISPLAY_displayCurStr>:
void updateCurPos(uint8_t *prevPos, uint8_t shiftDir);
void updateShiftDir(uint8_t curPos, uint8_t *shiftDir);
void setCurStr(uint8_t curPos);

//functions to handle multiplexing of the currently displaying alphanum char
void DISPLAY_displayCurStr(){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
	static uint8_t curActDig = 0;
	resetAllDigits();
 8000be6:	f000 f89b 	bl	8000d20 <resetAllDigits>

	updateAlphanumChar( segVal_ASCII[ toupper(curStr[curActDig]) - '0'] );
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <DISPLAY_displayCurStr+0x6c>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <DISPLAY_displayCurStr+0x70>)
 8000bf2:	5c9b      	ldrb	r3, [r3, r2]
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	f001 fc75 	bl	80024e4 <__locale_ctype_ptr>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	4413      	add	r3, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d102      	bne.n	8000c12 <DISPLAY_displayCurStr+0x32>
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	3b20      	subs	r3, #32
 8000c10:	e000      	b.n	8000c14 <DISPLAY_displayCurStr+0x34>
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	3b30      	subs	r3, #48	; 0x30
 8000c16:	4a0f      	ldr	r2, [pc, #60]	; (8000c54 <DISPLAY_displayCurStr+0x74>)
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 f81c 	bl	8000c58 <updateAlphanumChar>
	setDigit(curActDig);
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <DISPLAY_displayCurStr+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f000 f843 	bl	8000cb0 <setDigit>
	curActDig++;
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <DISPLAY_displayCurStr+0x6c>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <DISPLAY_displayCurStr+0x6c>)
 8000c34:	701a      	strb	r2, [r3, #0]
	curActDig %= 4;
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <DISPLAY_displayCurStr+0x6c>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b02      	ldr	r3, [pc, #8]	; (8000c4c <DISPLAY_displayCurStr+0x6c>)
 8000c42:	701a      	strb	r2, [r3, #0]
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000229 	.word	0x20000229
 8000c50:	20000248 	.word	0x20000248
 8000c54:	080045e4 	.word	0x080045e4

08000c58 <updateAlphanumChar>:

void updateAlphanumChar(uint8_t segmentValues){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	resetAllSegments();
 8000c62:	f000 f83d 	bl	8000ce0 <resetAllSegments>
	for(int i = 0; i<(NUM_SEG-1); i++){
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e015      	b.n	8000c98 <updateAlphanumChar+0x40>
		if(segmentValues & (0x01<<i)) LL_GPIO_ResetOutputPin((GPIO_TypeDef*)seg_Ports[i], (uint32_t)seg_Pins[i]);
 8000c6c:	79fa      	ldrb	r2, [r7, #7]
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	fa42 f303 	asr.w	r3, r2, r3
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d00a      	beq.n	8000c92 <updateAlphanumChar+0x3a>
 8000c7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ca8 <updateAlphanumChar+0x50>)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c84:	4a09      	ldr	r2, [pc, #36]	; (8000cac <updateAlphanumChar+0x54>)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f7ff ff99 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<(NUM_SEG-1); i++){
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	3301      	adds	r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	2b06      	cmp	r3, #6
 8000c9c:	dde6      	ble.n	8000c6c <updateAlphanumChar+0x14>
	}
	}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000004 	.word	0x20000004
 8000cac:	08004630 	.word	0x08004630

08000cb0 <setDigit>:

//Turns required digit ON
void setDigit(uint8_t pos){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	71fb      	strb	r3, [r7, #7]
	LL_GPIO_SetOutputPin((GPIO_TypeDef*)dig_Ports[pos], (uint32_t)dig_Pins[pos]);
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	4a06      	ldr	r2, [pc, #24]	; (8000cd8 <setDigit+0x28>)
 8000cbe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <setDigit+0x2c>)
 8000cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cca:	4619      	mov	r1, r3
 8000ccc:	f7ff ff6c 	bl	8000ba8 <LL_GPIO_SetOutputPin>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000024 	.word	0x20000024
 8000cdc:	08004650 	.word	0x08004650

08000ce0 <resetAllSegments>:

/*Reset (turn-off) all the segments of display*/
void resetAllSegments(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUM_SEG; i++){
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	e00d      	b.n	8000d08 <resetAllSegments+0x28>
		LL_GPIO_SetOutputPin((GPIO_TypeDef*)seg_Ports[i], (uint32_t)seg_Pins[i]);
 8000cec:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <resetAllSegments+0x38>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cf4:	4a09      	ldr	r2, [pc, #36]	; (8000d1c <resetAllSegments+0x3c>)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	f7ff ff53 	bl	8000ba8 <LL_GPIO_SetOutputPin>
	for(int i = 0; i<NUM_SEG; i++){
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3301      	adds	r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	ddee      	ble.n	8000cec <resetAllSegments+0xc>
	}
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000004 	.word	0x20000004
 8000d1c:	08004630 	.word	0x08004630

08000d20 <resetAllDigits>:

/* Reset (turn-off) all digits*/
void resetAllDigits(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
	for(int i = 0; i<NUM_DIG; i++){
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	e00d      	b.n	8000d48 <resetAllDigits+0x28>
		LL_GPIO_ResetOutputPin((GPIO_TypeDef*)dig_Ports[i], (uint32_t)dig_Pins[i]);
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	; (8000d58 <resetAllDigits+0x38>)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d34:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <resetAllDigits+0x3c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f7ff ff41 	bl	8000bc4 <LL_GPIO_ResetOutputPin>
	for(int i = 0; i<NUM_DIG; i++){
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	3301      	adds	r3, #1
 8000d46:	607b      	str	r3, [r7, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	ddee      	ble.n	8000d2c <resetAllDigits+0xc>
	}
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000024 	.word	0x20000024
 8000d5c:	08004650 	.word	0x08004650

08000d60 <DISPLAY_shiftCurStr>:

//Functions to handle shifting of the currently displaying string
void DISPLAY_shiftCurStr(){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	static uint8_t shiftDir = LEFT_TO_RIGHT;

	updateCurPos(&curPos, shiftDir);
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <DISPLAY_shiftCurStr+0x2c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4809      	ldr	r0, [pc, #36]	; (8000d90 <DISPLAY_shiftCurStr+0x30>)
 8000d6c:	f000 f812 	bl	8000d94 <updateCurPos>
	updateShiftDir(curPos, &shiftDir);
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <DISPLAY_shiftCurStr+0x30>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4905      	ldr	r1, [pc, #20]	; (8000d8c <DISPLAY_shiftCurStr+0x2c>)
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f828 	bl	8000dcc <updateShiftDir>
	setCurStr(curPos);
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <DISPLAY_shiftCurStr+0x30>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f000 f841 	bl	8000e08 <setCurStr>
}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000034 	.word	0x20000034
 8000d90:	20000228 	.word	0x20000228

08000d94 <updateCurPos>:

void updateCurPos(uint8_t *prevPos, uint8_t shiftDir){
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	70fb      	strb	r3, [r7, #3]
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d106      	bne.n	8000db4 <updateCurPos+0x20>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	b2da      	uxtb	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	701a      	strb	r2, [r3, #0]
}
 8000db2:	e005      	b.n	8000dc0 <updateCurPos+0x2c>
	shiftDir == LEFT_TO_RIGHT ? (*prevPos)++ : (*prevPos)--;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	3b01      	subs	r3, #1
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	701a      	strb	r2, [r3, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <updateShiftDir>:

void updateShiftDir(uint8_t curPos, uint8_t *shiftDir){
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	6039      	str	r1, [r7, #0]
 8000dd6:	71fb      	strb	r3, [r7, #7]
	if(curPos >= (complStrLen - NUM_DIG)){
 8000dd8:	79fa      	ldrb	r2, [r7, #7]
 8000dda:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <updateShiftDir+0x38>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	3b04      	subs	r3, #4
 8000de0:	429a      	cmp	r2, r3
 8000de2:	db02      	blt.n	8000dea <updateShiftDir+0x1e>
		*shiftDir =  RIGHT_TO_LEFT;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
	}

	if(curPos <= 0){
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d102      	bne.n	8000df6 <updateShiftDir+0x2a>
		*shiftDir = LEFT_TO_RIGHT;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	2201      	movs	r2, #1
 8000df4:	701a      	strb	r2, [r3, #0]
	}
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000000 	.word	0x20000000

08000e08 <setCurStr>:

void setCurStr(uint8_t curPos){
 8000e08:	b480      	push	{r7}
 8000e0a:	b085      	sub	sp, #20
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 8000e12:	2300      	movs	r3, #0
 8000e14:	73fb      	strb	r3, [r7, #15]
 8000e16:	e00c      	b.n	8000e32 <setCurStr+0x2a>
		curStr[i] = complStr[curPos + i];
 8000e18:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <setCurStr+0x3c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	79f9      	ldrb	r1, [r7, #7]
 8000e1e:	7bfa      	ldrb	r2, [r7, #15]
 8000e20:	440a      	add	r2, r1
 8000e22:	441a      	add	r2, r3
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	7811      	ldrb	r1, [r2, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <setCurStr+0x40>)
 8000e2a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i<NUM_DIG; i++){
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d9ef      	bls.n	8000e18 <setCurStr+0x10>
	}
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	2000024c 	.word	0x2000024c
 8000e48:	20000248 	.word	0x20000248

08000e4c <DISPLAY_setCompStr>:

//Function to change the complete string which is continuously being displayed on the display
void DISPLAY_setCompStr(uint8_t *newComplStr,uint8_t size){
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
	complStr = newComplStr;
 8000e58:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <DISPLAY_setCompStr+0x24>)
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6013      	str	r3, [r2, #0]
	complStrLen = size;
 8000e5e:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <DISPLAY_setCompStr+0x28>)
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	7013      	strb	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	2000024c 	.word	0x2000024c
 8000e74:	20000000 	.word	0x20000000

08000e78 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8000e80:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e82:	695a      	ldr	r2, [r3, #20]
 8000e84:	4907      	ldr	r1, [pc, #28]	; (8000ea4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000e8e:	695a      	ldr	r2, [r3, #20]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4013      	ands	r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e96:	68fb      	ldr	r3, [r7, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <LL_GPIO_ResetOutputPin>:
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	683a      	ldr	r2, [r7, #0]
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
 8000ed8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000eda:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000ede:	f7ff ffcb 	bl	8000e78 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000ee2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ee6:	f7ff ffc7 	bl	8000e78 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 8000eea:	f640 11ff 	movw	r1, #2559	; 0x9ff
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f7ff ffd9 	bl	8000ea8 <LL_GPIO_ResetOutputPin>
                          |digit_2_Pin|digit_1_Pin|digit_3_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, segment_DP_Pin|segment_G_Pin|segment_D_Pin);
 8000ef6:	2132      	movs	r1, #50	; 0x32
 8000ef8:	4813      	ldr	r0, [pc, #76]	; (8000f48 <MX_GPIO_Init+0x84>)
 8000efa:	f7ff ffd5 	bl	8000ea8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = segment_B_Pin|segment_A_Pin|digit_4_Pin|segment_F_Pin
 8000efe:	f640 13ff 	movw	r3, #2559	; 0x9ff
 8000f02:	603b      	str	r3, [r7, #0]
                          |digit_2_Pin|digit_1_Pin|digit_3_Pin|digit_time_Pin
                          |segment_C_Pin|segment_E_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f04:	2301      	movs	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f000 fe28 	bl	8001b70 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = segment_DP_Pin|segment_G_Pin|segment_D_Pin;
 8000f20:	2332      	movs	r3, #50	; 0x32
 8000f22:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000f24:	2301      	movs	r3, #1
 8000f26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f30:	2300      	movs	r3, #0
 8000f32:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	463b      	mov	r3, r7
 8000f36:	4619      	mov	r1, r3
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <MX_GPIO_Init+0x84>)
 8000f3a:	f000 fe19 	bl	8001b70 <LL_GPIO_Init>

}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	48000400 	.word	0x48000400

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	; (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f98:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <LL_RCC_HSI_Enable+0x1c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <LL_RCC_HSI_Enable+0x1c>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	6013      	str	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <LL_RCC_HSI_IsReady+0x20>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2301      	moveq	r3, #1
 8000fc6:	2300      	movne	r3, #0
 8000fc8:	b2db      	uxtb	r3, r3
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	4904      	ldr	r1, [pc, #16]	; (8001000 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	600b      	str	r3, [r1, #0]
}
 8000ff2:	bf00      	nop
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40021000 	.word	0x40021000

08001004 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <LL_RCC_SetSysClkSource+0x24>)
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f023 0203 	bic.w	r2, r3, #3
 8001014:	4904      	ldr	r1, [pc, #16]	; (8001028 <LL_RCC_SetSysClkSource+0x24>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4313      	orrs	r3, r2
 800101a:	604b      	str	r3, [r1, #4]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40021000 	.word	0x40021000

0800102c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <LL_RCC_GetSysClkSource+0x18>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f003 030c 	and.w	r3, r3, #12
}
 8001038:	4618      	mov	r0, r3
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <LL_RCC_SetAHBPrescaler+0x24>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001058:	4904      	ldr	r1, [pc, #16]	; (800106c <LL_RCC_SetAHBPrescaler+0x24>)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4313      	orrs	r3, r2
 800105e:	604b      	str	r3, [r1, #4]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000

08001070 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <LL_RCC_SetAPB1Prescaler+0x24>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001080:	4904      	ldr	r1, [pc, #16]	; (8001094 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	40021000 	.word	0x40021000

08001098 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80010a8:	4904      	ldr	r1, [pc, #16]	; (80010bc <LL_RCC_SetAPB2Prescaler+0x24>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	40021000 	.word	0x40021000

080010c0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80010ca:	69da      	ldr	r2, [r3, #28]
 80010cc:	4907      	ldr	r1, [pc, #28]	; (80010ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80010d6:	69da      	ldr	r2, [r3, #28]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4013      	ands	r3, r2
 80010dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010de:	68fb      	ldr	r3, [r7, #12]
}
 80010e0:	bf00      	nop
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	40021000 	.word	0x40021000

080010f0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010f8:	4b08      	ldr	r3, [pc, #32]	; (800111c <LL_APB2_GRP1_EnableClock+0x2c>)
 80010fa:	699a      	ldr	r2, [r3, #24]
 80010fc:	4907      	ldr	r1, [pc, #28]	; (800111c <LL_APB2_GRP1_EnableClock+0x2c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4313      	orrs	r3, r2
 8001102:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001106:	699a      	ldr	r2, [r3, #24]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4013      	ands	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	bf00      	nop
 8001112:	3714      	adds	r7, #20
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	40021000 	.word	0x40021000

08001120 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <LL_FLASH_SetLatency+0x24>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f023 0207 	bic.w	r2, r3, #7
 8001130:	4904      	ldr	r1, [pc, #16]	; (8001144 <LL_FLASH_SetLatency+0x24>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4313      	orrs	r3, r2
 8001136:	600b      	str	r3, [r1, #0]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	40022000 	.word	0x40022000

08001148 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <LL_FLASH_GetLatency+0x18>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0307 	and.w	r3, r3, #7
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	40022000 	.word	0x40022000

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001168:	2001      	movs	r0, #1
 800116a:	f7ff ffc1 	bl	80010f0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800116e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001172:	f7ff ffa5 	bl	80010c0 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001176:	2003      	movs	r0, #3
 8001178:	f7ff fee8 	bl	8000f4c <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800117c:	f000 f80a 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001180:	f7ff fea0 	bl	8000ec4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001184:	f000 faee 	bl	8001764 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001188:	f000 fb4e 	bl	8001828 <MX_TIM3_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  writeDisplay();
 800118c:	f000 f834 	bl	80011f8 <writeDisplay>
 8001190:	e7fc      	b.n	800118c <main+0x28>
	...

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff ffc1 	bl	8001120 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800119e:	bf00      	nop
 80011a0:	f7ff ffd2 	bl	8001148 <LL_FLASH_GetLatency>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d1fa      	bne.n	80011a0 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80011aa:	f7ff fef3 	bl	8000f94 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80011ae:	bf00      	nop
 80011b0:	f7ff ff00 	bl	8000fb4 <LL_RCC_HSI_IsReady>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d1fa      	bne.n	80011b0 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80011ba:	2010      	movs	r0, #16
 80011bc:	f7ff ff0c 	bl	8000fd8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff ff41 	bl	8001048 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f7ff ff52 	bl	8001070 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff ff63 	bl	8001098 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff ff16 	bl	8001004 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80011d8:	bf00      	nop
 80011da:	f7ff ff27 	bl	800102c <LL_RCC_GetSysClkSource>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d1fa      	bne.n	80011da <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80011e4:	4803      	ldr	r0, [pc, #12]	; (80011f4 <SystemClock_Config+0x60>)
 80011e6:	f001 f935 	bl	8002454 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80011ea:	4802      	ldr	r0, [pc, #8]	; (80011f4 <SystemClock_Config+0x60>)
 80011ec:	f001 f940 	bl	8002470 <LL_SetSystemCoreClock>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	007a1200 	.word	0x007a1200

080011f8 <writeDisplay>:

/* USER CODE BEGIN 4 */
	void writeDisplay(){
 80011f8:	b598      	push	{r3, r4, r7, lr}
 80011fa:	af00      	add	r7, sp, #0
		static uint8_t compStr[13];
		switch (dataID){
 80011fc:	4b45      	ldr	r3, [pc, #276]	; (8001314 <writeDisplay+0x11c>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b04      	cmp	r3, #4
 8001202:	f200 8085 	bhi.w	8001310 <writeDisplay+0x118>
 8001206:	a201      	add	r2, pc, #4	; (adr r2, 800120c <writeDisplay+0x14>)
 8001208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120c:	08001221 	.word	0x08001221
 8001210:	08001251 	.word	0x08001251
 8001214:	08001281 	.word	0x08001281
 8001218:	080012b1 	.word	0x080012b1
 800121c:	080012e1 	.word	0x080012e1
			case 0:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr,"MAG_%04.1f",sensorData[dataID]));
 8001220:	4b3c      	ldr	r3, [pc, #240]	; (8001314 <writeDisplay+0x11c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4a3c      	ldr	r2, [pc, #240]	; (8001318 <writeDisplay+0x120>)
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f98b 	bl	8000548 <__aeabi_f2d>
 8001232:	4603      	mov	r3, r0
 8001234:	460c      	mov	r4, r1
 8001236:	461a      	mov	r2, r3
 8001238:	4623      	mov	r3, r4
 800123a:	4938      	ldr	r1, [pc, #224]	; (800131c <writeDisplay+0x124>)
 800123c:	4838      	ldr	r0, [pc, #224]	; (8001320 <writeDisplay+0x128>)
 800123e:	f001 fdd5 	bl	8002dec <siprintf>
 8001242:	4603      	mov	r3, r0
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4619      	mov	r1, r3
 8001248:	4835      	ldr	r0, [pc, #212]	; (8001320 <writeDisplay+0x128>)
 800124a:	f7ff fdff 	bl	8000e4c <DISPLAY_setCompStr>
				break;
 800124e:	e05f      	b.n	8001310 <writeDisplay+0x118>
			case 1:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr,"TEMP_%04.1f",sensorData[dataID]));
 8001250:	4b30      	ldr	r3, [pc, #192]	; (8001314 <writeDisplay+0x11c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4a30      	ldr	r2, [pc, #192]	; (8001318 <writeDisplay+0x120>)
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f973 	bl	8000548 <__aeabi_f2d>
 8001262:	4603      	mov	r3, r0
 8001264:	460c      	mov	r4, r1
 8001266:	461a      	mov	r2, r3
 8001268:	4623      	mov	r3, r4
 800126a:	492e      	ldr	r1, [pc, #184]	; (8001324 <writeDisplay+0x12c>)
 800126c:	482c      	ldr	r0, [pc, #176]	; (8001320 <writeDisplay+0x128>)
 800126e:	f001 fdbd 	bl	8002dec <siprintf>
 8001272:	4603      	mov	r3, r0
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4619      	mov	r1, r3
 8001278:	4829      	ldr	r0, [pc, #164]	; (8001320 <writeDisplay+0x128>)
 800127a:	f7ff fde7 	bl	8000e4c <DISPLAY_setCompStr>
				break;
 800127e:	e047      	b.n	8001310 <writeDisplay+0x118>
			case 2:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr,"HUM_%02.0f",sensorData[dataID]));
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <writeDisplay+0x11c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4a24      	ldr	r2, [pc, #144]	; (8001318 <writeDisplay+0x120>)
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4413      	add	r3, r2
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f95b 	bl	8000548 <__aeabi_f2d>
 8001292:	4603      	mov	r3, r0
 8001294:	460c      	mov	r4, r1
 8001296:	461a      	mov	r2, r3
 8001298:	4623      	mov	r3, r4
 800129a:	4923      	ldr	r1, [pc, #140]	; (8001328 <writeDisplay+0x130>)
 800129c:	4820      	ldr	r0, [pc, #128]	; (8001320 <writeDisplay+0x128>)
 800129e:	f001 fda5 	bl	8002dec <siprintf>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	4619      	mov	r1, r3
 80012a8:	481d      	ldr	r0, [pc, #116]	; (8001320 <writeDisplay+0x128>)
 80012aa:	f7ff fdcf 	bl	8000e4c <DISPLAY_setCompStr>
				break;
 80012ae:	e02f      	b.n	8001310 <writeDisplay+0x118>
			case 3:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr,"BAR_%07.2f",sensorData[dataID]));
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <writeDisplay+0x11c>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	4a18      	ldr	r2, [pc, #96]	; (8001318 <writeDisplay+0x120>)
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f943 	bl	8000548 <__aeabi_f2d>
 80012c2:	4603      	mov	r3, r0
 80012c4:	460c      	mov	r4, r1
 80012c6:	461a      	mov	r2, r3
 80012c8:	4623      	mov	r3, r4
 80012ca:	4918      	ldr	r1, [pc, #96]	; (800132c <writeDisplay+0x134>)
 80012cc:	4814      	ldr	r0, [pc, #80]	; (8001320 <writeDisplay+0x128>)
 80012ce:	f001 fd8d 	bl	8002dec <siprintf>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	4619      	mov	r1, r3
 80012d8:	4811      	ldr	r0, [pc, #68]	; (8001320 <writeDisplay+0x128>)
 80012da:	f7ff fdb7 	bl	8000e4c <DISPLAY_setCompStr>
				break;
 80012de:	e017      	b.n	8001310 <writeDisplay+0x118>
			case 4:
				DISPLAY_setCompStr(compStr ,sprintf((char*) compStr,"ALT_%06.1f",sensorData[dataID]));
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <writeDisplay+0x11c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <writeDisplay+0x120>)
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f92b 	bl	8000548 <__aeabi_f2d>
 80012f2:	4603      	mov	r3, r0
 80012f4:	460c      	mov	r4, r1
 80012f6:	461a      	mov	r2, r3
 80012f8:	4623      	mov	r3, r4
 80012fa:	490d      	ldr	r1, [pc, #52]	; (8001330 <writeDisplay+0x138>)
 80012fc:	4808      	ldr	r0, [pc, #32]	; (8001320 <writeDisplay+0x128>)
 80012fe:	f001 fd75 	bl	8002dec <siprintf>
 8001302:	4603      	mov	r3, r0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	4619      	mov	r1, r3
 8001308:	4805      	ldr	r0, [pc, #20]	; (8001320 <writeDisplay+0x128>)
 800130a:	f7ff fd9f 	bl	8000e4c <DISPLAY_setCompStr>
				break;
 800130e:	bf00      	nop
		}
	}
 8001310:	bf00      	nop
 8001312:	bd98      	pop	{r3, r4, r7, pc}
 8001314:	2000022a 	.word	0x2000022a
 8001318:	20000250 	.word	0x20000250
 800131c:	080045a8 	.word	0x080045a8
 8001320:	2000022c 	.word	0x2000022c
 8001324:	080045b4 	.word	0x080045b4
 8001328:	080045c0 	.word	0x080045c0
 800132c:	080045cc 	.word	0x080045cc
 8001330:	080045d8 	.word	0x080045d8

08001334 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f06f 0201 	mvn.w	r2, #1
 8001342:	611a      	str	r2, [r3, #16]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b01      	cmp	r3, #1
 8001362:	d101      	bne.n	8001368 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <HardFault_Handler+0x4>

0800138a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800138e:	e7fe      	b.n	800138e <MemManage_Handler+0x4>

08001390 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001394:	e7fe      	b.n	8001394 <BusFault_Handler+0x4>

08001396 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800139a:	e7fe      	b.n	800139a <UsageFault_Handler+0x4>

0800139c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM2)){
 80013d8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013dc:	f7ff ffb8 	bl	8001350 <LL_TIM_IsActiveFlag_UPDATE>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d005      	beq.n	80013f2 <TIM2_IRQHandler+0x1e>
		DISPLAY_displayCurStr();
 80013e6:	f7ff fbfb 	bl	8000be0 <DISPLAY_displayCurStr>
		LL_TIM_ClearFlag_UPDATE(TIM2);
 80013ea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013ee:	f7ff ffa1 	bl	8001334 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 80013fc:	4806      	ldr	r0, [pc, #24]	; (8001418 <TIM3_IRQHandler+0x20>)
 80013fe:	f7ff ffa7 	bl	8001350 <LL_TIM_IsActiveFlag_UPDATE>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <TIM3_IRQHandler+0x1a>
		DISPLAY_shiftCurStr();
 8001408:	f7ff fcaa 	bl	8000d60 <DISPLAY_shiftCurStr>
		LL_TIM_ClearFlag_UPDATE(TIM3);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <TIM3_IRQHandler+0x20>)
 800140e:	f7ff ff91 	bl	8001334 <LL_TIM_ClearFlag_UPDATE>
	}
  /* USER CODE END TIM3_IRQn 0 */
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40000400 	.word	0x40000400

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f001 f820 	bl	8002490 <__errno>
 8001450:	4602      	mov	r2, r0
 8001452:	230c      	movs	r3, #12
 8001454:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20003000 	.word	0x20003000
 800147c:	00000400 	.word	0x00000400
 8001480:	2000023c 	.word	0x2000023c
 8001484:	20000268 	.word	0x20000268

08001488 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	; (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	; (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <LL_APB1_GRP1_EnableClock>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80015ca:	69da      	ldr	r2, [r3, #28]
 80015cc:	4907      	ldr	r1, [pc, #28]	; (80015ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80015d6:	69da      	ldr	r2, [r3, #28]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4013      	ands	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	40021000 	.word	0x40021000

080015f0 <LL_TIM_EnableCounter>:
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f043 0201 	orr.w	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	601a      	str	r2, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_TIM_DisableARRPreload>:
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_TIM_OC_DisableFast>:
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d028      	beq.n	8001692 <LL_TIM_OC_DisableFast+0x62>
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d023      	beq.n	800168e <LL_TIM_OC_DisableFast+0x5e>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2b10      	cmp	r3, #16
 800164a:	d01e      	beq.n	800168a <LL_TIM_OC_DisableFast+0x5a>
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	2b40      	cmp	r3, #64	; 0x40
 8001650:	d019      	beq.n	8001686 <LL_TIM_OC_DisableFast+0x56>
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001658:	d013      	beq.n	8001682 <LL_TIM_OC_DisableFast+0x52>
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001660:	d00d      	beq.n	800167e <LL_TIM_OC_DisableFast+0x4e>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001668:	d007      	beq.n	800167a <LL_TIM_OC_DisableFast+0x4a>
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001670:	d101      	bne.n	8001676 <LL_TIM_OC_DisableFast+0x46>
 8001672:	2307      	movs	r3, #7
 8001674:	e00e      	b.n	8001694 <LL_TIM_OC_DisableFast+0x64>
 8001676:	2308      	movs	r3, #8
 8001678:	e00c      	b.n	8001694 <LL_TIM_OC_DisableFast+0x64>
 800167a:	2306      	movs	r3, #6
 800167c:	e00a      	b.n	8001694 <LL_TIM_OC_DisableFast+0x64>
 800167e:	2305      	movs	r3, #5
 8001680:	e008      	b.n	8001694 <LL_TIM_OC_DisableFast+0x64>
 8001682:	2304      	movs	r3, #4
 8001684:	e006      	b.n	8001694 <LL_TIM_OC_DisableFast+0x64>
 8001686:	2303      	movs	r3, #3
 8001688:	e004      	b.n	8001694 <LL_TIM_OC_DisableFast+0x64>
 800168a:	2302      	movs	r3, #2
 800168c:	e002      	b.n	8001694 <LL_TIM_OC_DisableFast+0x64>
 800168e:	2301      	movs	r3, #1
 8001690:	e000      	b.n	8001694 <LL_TIM_OC_DisableFast+0x64>
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3318      	adds	r3, #24
 800169a:	4619      	mov	r1, r3
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LL_TIM_OC_DisableFast+0x9c>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	440b      	add	r3, r1
 80016a4:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	4908      	ldr	r1, [pc, #32]	; (80016d0 <LL_TIM_OC_DisableFast+0xa0>)
 80016ae:	5ccb      	ldrb	r3, [r1, r3]
 80016b0:	4619      	mov	r1, r3
 80016b2:	2304      	movs	r3, #4
 80016b4:	408b      	lsls	r3, r1
 80016b6:	43db      	mvns	r3, r3
 80016b8:	401a      	ands	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	601a      	str	r2, [r3, #0]
}
 80016be:	bf00      	nop
 80016c0:	3714      	adds	r7, #20
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	08004660 	.word	0x08004660
 80016d0:	0800466c 	.word	0x0800466c

080016d4 <LL_TIM_SetClockSource>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80016e6:	f023 0307 	bic.w	r3, r3, #7
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	609a      	str	r2, [r3, #8]
}
 80016f2:	bf00      	nop
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_TIM_SetTriggerOutput>:
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
 8001706:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	605a      	str	r2, [r3, #4]
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_TIM_DisableMasterSlaveMode>:
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	609a      	str	r2, [r3, #8]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f043 0201 	orr.w	r2, r3, #1
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	60da      	str	r2, [r3, #12]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <MX_TIM2_Init>:
void add_TIM3_Init(void);
/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08e      	sub	sp, #56	; 0x38
 8001768:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800176a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2220      	movs	r2, #32
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f000 fecf 	bl	8002524 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff ff1a 	bl	80015c0 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800178c:	f7ff fe8e 	bl	80014ac <__NVIC_GetPriorityGrouping>
 8001790:	4603      	mov	r3, r0
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fede 	bl	8001558 <NVIC_EncodePriority>
 800179c:	4603      	mov	r3, r0
 800179e:	4619      	mov	r1, r3
 80017a0:	201c      	movs	r0, #28
 80017a2:	f7ff feaf 	bl	8001504 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80017a6:	201c      	movs	r0, #28
 80017a8:	f7ff fe8e 	bl	80014c8 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 80017ac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80017b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 1;
 80017b6:	2301      	movs	r3, #1
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80017be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017c2:	4619      	mov	r1, r3
 80017c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017c8:	f000 fad2 	bl	8001d70 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 80017cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017d0:	f7ff ff1e 	bl	8001610 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80017d4:	2100      	movs	r1, #0
 80017d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017da:	f7ff ff7b 	bl	80016d4 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 80017de:	2310      	movs	r3, #16
 80017e0:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80017f2:	1d3b      	adds	r3, r7, #4
 80017f4:	461a      	mov	r2, r3
 80017f6:	2101      	movs	r1, #1
 80017f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80017fc:	f000 fb2a 	bl	8001e54 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8001800:	2101      	movs	r1, #1
 8001802:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001806:	f7ff ff13 	bl	8001630 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 800180a:	2100      	movs	r1, #0
 800180c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001810:	f7ff ff75 	bl	80016fe <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8001814:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001818:	f7ff ff84 	bl	8001724 <LL_TIM_DisableMasterSlaveMode>

  add_TIM2_Init();
 800181c:	f000 f862 	bl	80018e4 <add_TIM2_Init>
}
 8001820:	bf00      	nop
 8001822:	3738      	adds	r7, #56	; 0x38
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08e      	sub	sp, #56	; 0x38
 800182c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800182e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800183e:	1d3b      	adds	r3, r7, #4
 8001840:	2220      	movs	r2, #32
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f000 fe6d 	bl	8002524 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800184a:	2002      	movs	r0, #2
 800184c:	f7ff feb8 	bl	80015c0 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001850:	f7ff fe2c 	bl	80014ac <__NVIC_GetPriorityGrouping>
 8001854:	4603      	mov	r3, r0
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fe7c 	bl	8001558 <NVIC_EncodePriority>
 8001860:	4603      	mov	r3, r0
 8001862:	4619      	mov	r1, r3
 8001864:	201d      	movs	r0, #29
 8001866:	f7ff fe4d 	bl	8001504 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 800186a:	201d      	movs	r0, #29
 800186c:	f7ff fe2c 	bl	80014c8 <__NVIC_EnableIRQ>

  TIM_InitStruct.Prescaler = 8000;
 8001870:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8001874:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001876:	2300      	movs	r3, #0
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 500;
 800187a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001880:	2300      	movs	r3, #0
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	4815      	ldr	r0, [pc, #84]	; (80018e0 <MX_TIM3_Init+0xb8>)
 800188c:	f000 fa70 	bl	8001d70 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8001890:	4813      	ldr	r0, [pc, #76]	; (80018e0 <MX_TIM3_Init+0xb8>)
 8001892:	f7ff febd 	bl	8001610 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001896:	2100      	movs	r1, #0
 8001898:	4811      	ldr	r0, [pc, #68]	; (80018e0 <MX_TIM3_Init+0xb8>)
 800189a:	f7ff ff1b 	bl	80016d4 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 800189e:	2310      	movs	r3, #16
 80018a0:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	461a      	mov	r2, r3
 80018b6:	2101      	movs	r1, #1
 80018b8:	4809      	ldr	r0, [pc, #36]	; (80018e0 <MX_TIM3_Init+0xb8>)
 80018ba:	f000 facb 	bl	8001e54 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80018be:	2101      	movs	r1, #1
 80018c0:	4807      	ldr	r0, [pc, #28]	; (80018e0 <MX_TIM3_Init+0xb8>)
 80018c2:	f7ff feb5 	bl	8001630 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80018c6:	2100      	movs	r1, #0
 80018c8:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_TIM3_Init+0xb8>)
 80018ca:	f7ff ff18 	bl	80016fe <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80018ce:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_TIM3_Init+0xb8>)
 80018d0:	f7ff ff28 	bl	8001724 <LL_TIM_DisableMasterSlaveMode>

  add_TIM3_Init();
 80018d4:	f000 f812 	bl	80018fc <add_TIM3_Init>
}
 80018d8:	bf00      	nop
 80018da:	3738      	adds	r7, #56	; 0x38
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	40000400 	.word	0x40000400

080018e4 <add_TIM2_Init>:

/* USER CODE BEGIN 1 */
void add_TIM2_Init(void){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM2);
 80018e8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018ec:	f7ff ff2a 	bl	8001744 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM2);
 80018f0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80018f4:	f7ff fe7c 	bl	80015f0 <LL_TIM_EnableCounter>
}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}

080018fc <add_TIM3_Init>:

void add_TIM3_Init(void){
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	LL_TIM_EnableIT_UPDATE(TIM3);
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <add_TIM3_Init+0x14>)
 8001902:	f7ff ff1f 	bl	8001744 <LL_TIM_EnableIT_UPDATE>
	LL_TIM_EnableCounter(TIM3);
 8001906:	4802      	ldr	r0, [pc, #8]	; (8001910 <add_TIM3_Init+0x14>)
 8001908:	f7ff fe72 	bl	80015f0 <LL_TIM_EnableCounter>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40000400 	.word	0x40000400

08001914 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800194c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001918:	480d      	ldr	r0, [pc, #52]	; (8001950 <LoopForever+0x6>)
  ldr r1, =_edata
 800191a:	490e      	ldr	r1, [pc, #56]	; (8001954 <LoopForever+0xa>)
  ldr r2, =_sidata
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <LoopForever+0xe>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a0b      	ldr	r2, [pc, #44]	; (800195c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001930:	4c0b      	ldr	r4, [pc, #44]	; (8001960 <LoopForever+0x16>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800193e:	f7ff fda3 	bl	8001488 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001942:	f000 fdab 	bl	800249c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001946:	f7ff fc0d 	bl	8001164 <main>

0800194a <LoopForever>:

LoopForever:
    b LoopForever
 800194a:	e7fe      	b.n	800194a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800194c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001954:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001958:	080048e0 	.word	0x080048e0
  ldr r2, =_sbss
 800195c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001960:	20000268 	.word	0x20000268

08001964 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001964:	e7fe      	b.n	8001964 <ADC1_2_IRQHandler>

08001966 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001966:	b480      	push	{r7}
 8001968:	b089      	sub	sp, #36	; 0x24
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	fa93 f3a3 	rbit	r3, r3
 8001980:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	fab3 f383 	clz	r3, r3
 8001988:	b2db      	uxtb	r3, r3
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2103      	movs	r1, #3
 800198e:	fa01 f303 	lsl.w	r3, r1, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	401a      	ands	r2, r3
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	61bb      	str	r3, [r7, #24]
  return result;
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	fab3 f383 	clz	r3, r3
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	005b      	lsls	r3, r3, #1
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	431a      	orrs	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	601a      	str	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	3724      	adds	r7, #36	; 0x24
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b085      	sub	sp, #20
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	401a      	ands	r2, r3
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	431a      	orrs	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	605a      	str	r2, [r3, #4]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	613b      	str	r3, [r7, #16]
  return result;
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	401a      	ands	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	fa93 f3a3 	rbit	r3, r3
 8001a2e:	61bb      	str	r3, [r7, #24]
  return result;
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	fab3 f383 	clz	r3, r3
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	431a      	orrs	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8001a46:	bf00      	nop
 8001a48:	3724      	adds	r7, #36	; 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b089      	sub	sp, #36	; 0x24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa93 f3a3 	rbit	r3, r3
 8001a6c:	613b      	str	r3, [r7, #16]
  return result;
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	fab3 f383 	clz	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2103      	movs	r1, #3
 8001a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	401a      	ands	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	61bb      	str	r3, [r7, #24]
  return result;
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	60da      	str	r2, [r3, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3724      	adds	r7, #36	; 0x24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	; 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6a1a      	ldr	r2, [r3, #32]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	613b      	str	r3, [r7, #16]
  return result;
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	fab3 f383 	clz	r3, r3
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	401a      	ands	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	fa93 f3a3 	rbit	r3, r3
 8001aea:	61bb      	str	r3, [r7, #24]
  return result;
 8001aec:	69bb      	ldr	r3, [r7, #24]
 8001aee:	fab3 f383 	clz	r3, r3
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	6879      	ldr	r1, [r7, #4]
 8001af8:	fa01 f303 	lsl.w	r3, r1, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001b02:	bf00      	nop
 8001b04:	3724      	adds	r7, #36	; 0x24
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	b089      	sub	sp, #36	; 0x24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	0a1b      	lsrs	r3, r3, #8
 8001b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	613b      	str	r3, [r7, #16]
  return result;
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	210f      	movs	r1, #15
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	401a      	ands	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	0a1b      	lsrs	r3, r3, #8
 8001b44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa93 f3a3 	rbit	r3, r3
 8001b4c:	61bb      	str	r3, [r7, #24]
  return result;
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	fab3 f383 	clz	r3, r3
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8001b64:	bf00      	nop
 8001b66:	3724      	adds	r7, #36	; 0x24
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	613b      	str	r3, [r7, #16]
  return result;
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	fab3 f383 	clz	r3, r3
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001b92:	e051      	b.n	8001c38 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d043      	beq.n	8001c32 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d003      	beq.n	8001bba <LL_GPIO_Init+0x4a>
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d10e      	bne.n	8001bd8 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	69b9      	ldr	r1, [r7, #24]
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ff16 	bl	80019f4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	6819      	ldr	r1, [r3, #0]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fef6 	bl	80019c4 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ff36 	bl	8001a52 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d11a      	bne.n	8001c24 <LL_GPIO_Init+0xb4>
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	fa93 f3a3 	rbit	r3, r3
 8001bf8:	60bb      	str	r3, [r7, #8]
  return result;
 8001bfa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b07      	cmp	r3, #7
 8001c04:	d807      	bhi.n	8001c16 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	695b      	ldr	r3, [r3, #20]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	69b9      	ldr	r1, [r7, #24]
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7ff ff4e 	bl	8001ab0 <LL_GPIO_SetAFPin_0_7>
 8001c14:	e006      	b.n	8001c24 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	69b9      	ldr	r1, [r7, #24]
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7ff ff75 	bl	8001b0e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	69b9      	ldr	r1, [r7, #24]
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff fe9a 	bl	8001966 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	3301      	adds	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1a6      	bne.n	8001b94 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	615a      	str	r2, [r3, #20]
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a2f      	ldr	r2, [pc, #188]	; (8001e40 <LL_TIM_Init+0xd0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d007      	beq.n	8001d98 <LL_TIM_Init+0x28>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8e:	d003      	beq.n	8001d98 <LL_TIM_Init+0x28>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a2c      	ldr	r2, [pc, #176]	; (8001e44 <LL_TIM_Init+0xd4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d106      	bne.n	8001da6 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a25      	ldr	r2, [pc, #148]	; (8001e40 <LL_TIM_Init+0xd0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <LL_TIM_Init+0x66>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d00f      	beq.n	8001dd6 <LL_TIM_Init+0x66>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <LL_TIM_Init+0xd4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00b      	beq.n	8001dd6 <LL_TIM_Init+0x66>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <LL_TIM_Init+0xd8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <LL_TIM_Init+0x66>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a20      	ldr	r2, [pc, #128]	; (8001e4c <LL_TIM_Init+0xdc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d003      	beq.n	8001dd6 <LL_TIM_Init+0x66>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1f      	ldr	r2, [pc, #124]	; (8001e50 <LL_TIM_Init+0xe0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d106      	bne.n	8001de4 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4619      	mov	r1, r3
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff3b 	bl	8001c6c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff27 	bl	8001c50 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <LL_TIM_Init+0xd0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00b      	beq.n	8001e22 <LL_TIM_Init+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <LL_TIM_Init+0xd8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <LL_TIM_Init+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <LL_TIM_Init+0xdc>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d003      	beq.n	8001e22 <LL_TIM_Init+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a0c      	ldr	r2, [pc, #48]	; (8001e50 <LL_TIM_Init+0xe0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d105      	bne.n	8001e2e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	4619      	mov	r1, r3
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff2d 	bl	8001c88 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff8e 	bl	8001d50 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40000400 	.word	0x40000400
 8001e48:	40014000 	.word	0x40014000
 8001e4c:	40014400 	.word	0x40014400
 8001e50:	40014800 	.word	0x40014800

08001e54 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6a:	d01f      	beq.n	8001eac <LL_TIM_OC_Init+0x58>
 8001e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e70:	d804      	bhi.n	8001e7c <LL_TIM_OC_Init+0x28>
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d00c      	beq.n	8001e90 <LL_TIM_OC_Init+0x3c>
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d011      	beq.n	8001e9e <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001e7a:	e033      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d022      	beq.n	8001ec8 <LL_TIM_OC_Init+0x74>
 8001e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e86:	d026      	beq.n	8001ed6 <LL_TIM_OC_Init+0x82>
 8001e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8c:	d015      	beq.n	8001eba <LL_TIM_OC_Init+0x66>
      break;
 8001e8e:	e029      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f82c 	bl	8001ef0 <OC1Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8001e9c:	e022      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f89f 	bl	8001fe4 <OC2Config>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8001eaa:	e01b      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f916 	bl	80020e0 <OC3Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8001eb8:	e014      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f98d 	bl	80021dc <OC4Config>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8001ec6:	e00d      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f9ec 	bl	80022a8 <OC5Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8001ed4:	e006      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fa43 	bl	8002364 <OC6Config>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8001ee2:	bf00      	nop
  }

  return result;
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f023 0201 	bic.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f023 0202 	bic.w	r2, r3, #2
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f023 0201 	bic.w	r2, r3, #1
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <OC1Config+0xe4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00b      	beq.n	8001f6e <OC1Config+0x7e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <OC1Config+0xe8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <OC1Config+0x7e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <OC1Config+0xec>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <OC1Config+0x7e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <OC1Config+0xf0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d11e      	bne.n	8001fac <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f023 0208 	bic.w	r2, r3, #8
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f023 0204 	bic.w	r2, r3, #4
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fe70 	bl	8001ca4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40014000 	.word	0x40014000
 8001fdc:	40014400 	.word	0x40014400
 8001fe0:	40014800 	.word	0x40014800

08001fe4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	f023 0210 	bic.w	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	0212      	lsls	r2, r2, #8
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f023 0220 	bic.w	r2, r3, #32
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f023 0210 	bic.w	r2, r3, #16
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <OC2Config+0xec>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00b      	beq.n	8002068 <OC2Config+0x84>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <OC2Config+0xf0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <OC2Config+0x84>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <OC2Config+0xf4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <OC2Config+0x84>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <OC2Config+0xf8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d11f      	bne.n	80020a8 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	019b      	lsls	r3, r3, #6
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	019b      	lsls	r3, r3, #6
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fe00 	bl	8001cc0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40014000 	.word	0x40014000
 80020d8:	40014400 	.word	0x40014400
 80020dc:	40014800 	.word	0x40014800

080020e0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a21      	ldr	r2, [pc, #132]	; (80021cc <OC3Config+0xec>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00b      	beq.n	8002162 <OC3Config+0x82>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <OC3Config+0xf0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <OC3Config+0x82>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <OC3Config+0xf4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d003      	beq.n	8002162 <OC3Config+0x82>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <OC3Config+0xf8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11f      	bne.n	80021a2 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	029b      	lsls	r3, r3, #10
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	029b      	lsls	r3, r3, #10
 800217e:	4313      	orrs	r3, r2
 8002180:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	015b      	lsls	r3, r3, #5
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fd91 	bl	8001cdc <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40012c00 	.word	0x40012c00
 80021d0:	40014000 	.word	0x40014000
 80021d4:	40014400 	.word	0x40014400
 80021d8:	40014800 	.word	0x40014800

080021dc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	0212      	lsls	r2, r2, #8
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	031b      	lsls	r3, r3, #12
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	031b      	lsls	r3, r3, #12
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a15      	ldr	r2, [pc, #84]	; (8002298 <OC4Config+0xbc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00b      	beq.n	8002260 <OC4Config+0x84>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a14      	ldr	r2, [pc, #80]	; (800229c <OC4Config+0xc0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d007      	beq.n	8002260 <OC4Config+0x84>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <OC4Config+0xc4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <OC4Config+0x84>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <OC4Config+0xc8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d107      	bne.n	8002270 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	019b      	lsls	r3, r3, #6
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fd38 	bl	8001cf8 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40012c00 	.word	0x40012c00
 800229c:	40014000 	.word	0x40014000
 80022a0:	40014400 	.word	0x40014400
 80022a4:	40014800 	.word	0x40014800

080022a8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a15      	ldr	r2, [pc, #84]	; (8002354 <OC5Config+0xac>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00b      	beq.n	800231c <OC5Config+0x74>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <OC5Config+0xb0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <OC5Config+0x74>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a13      	ldr	r2, [pc, #76]	; (800235c <OC5Config+0xb4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <OC5Config+0x74>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <OC5Config+0xb8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d109      	bne.n	8002330 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff fce9 	bl	8001d14 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40014000 	.word	0x40014000
 800235c:	40014400 	.word	0x40014400
 8002360:	40014800 	.word	0x40014800

08002364 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	0212      	lsls	r2, r2, #8
 8002396:	4313      	orrs	r3, r2
 8002398:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	051b      	lsls	r3, r3, #20
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	051b      	lsls	r3, r3, #20
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <OC6Config+0xac>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00b      	beq.n	80023da <OC6Config+0x76>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a13      	ldr	r2, [pc, #76]	; (8002414 <OC6Config+0xb0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <OC6Config+0x76>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a12      	ldr	r2, [pc, #72]	; (8002418 <OC6Config+0xb4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <OC6Config+0x76>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <OC6Config+0xb8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d109      	bne.n	80023ee <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	029b      	lsls	r3, r3, #10
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff fc9a 	bl	8001d34 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40012c00 	.word	0x40012c00
 8002414:	40014000 	.word	0x40014000
 8002418:	40014400 	.word	0x40014400
 800241c:	40014800 	.word	0x40014800

08002420 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002432:	4a07      	ldr	r2, [pc, #28]	; (8002450 <LL_InitTick+0x30>)
 8002434:	3b01      	subs	r3, #1
 8002436:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <LL_InitTick+0x30>)
 800243a:	2200      	movs	r2, #0
 800243c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <LL_InitTick+0x30>)
 8002440:	2205      	movs	r2, #5
 8002442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000e010 	.word	0xe000e010

08002454 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800245c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ffdd 	bl	8002420 <LL_InitTick>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002478:	4a04      	ldr	r2, [pc, #16]	; (800248c <LL_SetSystemCoreClock+0x1c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	20000038 	.word	0x20000038

08002490 <__errno>:
 8002490:	4b01      	ldr	r3, [pc, #4]	; (8002498 <__errno+0x8>)
 8002492:	6818      	ldr	r0, [r3, #0]
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	2000003c 	.word	0x2000003c

0800249c <__libc_init_array>:
 800249c:	b570      	push	{r4, r5, r6, lr}
 800249e:	4e0d      	ldr	r6, [pc, #52]	; (80024d4 <__libc_init_array+0x38>)
 80024a0:	4c0d      	ldr	r4, [pc, #52]	; (80024d8 <__libc_init_array+0x3c>)
 80024a2:	1ba4      	subs	r4, r4, r6
 80024a4:	10a4      	asrs	r4, r4, #2
 80024a6:	2500      	movs	r5, #0
 80024a8:	42a5      	cmp	r5, r4
 80024aa:	d109      	bne.n	80024c0 <__libc_init_array+0x24>
 80024ac:	4e0b      	ldr	r6, [pc, #44]	; (80024dc <__libc_init_array+0x40>)
 80024ae:	4c0c      	ldr	r4, [pc, #48]	; (80024e0 <__libc_init_array+0x44>)
 80024b0:	f002 f86c 	bl	800458c <_init>
 80024b4:	1ba4      	subs	r4, r4, r6
 80024b6:	10a4      	asrs	r4, r4, #2
 80024b8:	2500      	movs	r5, #0
 80024ba:	42a5      	cmp	r5, r4
 80024bc:	d105      	bne.n	80024ca <__libc_init_array+0x2e>
 80024be:	bd70      	pop	{r4, r5, r6, pc}
 80024c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024c4:	4798      	blx	r3
 80024c6:	3501      	adds	r5, #1
 80024c8:	e7ee      	b.n	80024a8 <__libc_init_array+0xc>
 80024ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024ce:	4798      	blx	r3
 80024d0:	3501      	adds	r5, #1
 80024d2:	e7f2      	b.n	80024ba <__libc_init_array+0x1e>
 80024d4:	080048d8 	.word	0x080048d8
 80024d8:	080048d8 	.word	0x080048d8
 80024dc:	080048d8 	.word	0x080048d8
 80024e0:	080048dc 	.word	0x080048dc

080024e4 <__locale_ctype_ptr>:
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <__locale_ctype_ptr+0x14>)
 80024e6:	4a05      	ldr	r2, [pc, #20]	; (80024fc <__locale_ctype_ptr+0x18>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf08      	it	eq
 80024f0:	4613      	moveq	r3, r2
 80024f2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80024f6:	4770      	bx	lr
 80024f8:	2000003c 	.word	0x2000003c
 80024fc:	200000a0 	.word	0x200000a0

08002500 <__ascii_mbtowc>:
 8002500:	b082      	sub	sp, #8
 8002502:	b901      	cbnz	r1, 8002506 <__ascii_mbtowc+0x6>
 8002504:	a901      	add	r1, sp, #4
 8002506:	b142      	cbz	r2, 800251a <__ascii_mbtowc+0x1a>
 8002508:	b14b      	cbz	r3, 800251e <__ascii_mbtowc+0x1e>
 800250a:	7813      	ldrb	r3, [r2, #0]
 800250c:	600b      	str	r3, [r1, #0]
 800250e:	7812      	ldrb	r2, [r2, #0]
 8002510:	1c10      	adds	r0, r2, #0
 8002512:	bf18      	it	ne
 8002514:	2001      	movne	r0, #1
 8002516:	b002      	add	sp, #8
 8002518:	4770      	bx	lr
 800251a:	4610      	mov	r0, r2
 800251c:	e7fb      	b.n	8002516 <__ascii_mbtowc+0x16>
 800251e:	f06f 0001 	mvn.w	r0, #1
 8002522:	e7f8      	b.n	8002516 <__ascii_mbtowc+0x16>

08002524 <memset>:
 8002524:	4402      	add	r2, r0
 8002526:	4603      	mov	r3, r0
 8002528:	4293      	cmp	r3, r2
 800252a:	d100      	bne.n	800252e <memset+0xa>
 800252c:	4770      	bx	lr
 800252e:	f803 1b01 	strb.w	r1, [r3], #1
 8002532:	e7f9      	b.n	8002528 <memset+0x4>

08002534 <__cvt>:
 8002534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002538:	ec55 4b10 	vmov	r4, r5, d0
 800253c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800253e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002542:	2d00      	cmp	r5, #0
 8002544:	460e      	mov	r6, r1
 8002546:	4691      	mov	r9, r2
 8002548:	4619      	mov	r1, r3
 800254a:	bfb8      	it	lt
 800254c:	4622      	movlt	r2, r4
 800254e:	462b      	mov	r3, r5
 8002550:	f027 0720 	bic.w	r7, r7, #32
 8002554:	bfbb      	ittet	lt
 8002556:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800255a:	461d      	movlt	r5, r3
 800255c:	2300      	movge	r3, #0
 800255e:	232d      	movlt	r3, #45	; 0x2d
 8002560:	bfb8      	it	lt
 8002562:	4614      	movlt	r4, r2
 8002564:	2f46      	cmp	r7, #70	; 0x46
 8002566:	700b      	strb	r3, [r1, #0]
 8002568:	d004      	beq.n	8002574 <__cvt+0x40>
 800256a:	2f45      	cmp	r7, #69	; 0x45
 800256c:	d100      	bne.n	8002570 <__cvt+0x3c>
 800256e:	3601      	adds	r6, #1
 8002570:	2102      	movs	r1, #2
 8002572:	e000      	b.n	8002576 <__cvt+0x42>
 8002574:	2103      	movs	r1, #3
 8002576:	ab03      	add	r3, sp, #12
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	ab02      	add	r3, sp, #8
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	4632      	mov	r2, r6
 8002580:	4653      	mov	r3, sl
 8002582:	ec45 4b10 	vmov	d0, r4, r5
 8002586:	f000 fceb 	bl	8002f60 <_dtoa_r>
 800258a:	2f47      	cmp	r7, #71	; 0x47
 800258c:	4680      	mov	r8, r0
 800258e:	d102      	bne.n	8002596 <__cvt+0x62>
 8002590:	f019 0f01 	tst.w	r9, #1
 8002594:	d026      	beq.n	80025e4 <__cvt+0xb0>
 8002596:	2f46      	cmp	r7, #70	; 0x46
 8002598:	eb08 0906 	add.w	r9, r8, r6
 800259c:	d111      	bne.n	80025c2 <__cvt+0x8e>
 800259e:	f898 3000 	ldrb.w	r3, [r8]
 80025a2:	2b30      	cmp	r3, #48	; 0x30
 80025a4:	d10a      	bne.n	80025bc <__cvt+0x88>
 80025a6:	2200      	movs	r2, #0
 80025a8:	2300      	movs	r3, #0
 80025aa:	4620      	mov	r0, r4
 80025ac:	4629      	mov	r1, r5
 80025ae:	f7fe fa8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80025b2:	b918      	cbnz	r0, 80025bc <__cvt+0x88>
 80025b4:	f1c6 0601 	rsb	r6, r6, #1
 80025b8:	f8ca 6000 	str.w	r6, [sl]
 80025bc:	f8da 3000 	ldr.w	r3, [sl]
 80025c0:	4499      	add	r9, r3
 80025c2:	2200      	movs	r2, #0
 80025c4:	2300      	movs	r3, #0
 80025c6:	4620      	mov	r0, r4
 80025c8:	4629      	mov	r1, r5
 80025ca:	f7fe fa7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80025ce:	b938      	cbnz	r0, 80025e0 <__cvt+0xac>
 80025d0:	2230      	movs	r2, #48	; 0x30
 80025d2:	9b03      	ldr	r3, [sp, #12]
 80025d4:	454b      	cmp	r3, r9
 80025d6:	d205      	bcs.n	80025e4 <__cvt+0xb0>
 80025d8:	1c59      	adds	r1, r3, #1
 80025da:	9103      	str	r1, [sp, #12]
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e7f8      	b.n	80025d2 <__cvt+0x9e>
 80025e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80025e4:	9b03      	ldr	r3, [sp, #12]
 80025e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80025e8:	eba3 0308 	sub.w	r3, r3, r8
 80025ec:	4640      	mov	r0, r8
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	b004      	add	sp, #16
 80025f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080025f6 <__exponent>:
 80025f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025f8:	2900      	cmp	r1, #0
 80025fa:	4604      	mov	r4, r0
 80025fc:	bfba      	itte	lt
 80025fe:	4249      	neglt	r1, r1
 8002600:	232d      	movlt	r3, #45	; 0x2d
 8002602:	232b      	movge	r3, #43	; 0x2b
 8002604:	2909      	cmp	r1, #9
 8002606:	f804 2b02 	strb.w	r2, [r4], #2
 800260a:	7043      	strb	r3, [r0, #1]
 800260c:	dd20      	ble.n	8002650 <__exponent+0x5a>
 800260e:	f10d 0307 	add.w	r3, sp, #7
 8002612:	461f      	mov	r7, r3
 8002614:	260a      	movs	r6, #10
 8002616:	fb91 f5f6 	sdiv	r5, r1, r6
 800261a:	fb06 1115 	mls	r1, r6, r5, r1
 800261e:	3130      	adds	r1, #48	; 0x30
 8002620:	2d09      	cmp	r5, #9
 8002622:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002626:	f103 32ff 	add.w	r2, r3, #4294967295
 800262a:	4629      	mov	r1, r5
 800262c:	dc09      	bgt.n	8002642 <__exponent+0x4c>
 800262e:	3130      	adds	r1, #48	; 0x30
 8002630:	3b02      	subs	r3, #2
 8002632:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002636:	42bb      	cmp	r3, r7
 8002638:	4622      	mov	r2, r4
 800263a:	d304      	bcc.n	8002646 <__exponent+0x50>
 800263c:	1a10      	subs	r0, r2, r0
 800263e:	b003      	add	sp, #12
 8002640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002642:	4613      	mov	r3, r2
 8002644:	e7e7      	b.n	8002616 <__exponent+0x20>
 8002646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800264a:	f804 2b01 	strb.w	r2, [r4], #1
 800264e:	e7f2      	b.n	8002636 <__exponent+0x40>
 8002650:	2330      	movs	r3, #48	; 0x30
 8002652:	4419      	add	r1, r3
 8002654:	7083      	strb	r3, [r0, #2]
 8002656:	1d02      	adds	r2, r0, #4
 8002658:	70c1      	strb	r1, [r0, #3]
 800265a:	e7ef      	b.n	800263c <__exponent+0x46>

0800265c <_printf_float>:
 800265c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002660:	b08d      	sub	sp, #52	; 0x34
 8002662:	460c      	mov	r4, r1
 8002664:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002668:	4616      	mov	r6, r2
 800266a:	461f      	mov	r7, r3
 800266c:	4605      	mov	r5, r0
 800266e:	f001 fa2f 	bl	8003ad0 <_localeconv_r>
 8002672:	6803      	ldr	r3, [r0, #0]
 8002674:	9304      	str	r3, [sp, #16]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd fdaa 	bl	80001d0 <strlen>
 800267c:	2300      	movs	r3, #0
 800267e:	930a      	str	r3, [sp, #40]	; 0x28
 8002680:	f8d8 3000 	ldr.w	r3, [r8]
 8002684:	9005      	str	r0, [sp, #20]
 8002686:	3307      	adds	r3, #7
 8002688:	f023 0307 	bic.w	r3, r3, #7
 800268c:	f103 0208 	add.w	r2, r3, #8
 8002690:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002694:	f8d4 b000 	ldr.w	fp, [r4]
 8002698:	f8c8 2000 	str.w	r2, [r8]
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80026a4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80026a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80026ac:	9307      	str	r3, [sp, #28]
 80026ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80026b2:	f04f 32ff 	mov.w	r2, #4294967295
 80026b6:	4ba7      	ldr	r3, [pc, #668]	; (8002954 <_printf_float+0x2f8>)
 80026b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80026bc:	f7fe fa36 	bl	8000b2c <__aeabi_dcmpun>
 80026c0:	bb70      	cbnz	r0, 8002720 <_printf_float+0xc4>
 80026c2:	f04f 32ff 	mov.w	r2, #4294967295
 80026c6:	4ba3      	ldr	r3, [pc, #652]	; (8002954 <_printf_float+0x2f8>)
 80026c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80026cc:	f7fe fa10 	bl	8000af0 <__aeabi_dcmple>
 80026d0:	bb30      	cbnz	r0, 8002720 <_printf_float+0xc4>
 80026d2:	2200      	movs	r2, #0
 80026d4:	2300      	movs	r3, #0
 80026d6:	4640      	mov	r0, r8
 80026d8:	4649      	mov	r1, r9
 80026da:	f7fe f9ff 	bl	8000adc <__aeabi_dcmplt>
 80026de:	b110      	cbz	r0, 80026e6 <_printf_float+0x8a>
 80026e0:	232d      	movs	r3, #45	; 0x2d
 80026e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026e6:	4a9c      	ldr	r2, [pc, #624]	; (8002958 <_printf_float+0x2fc>)
 80026e8:	4b9c      	ldr	r3, [pc, #624]	; (800295c <_printf_float+0x300>)
 80026ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80026ee:	bf8c      	ite	hi
 80026f0:	4690      	movhi	r8, r2
 80026f2:	4698      	movls	r8, r3
 80026f4:	2303      	movs	r3, #3
 80026f6:	f02b 0204 	bic.w	r2, fp, #4
 80026fa:	6123      	str	r3, [r4, #16]
 80026fc:	6022      	str	r2, [r4, #0]
 80026fe:	f04f 0900 	mov.w	r9, #0
 8002702:	9700      	str	r7, [sp, #0]
 8002704:	4633      	mov	r3, r6
 8002706:	aa0b      	add	r2, sp, #44	; 0x2c
 8002708:	4621      	mov	r1, r4
 800270a:	4628      	mov	r0, r5
 800270c:	f000 f9e6 	bl	8002adc <_printf_common>
 8002710:	3001      	adds	r0, #1
 8002712:	f040 808d 	bne.w	8002830 <_printf_float+0x1d4>
 8002716:	f04f 30ff 	mov.w	r0, #4294967295
 800271a:	b00d      	add	sp, #52	; 0x34
 800271c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002720:	4642      	mov	r2, r8
 8002722:	464b      	mov	r3, r9
 8002724:	4640      	mov	r0, r8
 8002726:	4649      	mov	r1, r9
 8002728:	f7fe fa00 	bl	8000b2c <__aeabi_dcmpun>
 800272c:	b110      	cbz	r0, 8002734 <_printf_float+0xd8>
 800272e:	4a8c      	ldr	r2, [pc, #560]	; (8002960 <_printf_float+0x304>)
 8002730:	4b8c      	ldr	r3, [pc, #560]	; (8002964 <_printf_float+0x308>)
 8002732:	e7da      	b.n	80026ea <_printf_float+0x8e>
 8002734:	6861      	ldr	r1, [r4, #4]
 8002736:	1c4b      	adds	r3, r1, #1
 8002738:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800273c:	a80a      	add	r0, sp, #40	; 0x28
 800273e:	d13e      	bne.n	80027be <_printf_float+0x162>
 8002740:	2306      	movs	r3, #6
 8002742:	6063      	str	r3, [r4, #4]
 8002744:	2300      	movs	r3, #0
 8002746:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800274a:	ab09      	add	r3, sp, #36	; 0x24
 800274c:	9300      	str	r3, [sp, #0]
 800274e:	ec49 8b10 	vmov	d0, r8, r9
 8002752:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002756:	6022      	str	r2, [r4, #0]
 8002758:	f8cd a004 	str.w	sl, [sp, #4]
 800275c:	6861      	ldr	r1, [r4, #4]
 800275e:	4628      	mov	r0, r5
 8002760:	f7ff fee8 	bl	8002534 <__cvt>
 8002764:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002768:	2b47      	cmp	r3, #71	; 0x47
 800276a:	4680      	mov	r8, r0
 800276c:	d109      	bne.n	8002782 <_printf_float+0x126>
 800276e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002770:	1cd8      	adds	r0, r3, #3
 8002772:	db02      	blt.n	800277a <_printf_float+0x11e>
 8002774:	6862      	ldr	r2, [r4, #4]
 8002776:	4293      	cmp	r3, r2
 8002778:	dd47      	ble.n	800280a <_printf_float+0x1ae>
 800277a:	f1aa 0a02 	sub.w	sl, sl, #2
 800277e:	fa5f fa8a 	uxtb.w	sl, sl
 8002782:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002786:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002788:	d824      	bhi.n	80027d4 <_printf_float+0x178>
 800278a:	3901      	subs	r1, #1
 800278c:	4652      	mov	r2, sl
 800278e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002792:	9109      	str	r1, [sp, #36]	; 0x24
 8002794:	f7ff ff2f 	bl	80025f6 <__exponent>
 8002798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800279a:	1813      	adds	r3, r2, r0
 800279c:	2a01      	cmp	r2, #1
 800279e:	4681      	mov	r9, r0
 80027a0:	6123      	str	r3, [r4, #16]
 80027a2:	dc02      	bgt.n	80027aa <_printf_float+0x14e>
 80027a4:	6822      	ldr	r2, [r4, #0]
 80027a6:	07d1      	lsls	r1, r2, #31
 80027a8:	d501      	bpl.n	80027ae <_printf_float+0x152>
 80027aa:	3301      	adds	r3, #1
 80027ac:	6123      	str	r3, [r4, #16]
 80027ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0a5      	beq.n	8002702 <_printf_float+0xa6>
 80027b6:	232d      	movs	r3, #45	; 0x2d
 80027b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027bc:	e7a1      	b.n	8002702 <_printf_float+0xa6>
 80027be:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80027c2:	f000 8177 	beq.w	8002ab4 <_printf_float+0x458>
 80027c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80027ca:	d1bb      	bne.n	8002744 <_printf_float+0xe8>
 80027cc:	2900      	cmp	r1, #0
 80027ce:	d1b9      	bne.n	8002744 <_printf_float+0xe8>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e7b6      	b.n	8002742 <_printf_float+0xe6>
 80027d4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80027d8:	d119      	bne.n	800280e <_printf_float+0x1b2>
 80027da:	2900      	cmp	r1, #0
 80027dc:	6863      	ldr	r3, [r4, #4]
 80027de:	dd0c      	ble.n	80027fa <_printf_float+0x19e>
 80027e0:	6121      	str	r1, [r4, #16]
 80027e2:	b913      	cbnz	r3, 80027ea <_printf_float+0x18e>
 80027e4:	6822      	ldr	r2, [r4, #0]
 80027e6:	07d2      	lsls	r2, r2, #31
 80027e8:	d502      	bpl.n	80027f0 <_printf_float+0x194>
 80027ea:	3301      	adds	r3, #1
 80027ec:	440b      	add	r3, r1
 80027ee:	6123      	str	r3, [r4, #16]
 80027f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80027f4:	f04f 0900 	mov.w	r9, #0
 80027f8:	e7d9      	b.n	80027ae <_printf_float+0x152>
 80027fa:	b913      	cbnz	r3, 8002802 <_printf_float+0x1a6>
 80027fc:	6822      	ldr	r2, [r4, #0]
 80027fe:	07d0      	lsls	r0, r2, #31
 8002800:	d501      	bpl.n	8002806 <_printf_float+0x1aa>
 8002802:	3302      	adds	r3, #2
 8002804:	e7f3      	b.n	80027ee <_printf_float+0x192>
 8002806:	2301      	movs	r3, #1
 8002808:	e7f1      	b.n	80027ee <_printf_float+0x192>
 800280a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800280e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002812:	4293      	cmp	r3, r2
 8002814:	db05      	blt.n	8002822 <_printf_float+0x1c6>
 8002816:	6822      	ldr	r2, [r4, #0]
 8002818:	6123      	str	r3, [r4, #16]
 800281a:	07d1      	lsls	r1, r2, #31
 800281c:	d5e8      	bpl.n	80027f0 <_printf_float+0x194>
 800281e:	3301      	adds	r3, #1
 8002820:	e7e5      	b.n	80027ee <_printf_float+0x192>
 8002822:	2b00      	cmp	r3, #0
 8002824:	bfd4      	ite	le
 8002826:	f1c3 0302 	rsble	r3, r3, #2
 800282a:	2301      	movgt	r3, #1
 800282c:	4413      	add	r3, r2
 800282e:	e7de      	b.n	80027ee <_printf_float+0x192>
 8002830:	6823      	ldr	r3, [r4, #0]
 8002832:	055a      	lsls	r2, r3, #21
 8002834:	d407      	bmi.n	8002846 <_printf_float+0x1ea>
 8002836:	6923      	ldr	r3, [r4, #16]
 8002838:	4642      	mov	r2, r8
 800283a:	4631      	mov	r1, r6
 800283c:	4628      	mov	r0, r5
 800283e:	47b8      	blx	r7
 8002840:	3001      	adds	r0, #1
 8002842:	d12b      	bne.n	800289c <_printf_float+0x240>
 8002844:	e767      	b.n	8002716 <_printf_float+0xba>
 8002846:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800284a:	f240 80dc 	bls.w	8002a06 <_printf_float+0x3aa>
 800284e:	2200      	movs	r2, #0
 8002850:	2300      	movs	r3, #0
 8002852:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002856:	f7fe f937 	bl	8000ac8 <__aeabi_dcmpeq>
 800285a:	2800      	cmp	r0, #0
 800285c:	d033      	beq.n	80028c6 <_printf_float+0x26a>
 800285e:	2301      	movs	r3, #1
 8002860:	4a41      	ldr	r2, [pc, #260]	; (8002968 <_printf_float+0x30c>)
 8002862:	4631      	mov	r1, r6
 8002864:	4628      	mov	r0, r5
 8002866:	47b8      	blx	r7
 8002868:	3001      	adds	r0, #1
 800286a:	f43f af54 	beq.w	8002716 <_printf_float+0xba>
 800286e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002872:	429a      	cmp	r2, r3
 8002874:	db02      	blt.n	800287c <_printf_float+0x220>
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	07d8      	lsls	r0, r3, #31
 800287a:	d50f      	bpl.n	800289c <_printf_float+0x240>
 800287c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002880:	4631      	mov	r1, r6
 8002882:	4628      	mov	r0, r5
 8002884:	47b8      	blx	r7
 8002886:	3001      	adds	r0, #1
 8002888:	f43f af45 	beq.w	8002716 <_printf_float+0xba>
 800288c:	f04f 0800 	mov.w	r8, #0
 8002890:	f104 091a 	add.w	r9, r4, #26
 8002894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002896:	3b01      	subs	r3, #1
 8002898:	4543      	cmp	r3, r8
 800289a:	dc09      	bgt.n	80028b0 <_printf_float+0x254>
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	079b      	lsls	r3, r3, #30
 80028a0:	f100 8103 	bmi.w	8002aaa <_printf_float+0x44e>
 80028a4:	68e0      	ldr	r0, [r4, #12]
 80028a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80028a8:	4298      	cmp	r0, r3
 80028aa:	bfb8      	it	lt
 80028ac:	4618      	movlt	r0, r3
 80028ae:	e734      	b.n	800271a <_printf_float+0xbe>
 80028b0:	2301      	movs	r3, #1
 80028b2:	464a      	mov	r2, r9
 80028b4:	4631      	mov	r1, r6
 80028b6:	4628      	mov	r0, r5
 80028b8:	47b8      	blx	r7
 80028ba:	3001      	adds	r0, #1
 80028bc:	f43f af2b 	beq.w	8002716 <_printf_float+0xba>
 80028c0:	f108 0801 	add.w	r8, r8, #1
 80028c4:	e7e6      	b.n	8002894 <_printf_float+0x238>
 80028c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	dc2b      	bgt.n	8002924 <_printf_float+0x2c8>
 80028cc:	2301      	movs	r3, #1
 80028ce:	4a26      	ldr	r2, [pc, #152]	; (8002968 <_printf_float+0x30c>)
 80028d0:	4631      	mov	r1, r6
 80028d2:	4628      	mov	r0, r5
 80028d4:	47b8      	blx	r7
 80028d6:	3001      	adds	r0, #1
 80028d8:	f43f af1d 	beq.w	8002716 <_printf_float+0xba>
 80028dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028de:	b923      	cbnz	r3, 80028ea <_printf_float+0x28e>
 80028e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028e2:	b913      	cbnz	r3, 80028ea <_printf_float+0x28e>
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	07d9      	lsls	r1, r3, #31
 80028e8:	d5d8      	bpl.n	800289c <_printf_float+0x240>
 80028ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80028ee:	4631      	mov	r1, r6
 80028f0:	4628      	mov	r0, r5
 80028f2:	47b8      	blx	r7
 80028f4:	3001      	adds	r0, #1
 80028f6:	f43f af0e 	beq.w	8002716 <_printf_float+0xba>
 80028fa:	f04f 0900 	mov.w	r9, #0
 80028fe:	f104 0a1a 	add.w	sl, r4, #26
 8002902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002904:	425b      	negs	r3, r3
 8002906:	454b      	cmp	r3, r9
 8002908:	dc01      	bgt.n	800290e <_printf_float+0x2b2>
 800290a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800290c:	e794      	b.n	8002838 <_printf_float+0x1dc>
 800290e:	2301      	movs	r3, #1
 8002910:	4652      	mov	r2, sl
 8002912:	4631      	mov	r1, r6
 8002914:	4628      	mov	r0, r5
 8002916:	47b8      	blx	r7
 8002918:	3001      	adds	r0, #1
 800291a:	f43f aefc 	beq.w	8002716 <_printf_float+0xba>
 800291e:	f109 0901 	add.w	r9, r9, #1
 8002922:	e7ee      	b.n	8002902 <_printf_float+0x2a6>
 8002924:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002928:	429a      	cmp	r2, r3
 800292a:	bfa8      	it	ge
 800292c:	461a      	movge	r2, r3
 800292e:	2a00      	cmp	r2, #0
 8002930:	4691      	mov	r9, r2
 8002932:	dd07      	ble.n	8002944 <_printf_float+0x2e8>
 8002934:	4613      	mov	r3, r2
 8002936:	4631      	mov	r1, r6
 8002938:	4642      	mov	r2, r8
 800293a:	4628      	mov	r0, r5
 800293c:	47b8      	blx	r7
 800293e:	3001      	adds	r0, #1
 8002940:	f43f aee9 	beq.w	8002716 <_printf_float+0xba>
 8002944:	f104 031a 	add.w	r3, r4, #26
 8002948:	f04f 0b00 	mov.w	fp, #0
 800294c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002950:	9306      	str	r3, [sp, #24]
 8002952:	e015      	b.n	8002980 <_printf_float+0x324>
 8002954:	7fefffff 	.word	0x7fefffff
 8002958:	08004683 	.word	0x08004683
 800295c:	0800467f 	.word	0x0800467f
 8002960:	0800468b 	.word	0x0800468b
 8002964:	08004687 	.word	0x08004687
 8002968:	0800468f 	.word	0x0800468f
 800296c:	2301      	movs	r3, #1
 800296e:	9a06      	ldr	r2, [sp, #24]
 8002970:	4631      	mov	r1, r6
 8002972:	4628      	mov	r0, r5
 8002974:	47b8      	blx	r7
 8002976:	3001      	adds	r0, #1
 8002978:	f43f aecd 	beq.w	8002716 <_printf_float+0xba>
 800297c:	f10b 0b01 	add.w	fp, fp, #1
 8002980:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002984:	ebaa 0309 	sub.w	r3, sl, r9
 8002988:	455b      	cmp	r3, fp
 800298a:	dcef      	bgt.n	800296c <_printf_float+0x310>
 800298c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002990:	429a      	cmp	r2, r3
 8002992:	44d0      	add	r8, sl
 8002994:	db15      	blt.n	80029c2 <_printf_float+0x366>
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	07da      	lsls	r2, r3, #31
 800299a:	d412      	bmi.n	80029c2 <_printf_float+0x366>
 800299c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800299e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80029a0:	eba3 020a 	sub.w	r2, r3, sl
 80029a4:	eba3 0a01 	sub.w	sl, r3, r1
 80029a8:	4592      	cmp	sl, r2
 80029aa:	bfa8      	it	ge
 80029ac:	4692      	movge	sl, r2
 80029ae:	f1ba 0f00 	cmp.w	sl, #0
 80029b2:	dc0e      	bgt.n	80029d2 <_printf_float+0x376>
 80029b4:	f04f 0800 	mov.w	r8, #0
 80029b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80029bc:	f104 091a 	add.w	r9, r4, #26
 80029c0:	e019      	b.n	80029f6 <_printf_float+0x39a>
 80029c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80029c6:	4631      	mov	r1, r6
 80029c8:	4628      	mov	r0, r5
 80029ca:	47b8      	blx	r7
 80029cc:	3001      	adds	r0, #1
 80029ce:	d1e5      	bne.n	800299c <_printf_float+0x340>
 80029d0:	e6a1      	b.n	8002716 <_printf_float+0xba>
 80029d2:	4653      	mov	r3, sl
 80029d4:	4642      	mov	r2, r8
 80029d6:	4631      	mov	r1, r6
 80029d8:	4628      	mov	r0, r5
 80029da:	47b8      	blx	r7
 80029dc:	3001      	adds	r0, #1
 80029de:	d1e9      	bne.n	80029b4 <_printf_float+0x358>
 80029e0:	e699      	b.n	8002716 <_printf_float+0xba>
 80029e2:	2301      	movs	r3, #1
 80029e4:	464a      	mov	r2, r9
 80029e6:	4631      	mov	r1, r6
 80029e8:	4628      	mov	r0, r5
 80029ea:	47b8      	blx	r7
 80029ec:	3001      	adds	r0, #1
 80029ee:	f43f ae92 	beq.w	8002716 <_printf_float+0xba>
 80029f2:	f108 0801 	add.w	r8, r8, #1
 80029f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	eba3 030a 	sub.w	r3, r3, sl
 8002a00:	4543      	cmp	r3, r8
 8002a02:	dcee      	bgt.n	80029e2 <_printf_float+0x386>
 8002a04:	e74a      	b.n	800289c <_printf_float+0x240>
 8002a06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a08:	2a01      	cmp	r2, #1
 8002a0a:	dc01      	bgt.n	8002a10 <_printf_float+0x3b4>
 8002a0c:	07db      	lsls	r3, r3, #31
 8002a0e:	d53a      	bpl.n	8002a86 <_printf_float+0x42a>
 8002a10:	2301      	movs	r3, #1
 8002a12:	4642      	mov	r2, r8
 8002a14:	4631      	mov	r1, r6
 8002a16:	4628      	mov	r0, r5
 8002a18:	47b8      	blx	r7
 8002a1a:	3001      	adds	r0, #1
 8002a1c:	f43f ae7b 	beq.w	8002716 <_printf_float+0xba>
 8002a20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002a24:	4631      	mov	r1, r6
 8002a26:	4628      	mov	r0, r5
 8002a28:	47b8      	blx	r7
 8002a2a:	3001      	adds	r0, #1
 8002a2c:	f108 0801 	add.w	r8, r8, #1
 8002a30:	f43f ae71 	beq.w	8002716 <_printf_float+0xba>
 8002a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a36:	2200      	movs	r2, #0
 8002a38:	f103 3aff 	add.w	sl, r3, #4294967295
 8002a3c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002a40:	2300      	movs	r3, #0
 8002a42:	f7fe f841 	bl	8000ac8 <__aeabi_dcmpeq>
 8002a46:	b9c8      	cbnz	r0, 8002a7c <_printf_float+0x420>
 8002a48:	4653      	mov	r3, sl
 8002a4a:	4642      	mov	r2, r8
 8002a4c:	4631      	mov	r1, r6
 8002a4e:	4628      	mov	r0, r5
 8002a50:	47b8      	blx	r7
 8002a52:	3001      	adds	r0, #1
 8002a54:	d10e      	bne.n	8002a74 <_printf_float+0x418>
 8002a56:	e65e      	b.n	8002716 <_printf_float+0xba>
 8002a58:	2301      	movs	r3, #1
 8002a5a:	4652      	mov	r2, sl
 8002a5c:	4631      	mov	r1, r6
 8002a5e:	4628      	mov	r0, r5
 8002a60:	47b8      	blx	r7
 8002a62:	3001      	adds	r0, #1
 8002a64:	f43f ae57 	beq.w	8002716 <_printf_float+0xba>
 8002a68:	f108 0801 	add.w	r8, r8, #1
 8002a6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	4543      	cmp	r3, r8
 8002a72:	dcf1      	bgt.n	8002a58 <_printf_float+0x3fc>
 8002a74:	464b      	mov	r3, r9
 8002a76:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002a7a:	e6de      	b.n	800283a <_printf_float+0x1de>
 8002a7c:	f04f 0800 	mov.w	r8, #0
 8002a80:	f104 0a1a 	add.w	sl, r4, #26
 8002a84:	e7f2      	b.n	8002a6c <_printf_float+0x410>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e7df      	b.n	8002a4a <_printf_float+0x3ee>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	464a      	mov	r2, r9
 8002a8e:	4631      	mov	r1, r6
 8002a90:	4628      	mov	r0, r5
 8002a92:	47b8      	blx	r7
 8002a94:	3001      	adds	r0, #1
 8002a96:	f43f ae3e 	beq.w	8002716 <_printf_float+0xba>
 8002a9a:	f108 0801 	add.w	r8, r8, #1
 8002a9e:	68e3      	ldr	r3, [r4, #12]
 8002aa0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	4543      	cmp	r3, r8
 8002aa6:	dcf0      	bgt.n	8002a8a <_printf_float+0x42e>
 8002aa8:	e6fc      	b.n	80028a4 <_printf_float+0x248>
 8002aaa:	f04f 0800 	mov.w	r8, #0
 8002aae:	f104 0919 	add.w	r9, r4, #25
 8002ab2:	e7f4      	b.n	8002a9e <_printf_float+0x442>
 8002ab4:	2900      	cmp	r1, #0
 8002ab6:	f43f ae8b 	beq.w	80027d0 <_printf_float+0x174>
 8002aba:	2300      	movs	r3, #0
 8002abc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002ac0:	ab09      	add	r3, sp, #36	; 0x24
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	ec49 8b10 	vmov	d0, r8, r9
 8002ac8:	6022      	str	r2, [r4, #0]
 8002aca:	f8cd a004 	str.w	sl, [sp, #4]
 8002ace:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002ad2:	4628      	mov	r0, r5
 8002ad4:	f7ff fd2e 	bl	8002534 <__cvt>
 8002ad8:	4680      	mov	r8, r0
 8002ada:	e648      	b.n	800276e <_printf_float+0x112>

08002adc <_printf_common>:
 8002adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ae0:	4691      	mov	r9, r2
 8002ae2:	461f      	mov	r7, r3
 8002ae4:	688a      	ldr	r2, [r1, #8]
 8002ae6:	690b      	ldr	r3, [r1, #16]
 8002ae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002aec:	4293      	cmp	r3, r2
 8002aee:	bfb8      	it	lt
 8002af0:	4613      	movlt	r3, r2
 8002af2:	f8c9 3000 	str.w	r3, [r9]
 8002af6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002afa:	4606      	mov	r6, r0
 8002afc:	460c      	mov	r4, r1
 8002afe:	b112      	cbz	r2, 8002b06 <_printf_common+0x2a>
 8002b00:	3301      	adds	r3, #1
 8002b02:	f8c9 3000 	str.w	r3, [r9]
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	0699      	lsls	r1, r3, #26
 8002b0a:	bf42      	ittt	mi
 8002b0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b10:	3302      	addmi	r3, #2
 8002b12:	f8c9 3000 	strmi.w	r3, [r9]
 8002b16:	6825      	ldr	r5, [r4, #0]
 8002b18:	f015 0506 	ands.w	r5, r5, #6
 8002b1c:	d107      	bne.n	8002b2e <_printf_common+0x52>
 8002b1e:	f104 0a19 	add.w	sl, r4, #25
 8002b22:	68e3      	ldr	r3, [r4, #12]
 8002b24:	f8d9 2000 	ldr.w	r2, [r9]
 8002b28:	1a9b      	subs	r3, r3, r2
 8002b2a:	42ab      	cmp	r3, r5
 8002b2c:	dc28      	bgt.n	8002b80 <_printf_common+0xa4>
 8002b2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b32:	6822      	ldr	r2, [r4, #0]
 8002b34:	3300      	adds	r3, #0
 8002b36:	bf18      	it	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	0692      	lsls	r2, r2, #26
 8002b3c:	d42d      	bmi.n	8002b9a <_printf_common+0xbe>
 8002b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b42:	4639      	mov	r1, r7
 8002b44:	4630      	mov	r0, r6
 8002b46:	47c0      	blx	r8
 8002b48:	3001      	adds	r0, #1
 8002b4a:	d020      	beq.n	8002b8e <_printf_common+0xb2>
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	68e5      	ldr	r5, [r4, #12]
 8002b50:	f8d9 2000 	ldr.w	r2, [r9]
 8002b54:	f003 0306 	and.w	r3, r3, #6
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	bf08      	it	eq
 8002b5c:	1aad      	subeq	r5, r5, r2
 8002b5e:	68a3      	ldr	r3, [r4, #8]
 8002b60:	6922      	ldr	r2, [r4, #16]
 8002b62:	bf0c      	ite	eq
 8002b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b68:	2500      	movne	r5, #0
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	bfc4      	itt	gt
 8002b6e:	1a9b      	subgt	r3, r3, r2
 8002b70:	18ed      	addgt	r5, r5, r3
 8002b72:	f04f 0900 	mov.w	r9, #0
 8002b76:	341a      	adds	r4, #26
 8002b78:	454d      	cmp	r5, r9
 8002b7a:	d11a      	bne.n	8002bb2 <_printf_common+0xd6>
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	e008      	b.n	8002b92 <_printf_common+0xb6>
 8002b80:	2301      	movs	r3, #1
 8002b82:	4652      	mov	r2, sl
 8002b84:	4639      	mov	r1, r7
 8002b86:	4630      	mov	r0, r6
 8002b88:	47c0      	blx	r8
 8002b8a:	3001      	adds	r0, #1
 8002b8c:	d103      	bne.n	8002b96 <_printf_common+0xba>
 8002b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b96:	3501      	adds	r5, #1
 8002b98:	e7c3      	b.n	8002b22 <_printf_common+0x46>
 8002b9a:	18e1      	adds	r1, r4, r3
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	2030      	movs	r0, #48	; 0x30
 8002ba0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ba4:	4422      	add	r2, r4
 8002ba6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002baa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bae:	3302      	adds	r3, #2
 8002bb0:	e7c5      	b.n	8002b3e <_printf_common+0x62>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	4622      	mov	r2, r4
 8002bb6:	4639      	mov	r1, r7
 8002bb8:	4630      	mov	r0, r6
 8002bba:	47c0      	blx	r8
 8002bbc:	3001      	adds	r0, #1
 8002bbe:	d0e6      	beq.n	8002b8e <_printf_common+0xb2>
 8002bc0:	f109 0901 	add.w	r9, r9, #1
 8002bc4:	e7d8      	b.n	8002b78 <_printf_common+0x9c>
	...

08002bc8 <_printf_i>:
 8002bc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002bcc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	7e09      	ldrb	r1, [r1, #24]
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	296e      	cmp	r1, #110	; 0x6e
 8002bd8:	4617      	mov	r7, r2
 8002bda:	4606      	mov	r6, r0
 8002bdc:	4698      	mov	r8, r3
 8002bde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002be0:	f000 80b3 	beq.w	8002d4a <_printf_i+0x182>
 8002be4:	d822      	bhi.n	8002c2c <_printf_i+0x64>
 8002be6:	2963      	cmp	r1, #99	; 0x63
 8002be8:	d036      	beq.n	8002c58 <_printf_i+0x90>
 8002bea:	d80a      	bhi.n	8002c02 <_printf_i+0x3a>
 8002bec:	2900      	cmp	r1, #0
 8002bee:	f000 80b9 	beq.w	8002d64 <_printf_i+0x19c>
 8002bf2:	2958      	cmp	r1, #88	; 0x58
 8002bf4:	f000 8083 	beq.w	8002cfe <_printf_i+0x136>
 8002bf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bfc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002c00:	e032      	b.n	8002c68 <_printf_i+0xa0>
 8002c02:	2964      	cmp	r1, #100	; 0x64
 8002c04:	d001      	beq.n	8002c0a <_printf_i+0x42>
 8002c06:	2969      	cmp	r1, #105	; 0x69
 8002c08:	d1f6      	bne.n	8002bf8 <_printf_i+0x30>
 8002c0a:	6820      	ldr	r0, [r4, #0]
 8002c0c:	6813      	ldr	r3, [r2, #0]
 8002c0e:	0605      	lsls	r5, r0, #24
 8002c10:	f103 0104 	add.w	r1, r3, #4
 8002c14:	d52a      	bpl.n	8002c6c <_printf_i+0xa4>
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6011      	str	r1, [r2, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	da03      	bge.n	8002c26 <_printf_i+0x5e>
 8002c1e:	222d      	movs	r2, #45	; 0x2d
 8002c20:	425b      	negs	r3, r3
 8002c22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c26:	486f      	ldr	r0, [pc, #444]	; (8002de4 <_printf_i+0x21c>)
 8002c28:	220a      	movs	r2, #10
 8002c2a:	e039      	b.n	8002ca0 <_printf_i+0xd8>
 8002c2c:	2973      	cmp	r1, #115	; 0x73
 8002c2e:	f000 809d 	beq.w	8002d6c <_printf_i+0x1a4>
 8002c32:	d808      	bhi.n	8002c46 <_printf_i+0x7e>
 8002c34:	296f      	cmp	r1, #111	; 0x6f
 8002c36:	d020      	beq.n	8002c7a <_printf_i+0xb2>
 8002c38:	2970      	cmp	r1, #112	; 0x70
 8002c3a:	d1dd      	bne.n	8002bf8 <_printf_i+0x30>
 8002c3c:	6823      	ldr	r3, [r4, #0]
 8002c3e:	f043 0320 	orr.w	r3, r3, #32
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	e003      	b.n	8002c4e <_printf_i+0x86>
 8002c46:	2975      	cmp	r1, #117	; 0x75
 8002c48:	d017      	beq.n	8002c7a <_printf_i+0xb2>
 8002c4a:	2978      	cmp	r1, #120	; 0x78
 8002c4c:	d1d4      	bne.n	8002bf8 <_printf_i+0x30>
 8002c4e:	2378      	movs	r3, #120	; 0x78
 8002c50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c54:	4864      	ldr	r0, [pc, #400]	; (8002de8 <_printf_i+0x220>)
 8002c56:	e055      	b.n	8002d04 <_printf_i+0x13c>
 8002c58:	6813      	ldr	r3, [r2, #0]
 8002c5a:	1d19      	adds	r1, r3, #4
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6011      	str	r1, [r2, #0]
 8002c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e08c      	b.n	8002d86 <_printf_i+0x1be>
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	6011      	str	r1, [r2, #0]
 8002c70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c74:	bf18      	it	ne
 8002c76:	b21b      	sxthne	r3, r3
 8002c78:	e7cf      	b.n	8002c1a <_printf_i+0x52>
 8002c7a:	6813      	ldr	r3, [r2, #0]
 8002c7c:	6825      	ldr	r5, [r4, #0]
 8002c7e:	1d18      	adds	r0, r3, #4
 8002c80:	6010      	str	r0, [r2, #0]
 8002c82:	0628      	lsls	r0, r5, #24
 8002c84:	d501      	bpl.n	8002c8a <_printf_i+0xc2>
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	e002      	b.n	8002c90 <_printf_i+0xc8>
 8002c8a:	0668      	lsls	r0, r5, #25
 8002c8c:	d5fb      	bpl.n	8002c86 <_printf_i+0xbe>
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	4854      	ldr	r0, [pc, #336]	; (8002de4 <_printf_i+0x21c>)
 8002c92:	296f      	cmp	r1, #111	; 0x6f
 8002c94:	bf14      	ite	ne
 8002c96:	220a      	movne	r2, #10
 8002c98:	2208      	moveq	r2, #8
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002ca0:	6865      	ldr	r5, [r4, #4]
 8002ca2:	60a5      	str	r5, [r4, #8]
 8002ca4:	2d00      	cmp	r5, #0
 8002ca6:	f2c0 8095 	blt.w	8002dd4 <_printf_i+0x20c>
 8002caa:	6821      	ldr	r1, [r4, #0]
 8002cac:	f021 0104 	bic.w	r1, r1, #4
 8002cb0:	6021      	str	r1, [r4, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d13d      	bne.n	8002d32 <_printf_i+0x16a>
 8002cb6:	2d00      	cmp	r5, #0
 8002cb8:	f040 808e 	bne.w	8002dd8 <_printf_i+0x210>
 8002cbc:	4665      	mov	r5, ip
 8002cbe:	2a08      	cmp	r2, #8
 8002cc0:	d10b      	bne.n	8002cda <_printf_i+0x112>
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	07db      	lsls	r3, r3, #31
 8002cc6:	d508      	bpl.n	8002cda <_printf_i+0x112>
 8002cc8:	6923      	ldr	r3, [r4, #16]
 8002cca:	6862      	ldr	r2, [r4, #4]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	bfde      	ittt	le
 8002cd0:	2330      	movle	r3, #48	; 0x30
 8002cd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002cd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002cda:	ebac 0305 	sub.w	r3, ip, r5
 8002cde:	6123      	str	r3, [r4, #16]
 8002ce0:	f8cd 8000 	str.w	r8, [sp]
 8002ce4:	463b      	mov	r3, r7
 8002ce6:	aa03      	add	r2, sp, #12
 8002ce8:	4621      	mov	r1, r4
 8002cea:	4630      	mov	r0, r6
 8002cec:	f7ff fef6 	bl	8002adc <_printf_common>
 8002cf0:	3001      	adds	r0, #1
 8002cf2:	d14d      	bne.n	8002d90 <_printf_i+0x1c8>
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	b005      	add	sp, #20
 8002cfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cfe:	4839      	ldr	r0, [pc, #228]	; (8002de4 <_printf_i+0x21c>)
 8002d00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002d04:	6813      	ldr	r3, [r2, #0]
 8002d06:	6821      	ldr	r1, [r4, #0]
 8002d08:	1d1d      	adds	r5, r3, #4
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6015      	str	r5, [r2, #0]
 8002d0e:	060a      	lsls	r2, r1, #24
 8002d10:	d50b      	bpl.n	8002d2a <_printf_i+0x162>
 8002d12:	07ca      	lsls	r2, r1, #31
 8002d14:	bf44      	itt	mi
 8002d16:	f041 0120 	orrmi.w	r1, r1, #32
 8002d1a:	6021      	strmi	r1, [r4, #0]
 8002d1c:	b91b      	cbnz	r3, 8002d26 <_printf_i+0x15e>
 8002d1e:	6822      	ldr	r2, [r4, #0]
 8002d20:	f022 0220 	bic.w	r2, r2, #32
 8002d24:	6022      	str	r2, [r4, #0]
 8002d26:	2210      	movs	r2, #16
 8002d28:	e7b7      	b.n	8002c9a <_printf_i+0xd2>
 8002d2a:	064d      	lsls	r5, r1, #25
 8002d2c:	bf48      	it	mi
 8002d2e:	b29b      	uxthmi	r3, r3
 8002d30:	e7ef      	b.n	8002d12 <_printf_i+0x14a>
 8002d32:	4665      	mov	r5, ip
 8002d34:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d38:	fb02 3311 	mls	r3, r2, r1, r3
 8002d3c:	5cc3      	ldrb	r3, [r0, r3]
 8002d3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002d42:	460b      	mov	r3, r1
 8002d44:	2900      	cmp	r1, #0
 8002d46:	d1f5      	bne.n	8002d34 <_printf_i+0x16c>
 8002d48:	e7b9      	b.n	8002cbe <_printf_i+0xf6>
 8002d4a:	6813      	ldr	r3, [r2, #0]
 8002d4c:	6825      	ldr	r5, [r4, #0]
 8002d4e:	6961      	ldr	r1, [r4, #20]
 8002d50:	1d18      	adds	r0, r3, #4
 8002d52:	6010      	str	r0, [r2, #0]
 8002d54:	0628      	lsls	r0, r5, #24
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	d501      	bpl.n	8002d5e <_printf_i+0x196>
 8002d5a:	6019      	str	r1, [r3, #0]
 8002d5c:	e002      	b.n	8002d64 <_printf_i+0x19c>
 8002d5e:	066a      	lsls	r2, r5, #25
 8002d60:	d5fb      	bpl.n	8002d5a <_printf_i+0x192>
 8002d62:	8019      	strh	r1, [r3, #0]
 8002d64:	2300      	movs	r3, #0
 8002d66:	6123      	str	r3, [r4, #16]
 8002d68:	4665      	mov	r5, ip
 8002d6a:	e7b9      	b.n	8002ce0 <_printf_i+0x118>
 8002d6c:	6813      	ldr	r3, [r2, #0]
 8002d6e:	1d19      	adds	r1, r3, #4
 8002d70:	6011      	str	r1, [r2, #0]
 8002d72:	681d      	ldr	r5, [r3, #0]
 8002d74:	6862      	ldr	r2, [r4, #4]
 8002d76:	2100      	movs	r1, #0
 8002d78:	4628      	mov	r0, r5
 8002d7a:	f7fd fa31 	bl	80001e0 <memchr>
 8002d7e:	b108      	cbz	r0, 8002d84 <_printf_i+0x1bc>
 8002d80:	1b40      	subs	r0, r0, r5
 8002d82:	6060      	str	r0, [r4, #4]
 8002d84:	6863      	ldr	r3, [r4, #4]
 8002d86:	6123      	str	r3, [r4, #16]
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d8e:	e7a7      	b.n	8002ce0 <_printf_i+0x118>
 8002d90:	6923      	ldr	r3, [r4, #16]
 8002d92:	462a      	mov	r2, r5
 8002d94:	4639      	mov	r1, r7
 8002d96:	4630      	mov	r0, r6
 8002d98:	47c0      	blx	r8
 8002d9a:	3001      	adds	r0, #1
 8002d9c:	d0aa      	beq.n	8002cf4 <_printf_i+0x12c>
 8002d9e:	6823      	ldr	r3, [r4, #0]
 8002da0:	079b      	lsls	r3, r3, #30
 8002da2:	d413      	bmi.n	8002dcc <_printf_i+0x204>
 8002da4:	68e0      	ldr	r0, [r4, #12]
 8002da6:	9b03      	ldr	r3, [sp, #12]
 8002da8:	4298      	cmp	r0, r3
 8002daa:	bfb8      	it	lt
 8002dac:	4618      	movlt	r0, r3
 8002dae:	e7a3      	b.n	8002cf8 <_printf_i+0x130>
 8002db0:	2301      	movs	r3, #1
 8002db2:	464a      	mov	r2, r9
 8002db4:	4639      	mov	r1, r7
 8002db6:	4630      	mov	r0, r6
 8002db8:	47c0      	blx	r8
 8002dba:	3001      	adds	r0, #1
 8002dbc:	d09a      	beq.n	8002cf4 <_printf_i+0x12c>
 8002dbe:	3501      	adds	r5, #1
 8002dc0:	68e3      	ldr	r3, [r4, #12]
 8002dc2:	9a03      	ldr	r2, [sp, #12]
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	42ab      	cmp	r3, r5
 8002dc8:	dcf2      	bgt.n	8002db0 <_printf_i+0x1e8>
 8002dca:	e7eb      	b.n	8002da4 <_printf_i+0x1dc>
 8002dcc:	2500      	movs	r5, #0
 8002dce:	f104 0919 	add.w	r9, r4, #25
 8002dd2:	e7f5      	b.n	8002dc0 <_printf_i+0x1f8>
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ac      	bne.n	8002d32 <_printf_i+0x16a>
 8002dd8:	7803      	ldrb	r3, [r0, #0]
 8002dda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002dde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002de2:	e76c      	b.n	8002cbe <_printf_i+0xf6>
 8002de4:	08004691 	.word	0x08004691
 8002de8:	080046a2 	.word	0x080046a2

08002dec <siprintf>:
 8002dec:	b40e      	push	{r1, r2, r3}
 8002dee:	b500      	push	{lr}
 8002df0:	b09c      	sub	sp, #112	; 0x70
 8002df2:	ab1d      	add	r3, sp, #116	; 0x74
 8002df4:	9002      	str	r0, [sp, #8]
 8002df6:	9006      	str	r0, [sp, #24]
 8002df8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002dfc:	4809      	ldr	r0, [pc, #36]	; (8002e24 <siprintf+0x38>)
 8002dfe:	9107      	str	r1, [sp, #28]
 8002e00:	9104      	str	r1, [sp, #16]
 8002e02:	4909      	ldr	r1, [pc, #36]	; (8002e28 <siprintf+0x3c>)
 8002e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e08:	9105      	str	r1, [sp, #20]
 8002e0a:	6800      	ldr	r0, [r0, #0]
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	a902      	add	r1, sp, #8
 8002e10:	f001 fa6a 	bl	80042e8 <_svfiprintf_r>
 8002e14:	9b02      	ldr	r3, [sp, #8]
 8002e16:	2200      	movs	r2, #0
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	b01c      	add	sp, #112	; 0x70
 8002e1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e20:	b003      	add	sp, #12
 8002e22:	4770      	bx	lr
 8002e24:	2000003c 	.word	0x2000003c
 8002e28:	ffff0208 	.word	0xffff0208

08002e2c <__ascii_wctomb>:
 8002e2c:	b149      	cbz	r1, 8002e42 <__ascii_wctomb+0x16>
 8002e2e:	2aff      	cmp	r2, #255	; 0xff
 8002e30:	bf85      	ittet	hi
 8002e32:	238a      	movhi	r3, #138	; 0x8a
 8002e34:	6003      	strhi	r3, [r0, #0]
 8002e36:	700a      	strbls	r2, [r1, #0]
 8002e38:	f04f 30ff 	movhi.w	r0, #4294967295
 8002e3c:	bf98      	it	ls
 8002e3e:	2001      	movls	r0, #1
 8002e40:	4770      	bx	lr
 8002e42:	4608      	mov	r0, r1
 8002e44:	4770      	bx	lr

08002e46 <quorem>:
 8002e46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e4a:	6903      	ldr	r3, [r0, #16]
 8002e4c:	690c      	ldr	r4, [r1, #16]
 8002e4e:	42a3      	cmp	r3, r4
 8002e50:	4680      	mov	r8, r0
 8002e52:	f2c0 8082 	blt.w	8002f5a <quorem+0x114>
 8002e56:	3c01      	subs	r4, #1
 8002e58:	f101 0714 	add.w	r7, r1, #20
 8002e5c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002e60:	f100 0614 	add.w	r6, r0, #20
 8002e64:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002e68:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002e6c:	eb06 030c 	add.w	r3, r6, ip
 8002e70:	3501      	adds	r5, #1
 8002e72:	eb07 090c 	add.w	r9, r7, ip
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	fbb0 f5f5 	udiv	r5, r0, r5
 8002e7c:	b395      	cbz	r5, 8002ee4 <quorem+0x9e>
 8002e7e:	f04f 0a00 	mov.w	sl, #0
 8002e82:	4638      	mov	r0, r7
 8002e84:	46b6      	mov	lr, r6
 8002e86:	46d3      	mov	fp, sl
 8002e88:	f850 2b04 	ldr.w	r2, [r0], #4
 8002e8c:	b293      	uxth	r3, r2
 8002e8e:	fb05 a303 	mla	r3, r5, r3, sl
 8002e92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	ebab 0303 	sub.w	r3, fp, r3
 8002e9c:	0c12      	lsrs	r2, r2, #16
 8002e9e:	f8de b000 	ldr.w	fp, [lr]
 8002ea2:	fb05 a202 	mla	r2, r5, r2, sl
 8002ea6:	fa13 f38b 	uxtah	r3, r3, fp
 8002eaa:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002eae:	fa1f fb82 	uxth.w	fp, r2
 8002eb2:	f8de 2000 	ldr.w	r2, [lr]
 8002eb6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002eba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ec4:	4581      	cmp	r9, r0
 8002ec6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002eca:	f84e 3b04 	str.w	r3, [lr], #4
 8002ece:	d2db      	bcs.n	8002e88 <quorem+0x42>
 8002ed0:	f856 300c 	ldr.w	r3, [r6, ip]
 8002ed4:	b933      	cbnz	r3, 8002ee4 <quorem+0x9e>
 8002ed6:	9b01      	ldr	r3, [sp, #4]
 8002ed8:	3b04      	subs	r3, #4
 8002eda:	429e      	cmp	r6, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	d330      	bcc.n	8002f42 <quorem+0xfc>
 8002ee0:	f8c8 4010 	str.w	r4, [r8, #16]
 8002ee4:	4640      	mov	r0, r8
 8002ee6:	f001 f829 	bl	8003f3c <__mcmp>
 8002eea:	2800      	cmp	r0, #0
 8002eec:	db25      	blt.n	8002f3a <quorem+0xf4>
 8002eee:	3501      	adds	r5, #1
 8002ef0:	4630      	mov	r0, r6
 8002ef2:	f04f 0c00 	mov.w	ip, #0
 8002ef6:	f857 2b04 	ldr.w	r2, [r7], #4
 8002efa:	f8d0 e000 	ldr.w	lr, [r0]
 8002efe:	b293      	uxth	r3, r2
 8002f00:	ebac 0303 	sub.w	r3, ip, r3
 8002f04:	0c12      	lsrs	r2, r2, #16
 8002f06:	fa13 f38e 	uxtah	r3, r3, lr
 8002f0a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002f0e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f18:	45b9      	cmp	r9, r7
 8002f1a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002f1e:	f840 3b04 	str.w	r3, [r0], #4
 8002f22:	d2e8      	bcs.n	8002ef6 <quorem+0xb0>
 8002f24:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8002f28:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8002f2c:	b92a      	cbnz	r2, 8002f3a <quorem+0xf4>
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	429e      	cmp	r6, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	d30b      	bcc.n	8002f4e <quorem+0x108>
 8002f36:	f8c8 4010 	str.w	r4, [r8, #16]
 8002f3a:	4628      	mov	r0, r5
 8002f3c:	b003      	add	sp, #12
 8002f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	3b04      	subs	r3, #4
 8002f46:	2a00      	cmp	r2, #0
 8002f48:	d1ca      	bne.n	8002ee0 <quorem+0x9a>
 8002f4a:	3c01      	subs	r4, #1
 8002f4c:	e7c5      	b.n	8002eda <quorem+0x94>
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	3b04      	subs	r3, #4
 8002f52:	2a00      	cmp	r2, #0
 8002f54:	d1ef      	bne.n	8002f36 <quorem+0xf0>
 8002f56:	3c01      	subs	r4, #1
 8002f58:	e7ea      	b.n	8002f30 <quorem+0xea>
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	e7ee      	b.n	8002f3c <quorem+0xf6>
	...

08002f60 <_dtoa_r>:
 8002f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f64:	ec57 6b10 	vmov	r6, r7, d0
 8002f68:	b097      	sub	sp, #92	; 0x5c
 8002f6a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002f6c:	9106      	str	r1, [sp, #24]
 8002f6e:	4604      	mov	r4, r0
 8002f70:	920b      	str	r2, [sp, #44]	; 0x2c
 8002f72:	9312      	str	r3, [sp, #72]	; 0x48
 8002f74:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002f78:	e9cd 6700 	strd	r6, r7, [sp]
 8002f7c:	b93d      	cbnz	r5, 8002f8e <_dtoa_r+0x2e>
 8002f7e:	2010      	movs	r0, #16
 8002f80:	f000 fdb4 	bl	8003aec <malloc>
 8002f84:	6260      	str	r0, [r4, #36]	; 0x24
 8002f86:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002f8a:	6005      	str	r5, [r0, #0]
 8002f8c:	60c5      	str	r5, [r0, #12]
 8002f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f90:	6819      	ldr	r1, [r3, #0]
 8002f92:	b151      	cbz	r1, 8002faa <_dtoa_r+0x4a>
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	604a      	str	r2, [r1, #4]
 8002f98:	2301      	movs	r3, #1
 8002f9a:	4093      	lsls	r3, r2
 8002f9c:	608b      	str	r3, [r1, #8]
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	f000 fdeb 	bl	8003b7a <_Bfree>
 8002fa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	1e3b      	subs	r3, r7, #0
 8002fac:	bfbb      	ittet	lt
 8002fae:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002fb2:	9301      	strlt	r3, [sp, #4]
 8002fb4:	2300      	movge	r3, #0
 8002fb6:	2201      	movlt	r2, #1
 8002fb8:	bfac      	ite	ge
 8002fba:	f8c8 3000 	strge.w	r3, [r8]
 8002fbe:	f8c8 2000 	strlt.w	r2, [r8]
 8002fc2:	4baf      	ldr	r3, [pc, #700]	; (8003280 <_dtoa_r+0x320>)
 8002fc4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8002fc8:	ea33 0308 	bics.w	r3, r3, r8
 8002fcc:	d114      	bne.n	8002ff8 <_dtoa_r+0x98>
 8002fce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002fd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8002fd4:	6013      	str	r3, [r2, #0]
 8002fd6:	9b00      	ldr	r3, [sp, #0]
 8002fd8:	b923      	cbnz	r3, 8002fe4 <_dtoa_r+0x84>
 8002fda:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	f000 8542 	beq.w	8003a68 <_dtoa_r+0xb08>
 8002fe4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002fe6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8003294 <_dtoa_r+0x334>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	f000 8544 	beq.w	8003a78 <_dtoa_r+0xb18>
 8002ff0:	f10b 0303 	add.w	r3, fp, #3
 8002ff4:	f000 bd3e 	b.w	8003a74 <_dtoa_r+0xb14>
 8002ff8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2300      	movs	r3, #0
 8003000:	4630      	mov	r0, r6
 8003002:	4639      	mov	r1, r7
 8003004:	f7fd fd60 	bl	8000ac8 <__aeabi_dcmpeq>
 8003008:	4681      	mov	r9, r0
 800300a:	b168      	cbz	r0, 8003028 <_dtoa_r+0xc8>
 800300c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800300e:	2301      	movs	r3, #1
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8524 	beq.w	8003a62 <_dtoa_r+0xb02>
 800301a:	4b9a      	ldr	r3, [pc, #616]	; (8003284 <_dtoa_r+0x324>)
 800301c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800301e:	f103 3bff 	add.w	fp, r3, #4294967295
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	f000 bd28 	b.w	8003a78 <_dtoa_r+0xb18>
 8003028:	aa14      	add	r2, sp, #80	; 0x50
 800302a:	a915      	add	r1, sp, #84	; 0x54
 800302c:	ec47 6b10 	vmov	d0, r6, r7
 8003030:	4620      	mov	r0, r4
 8003032:	f000 fffa 	bl	800402a <__d2b>
 8003036:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800303a:	9004      	str	r0, [sp, #16]
 800303c:	2d00      	cmp	r5, #0
 800303e:	d07c      	beq.n	800313a <_dtoa_r+0x1da>
 8003040:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003044:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8003048:	46b2      	mov	sl, r6
 800304a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800304e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003052:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8003056:	2200      	movs	r2, #0
 8003058:	4b8b      	ldr	r3, [pc, #556]	; (8003288 <_dtoa_r+0x328>)
 800305a:	4650      	mov	r0, sl
 800305c:	4659      	mov	r1, fp
 800305e:	f7fd f913 	bl	8000288 <__aeabi_dsub>
 8003062:	a381      	add	r3, pc, #516	; (adr r3, 8003268 <_dtoa_r+0x308>)
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f7fd fac6 	bl	80005f8 <__aeabi_dmul>
 800306c:	a380      	add	r3, pc, #512	; (adr r3, 8003270 <_dtoa_r+0x310>)
 800306e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003072:	f7fd f90b 	bl	800028c <__adddf3>
 8003076:	4606      	mov	r6, r0
 8003078:	4628      	mov	r0, r5
 800307a:	460f      	mov	r7, r1
 800307c:	f7fd fa52 	bl	8000524 <__aeabi_i2d>
 8003080:	a37d      	add	r3, pc, #500	; (adr r3, 8003278 <_dtoa_r+0x318>)
 8003082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003086:	f7fd fab7 	bl	80005f8 <__aeabi_dmul>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4630      	mov	r0, r6
 8003090:	4639      	mov	r1, r7
 8003092:	f7fd f8fb 	bl	800028c <__adddf3>
 8003096:	4606      	mov	r6, r0
 8003098:	460f      	mov	r7, r1
 800309a:	f7fd fd5d 	bl	8000b58 <__aeabi_d2iz>
 800309e:	2200      	movs	r2, #0
 80030a0:	4682      	mov	sl, r0
 80030a2:	2300      	movs	r3, #0
 80030a4:	4630      	mov	r0, r6
 80030a6:	4639      	mov	r1, r7
 80030a8:	f7fd fd18 	bl	8000adc <__aeabi_dcmplt>
 80030ac:	b148      	cbz	r0, 80030c2 <_dtoa_r+0x162>
 80030ae:	4650      	mov	r0, sl
 80030b0:	f7fd fa38 	bl	8000524 <__aeabi_i2d>
 80030b4:	4632      	mov	r2, r6
 80030b6:	463b      	mov	r3, r7
 80030b8:	f7fd fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 80030bc:	b908      	cbnz	r0, 80030c2 <_dtoa_r+0x162>
 80030be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80030c2:	f1ba 0f16 	cmp.w	sl, #22
 80030c6:	d859      	bhi.n	800317c <_dtoa_r+0x21c>
 80030c8:	4970      	ldr	r1, [pc, #448]	; (800328c <_dtoa_r+0x32c>)
 80030ca:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80030ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80030d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030d6:	f7fd fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 80030da:	2800      	cmp	r0, #0
 80030dc:	d050      	beq.n	8003180 <_dtoa_r+0x220>
 80030de:	f10a 3aff 	add.w	sl, sl, #4294967295
 80030e2:	2300      	movs	r3, #0
 80030e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80030e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80030e8:	1b5d      	subs	r5, r3, r5
 80030ea:	f1b5 0801 	subs.w	r8, r5, #1
 80030ee:	bf49      	itett	mi
 80030f0:	f1c5 0301 	rsbmi	r3, r5, #1
 80030f4:	2300      	movpl	r3, #0
 80030f6:	9305      	strmi	r3, [sp, #20]
 80030f8:	f04f 0800 	movmi.w	r8, #0
 80030fc:	bf58      	it	pl
 80030fe:	9305      	strpl	r3, [sp, #20]
 8003100:	f1ba 0f00 	cmp.w	sl, #0
 8003104:	db3e      	blt.n	8003184 <_dtoa_r+0x224>
 8003106:	2300      	movs	r3, #0
 8003108:	44d0      	add	r8, sl
 800310a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800310e:	9307      	str	r3, [sp, #28]
 8003110:	9b06      	ldr	r3, [sp, #24]
 8003112:	2b09      	cmp	r3, #9
 8003114:	f200 8090 	bhi.w	8003238 <_dtoa_r+0x2d8>
 8003118:	2b05      	cmp	r3, #5
 800311a:	bfc4      	itt	gt
 800311c:	3b04      	subgt	r3, #4
 800311e:	9306      	strgt	r3, [sp, #24]
 8003120:	9b06      	ldr	r3, [sp, #24]
 8003122:	f1a3 0302 	sub.w	r3, r3, #2
 8003126:	bfcc      	ite	gt
 8003128:	2500      	movgt	r5, #0
 800312a:	2501      	movle	r5, #1
 800312c:	2b03      	cmp	r3, #3
 800312e:	f200 808f 	bhi.w	8003250 <_dtoa_r+0x2f0>
 8003132:	e8df f003 	tbb	[pc, r3]
 8003136:	7f7d      	.short	0x7f7d
 8003138:	7131      	.short	0x7131
 800313a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800313e:	441d      	add	r5, r3
 8003140:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003144:	2820      	cmp	r0, #32
 8003146:	dd13      	ble.n	8003170 <_dtoa_r+0x210>
 8003148:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800314c:	9b00      	ldr	r3, [sp, #0]
 800314e:	fa08 f800 	lsl.w	r8, r8, r0
 8003152:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003156:	fa23 f000 	lsr.w	r0, r3, r0
 800315a:	ea48 0000 	orr.w	r0, r8, r0
 800315e:	f7fd f9d1 	bl	8000504 <__aeabi_ui2d>
 8003162:	2301      	movs	r3, #1
 8003164:	4682      	mov	sl, r0
 8003166:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800316a:	3d01      	subs	r5, #1
 800316c:	9313      	str	r3, [sp, #76]	; 0x4c
 800316e:	e772      	b.n	8003056 <_dtoa_r+0xf6>
 8003170:	9b00      	ldr	r3, [sp, #0]
 8003172:	f1c0 0020 	rsb	r0, r0, #32
 8003176:	fa03 f000 	lsl.w	r0, r3, r0
 800317a:	e7f0      	b.n	800315e <_dtoa_r+0x1fe>
 800317c:	2301      	movs	r3, #1
 800317e:	e7b1      	b.n	80030e4 <_dtoa_r+0x184>
 8003180:	900f      	str	r0, [sp, #60]	; 0x3c
 8003182:	e7b0      	b.n	80030e6 <_dtoa_r+0x186>
 8003184:	9b05      	ldr	r3, [sp, #20]
 8003186:	eba3 030a 	sub.w	r3, r3, sl
 800318a:	9305      	str	r3, [sp, #20]
 800318c:	f1ca 0300 	rsb	r3, sl, #0
 8003190:	9307      	str	r3, [sp, #28]
 8003192:	2300      	movs	r3, #0
 8003194:	930e      	str	r3, [sp, #56]	; 0x38
 8003196:	e7bb      	b.n	8003110 <_dtoa_r+0x1b0>
 8003198:	2301      	movs	r3, #1
 800319a:	930a      	str	r3, [sp, #40]	; 0x28
 800319c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800319e:	2b00      	cmp	r3, #0
 80031a0:	dd59      	ble.n	8003256 <_dtoa_r+0x2f6>
 80031a2:	9302      	str	r3, [sp, #8]
 80031a4:	4699      	mov	r9, r3
 80031a6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80031a8:	2200      	movs	r2, #0
 80031aa:	6072      	str	r2, [r6, #4]
 80031ac:	2204      	movs	r2, #4
 80031ae:	f102 0014 	add.w	r0, r2, #20
 80031b2:	4298      	cmp	r0, r3
 80031b4:	6871      	ldr	r1, [r6, #4]
 80031b6:	d953      	bls.n	8003260 <_dtoa_r+0x300>
 80031b8:	4620      	mov	r0, r4
 80031ba:	f000 fcaa 	bl	8003b12 <_Balloc>
 80031be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031c0:	6030      	str	r0, [r6, #0]
 80031c2:	f1b9 0f0e 	cmp.w	r9, #14
 80031c6:	f8d3 b000 	ldr.w	fp, [r3]
 80031ca:	f200 80e6 	bhi.w	800339a <_dtoa_r+0x43a>
 80031ce:	2d00      	cmp	r5, #0
 80031d0:	f000 80e3 	beq.w	800339a <_dtoa_r+0x43a>
 80031d4:	ed9d 7b00 	vldr	d7, [sp]
 80031d8:	f1ba 0f00 	cmp.w	sl, #0
 80031dc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80031e0:	dd74      	ble.n	80032cc <_dtoa_r+0x36c>
 80031e2:	4a2a      	ldr	r2, [pc, #168]	; (800328c <_dtoa_r+0x32c>)
 80031e4:	f00a 030f 	and.w	r3, sl, #15
 80031e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80031ec:	ed93 7b00 	vldr	d7, [r3]
 80031f0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80031f4:	06f0      	lsls	r0, r6, #27
 80031f6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80031fa:	d565      	bpl.n	80032c8 <_dtoa_r+0x368>
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <_dtoa_r+0x330>)
 80031fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003202:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003206:	f7fd fb21 	bl	800084c <__aeabi_ddiv>
 800320a:	e9cd 0100 	strd	r0, r1, [sp]
 800320e:	f006 060f 	and.w	r6, r6, #15
 8003212:	2503      	movs	r5, #3
 8003214:	4f1e      	ldr	r7, [pc, #120]	; (8003290 <_dtoa_r+0x330>)
 8003216:	e04c      	b.n	80032b2 <_dtoa_r+0x352>
 8003218:	2301      	movs	r3, #1
 800321a:	930a      	str	r3, [sp, #40]	; 0x28
 800321c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800321e:	4453      	add	r3, sl
 8003220:	f103 0901 	add.w	r9, r3, #1
 8003224:	9302      	str	r3, [sp, #8]
 8003226:	464b      	mov	r3, r9
 8003228:	2b01      	cmp	r3, #1
 800322a:	bfb8      	it	lt
 800322c:	2301      	movlt	r3, #1
 800322e:	e7ba      	b.n	80031a6 <_dtoa_r+0x246>
 8003230:	2300      	movs	r3, #0
 8003232:	e7b2      	b.n	800319a <_dtoa_r+0x23a>
 8003234:	2300      	movs	r3, #0
 8003236:	e7f0      	b.n	800321a <_dtoa_r+0x2ba>
 8003238:	2501      	movs	r5, #1
 800323a:	2300      	movs	r3, #0
 800323c:	9306      	str	r3, [sp, #24]
 800323e:	950a      	str	r5, [sp, #40]	; 0x28
 8003240:	f04f 33ff 	mov.w	r3, #4294967295
 8003244:	9302      	str	r3, [sp, #8]
 8003246:	4699      	mov	r9, r3
 8003248:	2200      	movs	r2, #0
 800324a:	2312      	movs	r3, #18
 800324c:	920b      	str	r2, [sp, #44]	; 0x2c
 800324e:	e7aa      	b.n	80031a6 <_dtoa_r+0x246>
 8003250:	2301      	movs	r3, #1
 8003252:	930a      	str	r3, [sp, #40]	; 0x28
 8003254:	e7f4      	b.n	8003240 <_dtoa_r+0x2e0>
 8003256:	2301      	movs	r3, #1
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	4699      	mov	r9, r3
 800325c:	461a      	mov	r2, r3
 800325e:	e7f5      	b.n	800324c <_dtoa_r+0x2ec>
 8003260:	3101      	adds	r1, #1
 8003262:	6071      	str	r1, [r6, #4]
 8003264:	0052      	lsls	r2, r2, #1
 8003266:	e7a2      	b.n	80031ae <_dtoa_r+0x24e>
 8003268:	636f4361 	.word	0x636f4361
 800326c:	3fd287a7 	.word	0x3fd287a7
 8003270:	8b60c8b3 	.word	0x8b60c8b3
 8003274:	3fc68a28 	.word	0x3fc68a28
 8003278:	509f79fb 	.word	0x509f79fb
 800327c:	3fd34413 	.word	0x3fd34413
 8003280:	7ff00000 	.word	0x7ff00000
 8003284:	08004690 	.word	0x08004690
 8003288:	3ff80000 	.word	0x3ff80000
 800328c:	080047f0 	.word	0x080047f0
 8003290:	080047c8 	.word	0x080047c8
 8003294:	080047bd 	.word	0x080047bd
 8003298:	07f1      	lsls	r1, r6, #31
 800329a:	d508      	bpl.n	80032ae <_dtoa_r+0x34e>
 800329c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80032a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032a4:	f7fd f9a8 	bl	80005f8 <__aeabi_dmul>
 80032a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80032ac:	3501      	adds	r5, #1
 80032ae:	1076      	asrs	r6, r6, #1
 80032b0:	3708      	adds	r7, #8
 80032b2:	2e00      	cmp	r6, #0
 80032b4:	d1f0      	bne.n	8003298 <_dtoa_r+0x338>
 80032b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80032ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80032be:	f7fd fac5 	bl	800084c <__aeabi_ddiv>
 80032c2:	e9cd 0100 	strd	r0, r1, [sp]
 80032c6:	e01a      	b.n	80032fe <_dtoa_r+0x39e>
 80032c8:	2502      	movs	r5, #2
 80032ca:	e7a3      	b.n	8003214 <_dtoa_r+0x2b4>
 80032cc:	f000 80a0 	beq.w	8003410 <_dtoa_r+0x4b0>
 80032d0:	f1ca 0600 	rsb	r6, sl, #0
 80032d4:	4b9f      	ldr	r3, [pc, #636]	; (8003554 <_dtoa_r+0x5f4>)
 80032d6:	4fa0      	ldr	r7, [pc, #640]	; (8003558 <_dtoa_r+0x5f8>)
 80032d8:	f006 020f 	and.w	r2, r6, #15
 80032dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80032e8:	f7fd f986 	bl	80005f8 <__aeabi_dmul>
 80032ec:	e9cd 0100 	strd	r0, r1, [sp]
 80032f0:	1136      	asrs	r6, r6, #4
 80032f2:	2300      	movs	r3, #0
 80032f4:	2502      	movs	r5, #2
 80032f6:	2e00      	cmp	r6, #0
 80032f8:	d17f      	bne.n	80033fa <_dtoa_r+0x49a>
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d1e1      	bne.n	80032c2 <_dtoa_r+0x362>
 80032fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8087 	beq.w	8003414 <_dtoa_r+0x4b4>
 8003306:	e9dd 6700 	ldrd	r6, r7, [sp]
 800330a:	2200      	movs	r2, #0
 800330c:	4b93      	ldr	r3, [pc, #588]	; (800355c <_dtoa_r+0x5fc>)
 800330e:	4630      	mov	r0, r6
 8003310:	4639      	mov	r1, r7
 8003312:	f7fd fbe3 	bl	8000adc <__aeabi_dcmplt>
 8003316:	2800      	cmp	r0, #0
 8003318:	d07c      	beq.n	8003414 <_dtoa_r+0x4b4>
 800331a:	f1b9 0f00 	cmp.w	r9, #0
 800331e:	d079      	beq.n	8003414 <_dtoa_r+0x4b4>
 8003320:	9b02      	ldr	r3, [sp, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	dd35      	ble.n	8003392 <_dtoa_r+0x432>
 8003326:	f10a 33ff 	add.w	r3, sl, #4294967295
 800332a:	9308      	str	r3, [sp, #32]
 800332c:	4639      	mov	r1, r7
 800332e:	2200      	movs	r2, #0
 8003330:	4b8b      	ldr	r3, [pc, #556]	; (8003560 <_dtoa_r+0x600>)
 8003332:	4630      	mov	r0, r6
 8003334:	f7fd f960 	bl	80005f8 <__aeabi_dmul>
 8003338:	e9cd 0100 	strd	r0, r1, [sp]
 800333c:	9f02      	ldr	r7, [sp, #8]
 800333e:	3501      	adds	r5, #1
 8003340:	4628      	mov	r0, r5
 8003342:	f7fd f8ef 	bl	8000524 <__aeabi_i2d>
 8003346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800334a:	f7fd f955 	bl	80005f8 <__aeabi_dmul>
 800334e:	2200      	movs	r2, #0
 8003350:	4b84      	ldr	r3, [pc, #528]	; (8003564 <_dtoa_r+0x604>)
 8003352:	f7fc ff9b 	bl	800028c <__adddf3>
 8003356:	4605      	mov	r5, r0
 8003358:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800335c:	2f00      	cmp	r7, #0
 800335e:	d15d      	bne.n	800341c <_dtoa_r+0x4bc>
 8003360:	2200      	movs	r2, #0
 8003362:	4b81      	ldr	r3, [pc, #516]	; (8003568 <_dtoa_r+0x608>)
 8003364:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003368:	f7fc ff8e 	bl	8000288 <__aeabi_dsub>
 800336c:	462a      	mov	r2, r5
 800336e:	4633      	mov	r3, r6
 8003370:	e9cd 0100 	strd	r0, r1, [sp]
 8003374:	f7fd fbd0 	bl	8000b18 <__aeabi_dcmpgt>
 8003378:	2800      	cmp	r0, #0
 800337a:	f040 8288 	bne.w	800388e <_dtoa_r+0x92e>
 800337e:	462a      	mov	r2, r5
 8003380:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003384:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003388:	f7fd fba8 	bl	8000adc <__aeabi_dcmplt>
 800338c:	2800      	cmp	r0, #0
 800338e:	f040 827c 	bne.w	800388a <_dtoa_r+0x92a>
 8003392:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003396:	e9cd 2300 	strd	r2, r3, [sp]
 800339a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800339c:	2b00      	cmp	r3, #0
 800339e:	f2c0 8150 	blt.w	8003642 <_dtoa_r+0x6e2>
 80033a2:	f1ba 0f0e 	cmp.w	sl, #14
 80033a6:	f300 814c 	bgt.w	8003642 <_dtoa_r+0x6e2>
 80033aa:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <_dtoa_r+0x5f4>)
 80033ac:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80033b0:	ed93 7b00 	vldr	d7, [r3]
 80033b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80033bc:	f280 80d8 	bge.w	8003570 <_dtoa_r+0x610>
 80033c0:	f1b9 0f00 	cmp.w	r9, #0
 80033c4:	f300 80d4 	bgt.w	8003570 <_dtoa_r+0x610>
 80033c8:	f040 825e 	bne.w	8003888 <_dtoa_r+0x928>
 80033cc:	2200      	movs	r2, #0
 80033ce:	4b66      	ldr	r3, [pc, #408]	; (8003568 <_dtoa_r+0x608>)
 80033d0:	ec51 0b17 	vmov	r0, r1, d7
 80033d4:	f7fd f910 	bl	80005f8 <__aeabi_dmul>
 80033d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033dc:	f7fd fb92 	bl	8000b04 <__aeabi_dcmpge>
 80033e0:	464f      	mov	r7, r9
 80033e2:	464e      	mov	r6, r9
 80033e4:	2800      	cmp	r0, #0
 80033e6:	f040 8234 	bne.w	8003852 <_dtoa_r+0x8f2>
 80033ea:	2331      	movs	r3, #49	; 0x31
 80033ec:	f10b 0501 	add.w	r5, fp, #1
 80033f0:	f88b 3000 	strb.w	r3, [fp]
 80033f4:	f10a 0a01 	add.w	sl, sl, #1
 80033f8:	e22f      	b.n	800385a <_dtoa_r+0x8fa>
 80033fa:	07f2      	lsls	r2, r6, #31
 80033fc:	d505      	bpl.n	800340a <_dtoa_r+0x4aa>
 80033fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003402:	f7fd f8f9 	bl	80005f8 <__aeabi_dmul>
 8003406:	3501      	adds	r5, #1
 8003408:	2301      	movs	r3, #1
 800340a:	1076      	asrs	r6, r6, #1
 800340c:	3708      	adds	r7, #8
 800340e:	e772      	b.n	80032f6 <_dtoa_r+0x396>
 8003410:	2502      	movs	r5, #2
 8003412:	e774      	b.n	80032fe <_dtoa_r+0x39e>
 8003414:	f8cd a020 	str.w	sl, [sp, #32]
 8003418:	464f      	mov	r7, r9
 800341a:	e791      	b.n	8003340 <_dtoa_r+0x3e0>
 800341c:	4b4d      	ldr	r3, [pc, #308]	; (8003554 <_dtoa_r+0x5f4>)
 800341e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003422:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003428:	2b00      	cmp	r3, #0
 800342a:	d047      	beq.n	80034bc <_dtoa_r+0x55c>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	2000      	movs	r0, #0
 8003432:	494e      	ldr	r1, [pc, #312]	; (800356c <_dtoa_r+0x60c>)
 8003434:	f7fd fa0a 	bl	800084c <__aeabi_ddiv>
 8003438:	462a      	mov	r2, r5
 800343a:	4633      	mov	r3, r6
 800343c:	f7fc ff24 	bl	8000288 <__aeabi_dsub>
 8003440:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8003444:	465d      	mov	r5, fp
 8003446:	e9dd 0100 	ldrd	r0, r1, [sp]
 800344a:	f7fd fb85 	bl	8000b58 <__aeabi_d2iz>
 800344e:	4606      	mov	r6, r0
 8003450:	f7fd f868 	bl	8000524 <__aeabi_i2d>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	e9dd 0100 	ldrd	r0, r1, [sp]
 800345c:	f7fc ff14 	bl	8000288 <__aeabi_dsub>
 8003460:	3630      	adds	r6, #48	; 0x30
 8003462:	f805 6b01 	strb.w	r6, [r5], #1
 8003466:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800346a:	e9cd 0100 	strd	r0, r1, [sp]
 800346e:	f7fd fb35 	bl	8000adc <__aeabi_dcmplt>
 8003472:	2800      	cmp	r0, #0
 8003474:	d163      	bne.n	800353e <_dtoa_r+0x5de>
 8003476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800347a:	2000      	movs	r0, #0
 800347c:	4937      	ldr	r1, [pc, #220]	; (800355c <_dtoa_r+0x5fc>)
 800347e:	f7fc ff03 	bl	8000288 <__aeabi_dsub>
 8003482:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003486:	f7fd fb29 	bl	8000adc <__aeabi_dcmplt>
 800348a:	2800      	cmp	r0, #0
 800348c:	f040 80b7 	bne.w	80035fe <_dtoa_r+0x69e>
 8003490:	eba5 030b 	sub.w	r3, r5, fp
 8003494:	429f      	cmp	r7, r3
 8003496:	f77f af7c 	ble.w	8003392 <_dtoa_r+0x432>
 800349a:	2200      	movs	r2, #0
 800349c:	4b30      	ldr	r3, [pc, #192]	; (8003560 <_dtoa_r+0x600>)
 800349e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80034a2:	f7fd f8a9 	bl	80005f8 <__aeabi_dmul>
 80034a6:	2200      	movs	r2, #0
 80034a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80034ac:	4b2c      	ldr	r3, [pc, #176]	; (8003560 <_dtoa_r+0x600>)
 80034ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034b2:	f7fd f8a1 	bl	80005f8 <__aeabi_dmul>
 80034b6:	e9cd 0100 	strd	r0, r1, [sp]
 80034ba:	e7c4      	b.n	8003446 <_dtoa_r+0x4e6>
 80034bc:	462a      	mov	r2, r5
 80034be:	4633      	mov	r3, r6
 80034c0:	f7fd f89a 	bl	80005f8 <__aeabi_dmul>
 80034c4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80034c8:	eb0b 0507 	add.w	r5, fp, r7
 80034cc:	465e      	mov	r6, fp
 80034ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034d2:	f7fd fb41 	bl	8000b58 <__aeabi_d2iz>
 80034d6:	4607      	mov	r7, r0
 80034d8:	f7fd f824 	bl	8000524 <__aeabi_i2d>
 80034dc:	3730      	adds	r7, #48	; 0x30
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80034e6:	f7fc fecf 	bl	8000288 <__aeabi_dsub>
 80034ea:	f806 7b01 	strb.w	r7, [r6], #1
 80034ee:	42ae      	cmp	r6, r5
 80034f0:	e9cd 0100 	strd	r0, r1, [sp]
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	d126      	bne.n	8003548 <_dtoa_r+0x5e8>
 80034fa:	4b1c      	ldr	r3, [pc, #112]	; (800356c <_dtoa_r+0x60c>)
 80034fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003500:	f7fc fec4 	bl	800028c <__adddf3>
 8003504:	4602      	mov	r2, r0
 8003506:	460b      	mov	r3, r1
 8003508:	e9dd 0100 	ldrd	r0, r1, [sp]
 800350c:	f7fd fb04 	bl	8000b18 <__aeabi_dcmpgt>
 8003510:	2800      	cmp	r0, #0
 8003512:	d174      	bne.n	80035fe <_dtoa_r+0x69e>
 8003514:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003518:	2000      	movs	r0, #0
 800351a:	4914      	ldr	r1, [pc, #80]	; (800356c <_dtoa_r+0x60c>)
 800351c:	f7fc feb4 	bl	8000288 <__aeabi_dsub>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003528:	f7fd fad8 	bl	8000adc <__aeabi_dcmplt>
 800352c:	2800      	cmp	r0, #0
 800352e:	f43f af30 	beq.w	8003392 <_dtoa_r+0x432>
 8003532:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003536:	2b30      	cmp	r3, #48	; 0x30
 8003538:	f105 32ff 	add.w	r2, r5, #4294967295
 800353c:	d002      	beq.n	8003544 <_dtoa_r+0x5e4>
 800353e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003542:	e04a      	b.n	80035da <_dtoa_r+0x67a>
 8003544:	4615      	mov	r5, r2
 8003546:	e7f4      	b.n	8003532 <_dtoa_r+0x5d2>
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <_dtoa_r+0x600>)
 800354a:	f7fd f855 	bl	80005f8 <__aeabi_dmul>
 800354e:	e9cd 0100 	strd	r0, r1, [sp]
 8003552:	e7bc      	b.n	80034ce <_dtoa_r+0x56e>
 8003554:	080047f0 	.word	0x080047f0
 8003558:	080047c8 	.word	0x080047c8
 800355c:	3ff00000 	.word	0x3ff00000
 8003560:	40240000 	.word	0x40240000
 8003564:	401c0000 	.word	0x401c0000
 8003568:	40140000 	.word	0x40140000
 800356c:	3fe00000 	.word	0x3fe00000
 8003570:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003574:	465d      	mov	r5, fp
 8003576:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800357a:	4630      	mov	r0, r6
 800357c:	4639      	mov	r1, r7
 800357e:	f7fd f965 	bl	800084c <__aeabi_ddiv>
 8003582:	f7fd fae9 	bl	8000b58 <__aeabi_d2iz>
 8003586:	4680      	mov	r8, r0
 8003588:	f7fc ffcc 	bl	8000524 <__aeabi_i2d>
 800358c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003590:	f7fd f832 	bl	80005f8 <__aeabi_dmul>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4630      	mov	r0, r6
 800359a:	4639      	mov	r1, r7
 800359c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80035a0:	f7fc fe72 	bl	8000288 <__aeabi_dsub>
 80035a4:	f805 6b01 	strb.w	r6, [r5], #1
 80035a8:	eba5 060b 	sub.w	r6, r5, fp
 80035ac:	45b1      	cmp	r9, r6
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	d139      	bne.n	8003628 <_dtoa_r+0x6c8>
 80035b4:	f7fc fe6a 	bl	800028c <__adddf3>
 80035b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035bc:	4606      	mov	r6, r0
 80035be:	460f      	mov	r7, r1
 80035c0:	f7fd faaa 	bl	8000b18 <__aeabi_dcmpgt>
 80035c4:	b9c8      	cbnz	r0, 80035fa <_dtoa_r+0x69a>
 80035c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80035ca:	4630      	mov	r0, r6
 80035cc:	4639      	mov	r1, r7
 80035ce:	f7fd fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80035d2:	b110      	cbz	r0, 80035da <_dtoa_r+0x67a>
 80035d4:	f018 0f01 	tst.w	r8, #1
 80035d8:	d10f      	bne.n	80035fa <_dtoa_r+0x69a>
 80035da:	9904      	ldr	r1, [sp, #16]
 80035dc:	4620      	mov	r0, r4
 80035de:	f000 facc 	bl	8003b7a <_Bfree>
 80035e2:	2300      	movs	r3, #0
 80035e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80035e6:	702b      	strb	r3, [r5, #0]
 80035e8:	f10a 0301 	add.w	r3, sl, #1
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8241 	beq.w	8003a78 <_dtoa_r+0xb18>
 80035f6:	601d      	str	r5, [r3, #0]
 80035f8:	e23e      	b.n	8003a78 <_dtoa_r+0xb18>
 80035fa:	f8cd a020 	str.w	sl, [sp, #32]
 80035fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003602:	2a39      	cmp	r2, #57	; 0x39
 8003604:	f105 33ff 	add.w	r3, r5, #4294967295
 8003608:	d108      	bne.n	800361c <_dtoa_r+0x6bc>
 800360a:	459b      	cmp	fp, r3
 800360c:	d10a      	bne.n	8003624 <_dtoa_r+0x6c4>
 800360e:	9b08      	ldr	r3, [sp, #32]
 8003610:	3301      	adds	r3, #1
 8003612:	9308      	str	r3, [sp, #32]
 8003614:	2330      	movs	r3, #48	; 0x30
 8003616:	f88b 3000 	strb.w	r3, [fp]
 800361a:	465b      	mov	r3, fp
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	3201      	adds	r2, #1
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	e78c      	b.n	800353e <_dtoa_r+0x5de>
 8003624:	461d      	mov	r5, r3
 8003626:	e7ea      	b.n	80035fe <_dtoa_r+0x69e>
 8003628:	2200      	movs	r2, #0
 800362a:	4b9b      	ldr	r3, [pc, #620]	; (8003898 <_dtoa_r+0x938>)
 800362c:	f7fc ffe4 	bl	80005f8 <__aeabi_dmul>
 8003630:	2200      	movs	r2, #0
 8003632:	2300      	movs	r3, #0
 8003634:	4606      	mov	r6, r0
 8003636:	460f      	mov	r7, r1
 8003638:	f7fd fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 800363c:	2800      	cmp	r0, #0
 800363e:	d09a      	beq.n	8003576 <_dtoa_r+0x616>
 8003640:	e7cb      	b.n	80035da <_dtoa_r+0x67a>
 8003642:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003644:	2a00      	cmp	r2, #0
 8003646:	f000 808b 	beq.w	8003760 <_dtoa_r+0x800>
 800364a:	9a06      	ldr	r2, [sp, #24]
 800364c:	2a01      	cmp	r2, #1
 800364e:	dc6e      	bgt.n	800372e <_dtoa_r+0x7ce>
 8003650:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8003652:	2a00      	cmp	r2, #0
 8003654:	d067      	beq.n	8003726 <_dtoa_r+0x7c6>
 8003656:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800365a:	9f07      	ldr	r7, [sp, #28]
 800365c:	9d05      	ldr	r5, [sp, #20]
 800365e:	9a05      	ldr	r2, [sp, #20]
 8003660:	2101      	movs	r1, #1
 8003662:	441a      	add	r2, r3
 8003664:	4620      	mov	r0, r4
 8003666:	9205      	str	r2, [sp, #20]
 8003668:	4498      	add	r8, r3
 800366a:	f000 fb26 	bl	8003cba <__i2b>
 800366e:	4606      	mov	r6, r0
 8003670:	2d00      	cmp	r5, #0
 8003672:	dd0c      	ble.n	800368e <_dtoa_r+0x72e>
 8003674:	f1b8 0f00 	cmp.w	r8, #0
 8003678:	dd09      	ble.n	800368e <_dtoa_r+0x72e>
 800367a:	4545      	cmp	r5, r8
 800367c:	9a05      	ldr	r2, [sp, #20]
 800367e:	462b      	mov	r3, r5
 8003680:	bfa8      	it	ge
 8003682:	4643      	movge	r3, r8
 8003684:	1ad2      	subs	r2, r2, r3
 8003686:	9205      	str	r2, [sp, #20]
 8003688:	1aed      	subs	r5, r5, r3
 800368a:	eba8 0803 	sub.w	r8, r8, r3
 800368e:	9b07      	ldr	r3, [sp, #28]
 8003690:	b1eb      	cbz	r3, 80036ce <_dtoa_r+0x76e>
 8003692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003694:	2b00      	cmp	r3, #0
 8003696:	d067      	beq.n	8003768 <_dtoa_r+0x808>
 8003698:	b18f      	cbz	r7, 80036be <_dtoa_r+0x75e>
 800369a:	4631      	mov	r1, r6
 800369c:	463a      	mov	r2, r7
 800369e:	4620      	mov	r0, r4
 80036a0:	f000 fbaa 	bl	8003df8 <__pow5mult>
 80036a4:	9a04      	ldr	r2, [sp, #16]
 80036a6:	4601      	mov	r1, r0
 80036a8:	4606      	mov	r6, r0
 80036aa:	4620      	mov	r0, r4
 80036ac:	f000 fb0e 	bl	8003ccc <__multiply>
 80036b0:	9904      	ldr	r1, [sp, #16]
 80036b2:	9008      	str	r0, [sp, #32]
 80036b4:	4620      	mov	r0, r4
 80036b6:	f000 fa60 	bl	8003b7a <_Bfree>
 80036ba:	9b08      	ldr	r3, [sp, #32]
 80036bc:	9304      	str	r3, [sp, #16]
 80036be:	9b07      	ldr	r3, [sp, #28]
 80036c0:	1bda      	subs	r2, r3, r7
 80036c2:	d004      	beq.n	80036ce <_dtoa_r+0x76e>
 80036c4:	9904      	ldr	r1, [sp, #16]
 80036c6:	4620      	mov	r0, r4
 80036c8:	f000 fb96 	bl	8003df8 <__pow5mult>
 80036cc:	9004      	str	r0, [sp, #16]
 80036ce:	2101      	movs	r1, #1
 80036d0:	4620      	mov	r0, r4
 80036d2:	f000 faf2 	bl	8003cba <__i2b>
 80036d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036d8:	4607      	mov	r7, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 81d0 	beq.w	8003a80 <_dtoa_r+0xb20>
 80036e0:	461a      	mov	r2, r3
 80036e2:	4601      	mov	r1, r0
 80036e4:	4620      	mov	r0, r4
 80036e6:	f000 fb87 	bl	8003df8 <__pow5mult>
 80036ea:	9b06      	ldr	r3, [sp, #24]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	4607      	mov	r7, r0
 80036f0:	dc40      	bgt.n	8003774 <_dtoa_r+0x814>
 80036f2:	9b00      	ldr	r3, [sp, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d139      	bne.n	800376c <_dtoa_r+0x80c>
 80036f8:	9b01      	ldr	r3, [sp, #4]
 80036fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d136      	bne.n	8003770 <_dtoa_r+0x810>
 8003702:	9b01      	ldr	r3, [sp, #4]
 8003704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003708:	0d1b      	lsrs	r3, r3, #20
 800370a:	051b      	lsls	r3, r3, #20
 800370c:	b12b      	cbz	r3, 800371a <_dtoa_r+0x7ba>
 800370e:	9b05      	ldr	r3, [sp, #20]
 8003710:	3301      	adds	r3, #1
 8003712:	9305      	str	r3, [sp, #20]
 8003714:	f108 0801 	add.w	r8, r8, #1
 8003718:	2301      	movs	r3, #1
 800371a:	9307      	str	r3, [sp, #28]
 800371c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800371e:	2b00      	cmp	r3, #0
 8003720:	d12a      	bne.n	8003778 <_dtoa_r+0x818>
 8003722:	2001      	movs	r0, #1
 8003724:	e030      	b.n	8003788 <_dtoa_r+0x828>
 8003726:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003728:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800372c:	e795      	b.n	800365a <_dtoa_r+0x6fa>
 800372e:	9b07      	ldr	r3, [sp, #28]
 8003730:	f109 37ff 	add.w	r7, r9, #4294967295
 8003734:	42bb      	cmp	r3, r7
 8003736:	bfbf      	itttt	lt
 8003738:	9b07      	ldrlt	r3, [sp, #28]
 800373a:	9707      	strlt	r7, [sp, #28]
 800373c:	1afa      	sublt	r2, r7, r3
 800373e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8003740:	bfbb      	ittet	lt
 8003742:	189b      	addlt	r3, r3, r2
 8003744:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003746:	1bdf      	subge	r7, r3, r7
 8003748:	2700      	movlt	r7, #0
 800374a:	f1b9 0f00 	cmp.w	r9, #0
 800374e:	bfb5      	itete	lt
 8003750:	9b05      	ldrlt	r3, [sp, #20]
 8003752:	9d05      	ldrge	r5, [sp, #20]
 8003754:	eba3 0509 	sublt.w	r5, r3, r9
 8003758:	464b      	movge	r3, r9
 800375a:	bfb8      	it	lt
 800375c:	2300      	movlt	r3, #0
 800375e:	e77e      	b.n	800365e <_dtoa_r+0x6fe>
 8003760:	9f07      	ldr	r7, [sp, #28]
 8003762:	9d05      	ldr	r5, [sp, #20]
 8003764:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003766:	e783      	b.n	8003670 <_dtoa_r+0x710>
 8003768:	9a07      	ldr	r2, [sp, #28]
 800376a:	e7ab      	b.n	80036c4 <_dtoa_r+0x764>
 800376c:	2300      	movs	r3, #0
 800376e:	e7d4      	b.n	800371a <_dtoa_r+0x7ba>
 8003770:	9b00      	ldr	r3, [sp, #0]
 8003772:	e7d2      	b.n	800371a <_dtoa_r+0x7ba>
 8003774:	2300      	movs	r3, #0
 8003776:	9307      	str	r3, [sp, #28]
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800377e:	6918      	ldr	r0, [r3, #16]
 8003780:	f000 fa4d 	bl	8003c1e <__hi0bits>
 8003784:	f1c0 0020 	rsb	r0, r0, #32
 8003788:	4440      	add	r0, r8
 800378a:	f010 001f 	ands.w	r0, r0, #31
 800378e:	d047      	beq.n	8003820 <_dtoa_r+0x8c0>
 8003790:	f1c0 0320 	rsb	r3, r0, #32
 8003794:	2b04      	cmp	r3, #4
 8003796:	dd3b      	ble.n	8003810 <_dtoa_r+0x8b0>
 8003798:	9b05      	ldr	r3, [sp, #20]
 800379a:	f1c0 001c 	rsb	r0, r0, #28
 800379e:	4403      	add	r3, r0
 80037a0:	9305      	str	r3, [sp, #20]
 80037a2:	4405      	add	r5, r0
 80037a4:	4480      	add	r8, r0
 80037a6:	9b05      	ldr	r3, [sp, #20]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	dd05      	ble.n	80037b8 <_dtoa_r+0x858>
 80037ac:	461a      	mov	r2, r3
 80037ae:	9904      	ldr	r1, [sp, #16]
 80037b0:	4620      	mov	r0, r4
 80037b2:	f000 fb6f 	bl	8003e94 <__lshift>
 80037b6:	9004      	str	r0, [sp, #16]
 80037b8:	f1b8 0f00 	cmp.w	r8, #0
 80037bc:	dd05      	ble.n	80037ca <_dtoa_r+0x86a>
 80037be:	4639      	mov	r1, r7
 80037c0:	4642      	mov	r2, r8
 80037c2:	4620      	mov	r0, r4
 80037c4:	f000 fb66 	bl	8003e94 <__lshift>
 80037c8:	4607      	mov	r7, r0
 80037ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80037cc:	b353      	cbz	r3, 8003824 <_dtoa_r+0x8c4>
 80037ce:	4639      	mov	r1, r7
 80037d0:	9804      	ldr	r0, [sp, #16]
 80037d2:	f000 fbb3 	bl	8003f3c <__mcmp>
 80037d6:	2800      	cmp	r0, #0
 80037d8:	da24      	bge.n	8003824 <_dtoa_r+0x8c4>
 80037da:	2300      	movs	r3, #0
 80037dc:	220a      	movs	r2, #10
 80037de:	9904      	ldr	r1, [sp, #16]
 80037e0:	4620      	mov	r0, r4
 80037e2:	f000 f9e1 	bl	8003ba8 <__multadd>
 80037e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037e8:	9004      	str	r0, [sp, #16]
 80037ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 814d 	beq.w	8003a8e <_dtoa_r+0xb2e>
 80037f4:	2300      	movs	r3, #0
 80037f6:	4631      	mov	r1, r6
 80037f8:	220a      	movs	r2, #10
 80037fa:	4620      	mov	r0, r4
 80037fc:	f000 f9d4 	bl	8003ba8 <__multadd>
 8003800:	9b02      	ldr	r3, [sp, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	4606      	mov	r6, r0
 8003806:	dc4f      	bgt.n	80038a8 <_dtoa_r+0x948>
 8003808:	9b06      	ldr	r3, [sp, #24]
 800380a:	2b02      	cmp	r3, #2
 800380c:	dd4c      	ble.n	80038a8 <_dtoa_r+0x948>
 800380e:	e011      	b.n	8003834 <_dtoa_r+0x8d4>
 8003810:	d0c9      	beq.n	80037a6 <_dtoa_r+0x846>
 8003812:	9a05      	ldr	r2, [sp, #20]
 8003814:	331c      	adds	r3, #28
 8003816:	441a      	add	r2, r3
 8003818:	9205      	str	r2, [sp, #20]
 800381a:	441d      	add	r5, r3
 800381c:	4498      	add	r8, r3
 800381e:	e7c2      	b.n	80037a6 <_dtoa_r+0x846>
 8003820:	4603      	mov	r3, r0
 8003822:	e7f6      	b.n	8003812 <_dtoa_r+0x8b2>
 8003824:	f1b9 0f00 	cmp.w	r9, #0
 8003828:	dc38      	bgt.n	800389c <_dtoa_r+0x93c>
 800382a:	9b06      	ldr	r3, [sp, #24]
 800382c:	2b02      	cmp	r3, #2
 800382e:	dd35      	ble.n	800389c <_dtoa_r+0x93c>
 8003830:	f8cd 9008 	str.w	r9, [sp, #8]
 8003834:	9b02      	ldr	r3, [sp, #8]
 8003836:	b963      	cbnz	r3, 8003852 <_dtoa_r+0x8f2>
 8003838:	4639      	mov	r1, r7
 800383a:	2205      	movs	r2, #5
 800383c:	4620      	mov	r0, r4
 800383e:	f000 f9b3 	bl	8003ba8 <__multadd>
 8003842:	4601      	mov	r1, r0
 8003844:	4607      	mov	r7, r0
 8003846:	9804      	ldr	r0, [sp, #16]
 8003848:	f000 fb78 	bl	8003f3c <__mcmp>
 800384c:	2800      	cmp	r0, #0
 800384e:	f73f adcc 	bgt.w	80033ea <_dtoa_r+0x48a>
 8003852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003854:	465d      	mov	r5, fp
 8003856:	ea6f 0a03 	mvn.w	sl, r3
 800385a:	f04f 0900 	mov.w	r9, #0
 800385e:	4639      	mov	r1, r7
 8003860:	4620      	mov	r0, r4
 8003862:	f000 f98a 	bl	8003b7a <_Bfree>
 8003866:	2e00      	cmp	r6, #0
 8003868:	f43f aeb7 	beq.w	80035da <_dtoa_r+0x67a>
 800386c:	f1b9 0f00 	cmp.w	r9, #0
 8003870:	d005      	beq.n	800387e <_dtoa_r+0x91e>
 8003872:	45b1      	cmp	r9, r6
 8003874:	d003      	beq.n	800387e <_dtoa_r+0x91e>
 8003876:	4649      	mov	r1, r9
 8003878:	4620      	mov	r0, r4
 800387a:	f000 f97e 	bl	8003b7a <_Bfree>
 800387e:	4631      	mov	r1, r6
 8003880:	4620      	mov	r0, r4
 8003882:	f000 f97a 	bl	8003b7a <_Bfree>
 8003886:	e6a8      	b.n	80035da <_dtoa_r+0x67a>
 8003888:	2700      	movs	r7, #0
 800388a:	463e      	mov	r6, r7
 800388c:	e7e1      	b.n	8003852 <_dtoa_r+0x8f2>
 800388e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8003892:	463e      	mov	r6, r7
 8003894:	e5a9      	b.n	80033ea <_dtoa_r+0x48a>
 8003896:	bf00      	nop
 8003898:	40240000 	.word	0x40240000
 800389c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800389e:	f8cd 9008 	str.w	r9, [sp, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 80fa 	beq.w	8003a9c <_dtoa_r+0xb3c>
 80038a8:	2d00      	cmp	r5, #0
 80038aa:	dd05      	ble.n	80038b8 <_dtoa_r+0x958>
 80038ac:	4631      	mov	r1, r6
 80038ae:	462a      	mov	r2, r5
 80038b0:	4620      	mov	r0, r4
 80038b2:	f000 faef 	bl	8003e94 <__lshift>
 80038b6:	4606      	mov	r6, r0
 80038b8:	9b07      	ldr	r3, [sp, #28]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d04c      	beq.n	8003958 <_dtoa_r+0x9f8>
 80038be:	6871      	ldr	r1, [r6, #4]
 80038c0:	4620      	mov	r0, r4
 80038c2:	f000 f926 	bl	8003b12 <_Balloc>
 80038c6:	6932      	ldr	r2, [r6, #16]
 80038c8:	3202      	adds	r2, #2
 80038ca:	4605      	mov	r5, r0
 80038cc:	0092      	lsls	r2, r2, #2
 80038ce:	f106 010c 	add.w	r1, r6, #12
 80038d2:	300c      	adds	r0, #12
 80038d4:	f000 f912 	bl	8003afc <memcpy>
 80038d8:	2201      	movs	r2, #1
 80038da:	4629      	mov	r1, r5
 80038dc:	4620      	mov	r0, r4
 80038de:	f000 fad9 	bl	8003e94 <__lshift>
 80038e2:	9b00      	ldr	r3, [sp, #0]
 80038e4:	f8cd b014 	str.w	fp, [sp, #20]
 80038e8:	f003 0301 	and.w	r3, r3, #1
 80038ec:	46b1      	mov	r9, r6
 80038ee:	9307      	str	r3, [sp, #28]
 80038f0:	4606      	mov	r6, r0
 80038f2:	4639      	mov	r1, r7
 80038f4:	9804      	ldr	r0, [sp, #16]
 80038f6:	f7ff faa6 	bl	8002e46 <quorem>
 80038fa:	4649      	mov	r1, r9
 80038fc:	4605      	mov	r5, r0
 80038fe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003902:	9804      	ldr	r0, [sp, #16]
 8003904:	f000 fb1a 	bl	8003f3c <__mcmp>
 8003908:	4632      	mov	r2, r6
 800390a:	9000      	str	r0, [sp, #0]
 800390c:	4639      	mov	r1, r7
 800390e:	4620      	mov	r0, r4
 8003910:	f000 fb2e 	bl	8003f70 <__mdiff>
 8003914:	68c3      	ldr	r3, [r0, #12]
 8003916:	4602      	mov	r2, r0
 8003918:	bb03      	cbnz	r3, 800395c <_dtoa_r+0x9fc>
 800391a:	4601      	mov	r1, r0
 800391c:	9008      	str	r0, [sp, #32]
 800391e:	9804      	ldr	r0, [sp, #16]
 8003920:	f000 fb0c 	bl	8003f3c <__mcmp>
 8003924:	9a08      	ldr	r2, [sp, #32]
 8003926:	4603      	mov	r3, r0
 8003928:	4611      	mov	r1, r2
 800392a:	4620      	mov	r0, r4
 800392c:	9308      	str	r3, [sp, #32]
 800392e:	f000 f924 	bl	8003b7a <_Bfree>
 8003932:	9b08      	ldr	r3, [sp, #32]
 8003934:	b9a3      	cbnz	r3, 8003960 <_dtoa_r+0xa00>
 8003936:	9a06      	ldr	r2, [sp, #24]
 8003938:	b992      	cbnz	r2, 8003960 <_dtoa_r+0xa00>
 800393a:	9a07      	ldr	r2, [sp, #28]
 800393c:	b982      	cbnz	r2, 8003960 <_dtoa_r+0xa00>
 800393e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003942:	d029      	beq.n	8003998 <_dtoa_r+0xa38>
 8003944:	9b00      	ldr	r3, [sp, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	dd01      	ble.n	800394e <_dtoa_r+0x9ee>
 800394a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800394e:	9b05      	ldr	r3, [sp, #20]
 8003950:	1c5d      	adds	r5, r3, #1
 8003952:	f883 8000 	strb.w	r8, [r3]
 8003956:	e782      	b.n	800385e <_dtoa_r+0x8fe>
 8003958:	4630      	mov	r0, r6
 800395a:	e7c2      	b.n	80038e2 <_dtoa_r+0x982>
 800395c:	2301      	movs	r3, #1
 800395e:	e7e3      	b.n	8003928 <_dtoa_r+0x9c8>
 8003960:	9a00      	ldr	r2, [sp, #0]
 8003962:	2a00      	cmp	r2, #0
 8003964:	db04      	blt.n	8003970 <_dtoa_r+0xa10>
 8003966:	d125      	bne.n	80039b4 <_dtoa_r+0xa54>
 8003968:	9a06      	ldr	r2, [sp, #24]
 800396a:	bb1a      	cbnz	r2, 80039b4 <_dtoa_r+0xa54>
 800396c:	9a07      	ldr	r2, [sp, #28]
 800396e:	bb0a      	cbnz	r2, 80039b4 <_dtoa_r+0xa54>
 8003970:	2b00      	cmp	r3, #0
 8003972:	ddec      	ble.n	800394e <_dtoa_r+0x9ee>
 8003974:	2201      	movs	r2, #1
 8003976:	9904      	ldr	r1, [sp, #16]
 8003978:	4620      	mov	r0, r4
 800397a:	f000 fa8b 	bl	8003e94 <__lshift>
 800397e:	4639      	mov	r1, r7
 8003980:	9004      	str	r0, [sp, #16]
 8003982:	f000 fadb 	bl	8003f3c <__mcmp>
 8003986:	2800      	cmp	r0, #0
 8003988:	dc03      	bgt.n	8003992 <_dtoa_r+0xa32>
 800398a:	d1e0      	bne.n	800394e <_dtoa_r+0x9ee>
 800398c:	f018 0f01 	tst.w	r8, #1
 8003990:	d0dd      	beq.n	800394e <_dtoa_r+0x9ee>
 8003992:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003996:	d1d8      	bne.n	800394a <_dtoa_r+0x9ea>
 8003998:	9b05      	ldr	r3, [sp, #20]
 800399a:	9a05      	ldr	r2, [sp, #20]
 800399c:	1c5d      	adds	r5, r3, #1
 800399e:	2339      	movs	r3, #57	; 0x39
 80039a0:	7013      	strb	r3, [r2, #0]
 80039a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80039a6:	2b39      	cmp	r3, #57	; 0x39
 80039a8:	f105 32ff 	add.w	r2, r5, #4294967295
 80039ac:	d04f      	beq.n	8003a4e <_dtoa_r+0xaee>
 80039ae:	3301      	adds	r3, #1
 80039b0:	7013      	strb	r3, [r2, #0]
 80039b2:	e754      	b.n	800385e <_dtoa_r+0x8fe>
 80039b4:	9a05      	ldr	r2, [sp, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	f102 0501 	add.w	r5, r2, #1
 80039bc:	dd06      	ble.n	80039cc <_dtoa_r+0xa6c>
 80039be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80039c2:	d0e9      	beq.n	8003998 <_dtoa_r+0xa38>
 80039c4:	f108 0801 	add.w	r8, r8, #1
 80039c8:	9b05      	ldr	r3, [sp, #20]
 80039ca:	e7c2      	b.n	8003952 <_dtoa_r+0x9f2>
 80039cc:	9a02      	ldr	r2, [sp, #8]
 80039ce:	f805 8c01 	strb.w	r8, [r5, #-1]
 80039d2:	eba5 030b 	sub.w	r3, r5, fp
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d021      	beq.n	8003a1e <_dtoa_r+0xabe>
 80039da:	2300      	movs	r3, #0
 80039dc:	220a      	movs	r2, #10
 80039de:	9904      	ldr	r1, [sp, #16]
 80039e0:	4620      	mov	r0, r4
 80039e2:	f000 f8e1 	bl	8003ba8 <__multadd>
 80039e6:	45b1      	cmp	r9, r6
 80039e8:	9004      	str	r0, [sp, #16]
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	f04f 020a 	mov.w	r2, #10
 80039f2:	4649      	mov	r1, r9
 80039f4:	4620      	mov	r0, r4
 80039f6:	d105      	bne.n	8003a04 <_dtoa_r+0xaa4>
 80039f8:	f000 f8d6 	bl	8003ba8 <__multadd>
 80039fc:	4681      	mov	r9, r0
 80039fe:	4606      	mov	r6, r0
 8003a00:	9505      	str	r5, [sp, #20]
 8003a02:	e776      	b.n	80038f2 <_dtoa_r+0x992>
 8003a04:	f000 f8d0 	bl	8003ba8 <__multadd>
 8003a08:	4631      	mov	r1, r6
 8003a0a:	4681      	mov	r9, r0
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	220a      	movs	r2, #10
 8003a10:	4620      	mov	r0, r4
 8003a12:	f000 f8c9 	bl	8003ba8 <__multadd>
 8003a16:	4606      	mov	r6, r0
 8003a18:	e7f2      	b.n	8003a00 <_dtoa_r+0xaa0>
 8003a1a:	f04f 0900 	mov.w	r9, #0
 8003a1e:	2201      	movs	r2, #1
 8003a20:	9904      	ldr	r1, [sp, #16]
 8003a22:	4620      	mov	r0, r4
 8003a24:	f000 fa36 	bl	8003e94 <__lshift>
 8003a28:	4639      	mov	r1, r7
 8003a2a:	9004      	str	r0, [sp, #16]
 8003a2c:	f000 fa86 	bl	8003f3c <__mcmp>
 8003a30:	2800      	cmp	r0, #0
 8003a32:	dcb6      	bgt.n	80039a2 <_dtoa_r+0xa42>
 8003a34:	d102      	bne.n	8003a3c <_dtoa_r+0xadc>
 8003a36:	f018 0f01 	tst.w	r8, #1
 8003a3a:	d1b2      	bne.n	80039a2 <_dtoa_r+0xa42>
 8003a3c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003a40:	2b30      	cmp	r3, #48	; 0x30
 8003a42:	f105 32ff 	add.w	r2, r5, #4294967295
 8003a46:	f47f af0a 	bne.w	800385e <_dtoa_r+0x8fe>
 8003a4a:	4615      	mov	r5, r2
 8003a4c:	e7f6      	b.n	8003a3c <_dtoa_r+0xadc>
 8003a4e:	4593      	cmp	fp, r2
 8003a50:	d105      	bne.n	8003a5e <_dtoa_r+0xafe>
 8003a52:	2331      	movs	r3, #49	; 0x31
 8003a54:	f10a 0a01 	add.w	sl, sl, #1
 8003a58:	f88b 3000 	strb.w	r3, [fp]
 8003a5c:	e6ff      	b.n	800385e <_dtoa_r+0x8fe>
 8003a5e:	4615      	mov	r5, r2
 8003a60:	e79f      	b.n	80039a2 <_dtoa_r+0xa42>
 8003a62:	f8df b064 	ldr.w	fp, [pc, #100]	; 8003ac8 <_dtoa_r+0xb68>
 8003a66:	e007      	b.n	8003a78 <_dtoa_r+0xb18>
 8003a68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a6a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8003acc <_dtoa_r+0xb6c>
 8003a6e:	b11b      	cbz	r3, 8003a78 <_dtoa_r+0xb18>
 8003a70:	f10b 0308 	add.w	r3, fp, #8
 8003a74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4658      	mov	r0, fp
 8003a7a:	b017      	add	sp, #92	; 0x5c
 8003a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a80:	9b06      	ldr	r3, [sp, #24]
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	f77f ae35 	ble.w	80036f2 <_dtoa_r+0x792>
 8003a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a8a:	9307      	str	r3, [sp, #28]
 8003a8c:	e649      	b.n	8003722 <_dtoa_r+0x7c2>
 8003a8e:	9b02      	ldr	r3, [sp, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	dc03      	bgt.n	8003a9c <_dtoa_r+0xb3c>
 8003a94:	9b06      	ldr	r3, [sp, #24]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	f73f aecc 	bgt.w	8003834 <_dtoa_r+0x8d4>
 8003a9c:	465d      	mov	r5, fp
 8003a9e:	4639      	mov	r1, r7
 8003aa0:	9804      	ldr	r0, [sp, #16]
 8003aa2:	f7ff f9d0 	bl	8002e46 <quorem>
 8003aa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003aaa:	f805 8b01 	strb.w	r8, [r5], #1
 8003aae:	9a02      	ldr	r2, [sp, #8]
 8003ab0:	eba5 030b 	sub.w	r3, r5, fp
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	ddb0      	ble.n	8003a1a <_dtoa_r+0xaba>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	220a      	movs	r2, #10
 8003abc:	9904      	ldr	r1, [sp, #16]
 8003abe:	4620      	mov	r0, r4
 8003ac0:	f000 f872 	bl	8003ba8 <__multadd>
 8003ac4:	9004      	str	r0, [sp, #16]
 8003ac6:	e7ea      	b.n	8003a9e <_dtoa_r+0xb3e>
 8003ac8:	0800468f 	.word	0x0800468f
 8003acc:	080047b4 	.word	0x080047b4

08003ad0 <_localeconv_r>:
 8003ad0:	4b04      	ldr	r3, [pc, #16]	; (8003ae4 <_localeconv_r+0x14>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a18      	ldr	r0, [r3, #32]
 8003ad6:	4b04      	ldr	r3, [pc, #16]	; (8003ae8 <_localeconv_r+0x18>)
 8003ad8:	2800      	cmp	r0, #0
 8003ada:	bf08      	it	eq
 8003adc:	4618      	moveq	r0, r3
 8003ade:	30f0      	adds	r0, #240	; 0xf0
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	2000003c 	.word	0x2000003c
 8003ae8:	200000a0 	.word	0x200000a0

08003aec <malloc>:
 8003aec:	4b02      	ldr	r3, [pc, #8]	; (8003af8 <malloc+0xc>)
 8003aee:	4601      	mov	r1, r0
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	f000 bb45 	b.w	8004180 <_malloc_r>
 8003af6:	bf00      	nop
 8003af8:	2000003c 	.word	0x2000003c

08003afc <memcpy>:
 8003afc:	b510      	push	{r4, lr}
 8003afe:	1e43      	subs	r3, r0, #1
 8003b00:	440a      	add	r2, r1
 8003b02:	4291      	cmp	r1, r2
 8003b04:	d100      	bne.n	8003b08 <memcpy+0xc>
 8003b06:	bd10      	pop	{r4, pc}
 8003b08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b0c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b10:	e7f7      	b.n	8003b02 <memcpy+0x6>

08003b12 <_Balloc>:
 8003b12:	b570      	push	{r4, r5, r6, lr}
 8003b14:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003b16:	4604      	mov	r4, r0
 8003b18:	460e      	mov	r6, r1
 8003b1a:	b93d      	cbnz	r5, 8003b2c <_Balloc+0x1a>
 8003b1c:	2010      	movs	r0, #16
 8003b1e:	f7ff ffe5 	bl	8003aec <malloc>
 8003b22:	6260      	str	r0, [r4, #36]	; 0x24
 8003b24:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003b28:	6005      	str	r5, [r0, #0]
 8003b2a:	60c5      	str	r5, [r0, #12]
 8003b2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003b2e:	68eb      	ldr	r3, [r5, #12]
 8003b30:	b183      	cbz	r3, 8003b54 <_Balloc+0x42>
 8003b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003b3a:	b9b8      	cbnz	r0, 8003b6c <_Balloc+0x5a>
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	fa01 f506 	lsl.w	r5, r1, r6
 8003b42:	1d6a      	adds	r2, r5, #5
 8003b44:	0092      	lsls	r2, r2, #2
 8003b46:	4620      	mov	r0, r4
 8003b48:	f000 fabe 	bl	80040c8 <_calloc_r>
 8003b4c:	b160      	cbz	r0, 8003b68 <_Balloc+0x56>
 8003b4e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8003b52:	e00e      	b.n	8003b72 <_Balloc+0x60>
 8003b54:	2221      	movs	r2, #33	; 0x21
 8003b56:	2104      	movs	r1, #4
 8003b58:	4620      	mov	r0, r4
 8003b5a:	f000 fab5 	bl	80040c8 <_calloc_r>
 8003b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b60:	60e8      	str	r0, [r5, #12]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e4      	bne.n	8003b32 <_Balloc+0x20>
 8003b68:	2000      	movs	r0, #0
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	6802      	ldr	r2, [r0, #0]
 8003b6e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8003b72:	2300      	movs	r3, #0
 8003b74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003b78:	e7f7      	b.n	8003b6a <_Balloc+0x58>

08003b7a <_Bfree>:
 8003b7a:	b570      	push	{r4, r5, r6, lr}
 8003b7c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003b7e:	4606      	mov	r6, r0
 8003b80:	460d      	mov	r5, r1
 8003b82:	b93c      	cbnz	r4, 8003b94 <_Bfree+0x1a>
 8003b84:	2010      	movs	r0, #16
 8003b86:	f7ff ffb1 	bl	8003aec <malloc>
 8003b8a:	6270      	str	r0, [r6, #36]	; 0x24
 8003b8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003b90:	6004      	str	r4, [r0, #0]
 8003b92:	60c4      	str	r4, [r0, #12]
 8003b94:	b13d      	cbz	r5, 8003ba6 <_Bfree+0x2c>
 8003b96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003b98:	686a      	ldr	r2, [r5, #4]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ba0:	6029      	str	r1, [r5, #0]
 8003ba2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}

08003ba8 <__multadd>:
 8003ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bac:	690d      	ldr	r5, [r1, #16]
 8003bae:	461f      	mov	r7, r3
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	460c      	mov	r4, r1
 8003bb4:	f101 0c14 	add.w	ip, r1, #20
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f8dc 0000 	ldr.w	r0, [ip]
 8003bbe:	b281      	uxth	r1, r0
 8003bc0:	fb02 7101 	mla	r1, r2, r1, r7
 8003bc4:	0c0f      	lsrs	r7, r1, #16
 8003bc6:	0c00      	lsrs	r0, r0, #16
 8003bc8:	fb02 7000 	mla	r0, r2, r0, r7
 8003bcc:	b289      	uxth	r1, r1
 8003bce:	3301      	adds	r3, #1
 8003bd0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003bd4:	429d      	cmp	r5, r3
 8003bd6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003bda:	f84c 1b04 	str.w	r1, [ip], #4
 8003bde:	dcec      	bgt.n	8003bba <__multadd+0x12>
 8003be0:	b1d7      	cbz	r7, 8003c18 <__multadd+0x70>
 8003be2:	68a3      	ldr	r3, [r4, #8]
 8003be4:	42ab      	cmp	r3, r5
 8003be6:	dc12      	bgt.n	8003c0e <__multadd+0x66>
 8003be8:	6861      	ldr	r1, [r4, #4]
 8003bea:	4630      	mov	r0, r6
 8003bec:	3101      	adds	r1, #1
 8003bee:	f7ff ff90 	bl	8003b12 <_Balloc>
 8003bf2:	6922      	ldr	r2, [r4, #16]
 8003bf4:	3202      	adds	r2, #2
 8003bf6:	f104 010c 	add.w	r1, r4, #12
 8003bfa:	4680      	mov	r8, r0
 8003bfc:	0092      	lsls	r2, r2, #2
 8003bfe:	300c      	adds	r0, #12
 8003c00:	f7ff ff7c 	bl	8003afc <memcpy>
 8003c04:	4621      	mov	r1, r4
 8003c06:	4630      	mov	r0, r6
 8003c08:	f7ff ffb7 	bl	8003b7a <_Bfree>
 8003c0c:	4644      	mov	r4, r8
 8003c0e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c12:	3501      	adds	r5, #1
 8003c14:	615f      	str	r7, [r3, #20]
 8003c16:	6125      	str	r5, [r4, #16]
 8003c18:	4620      	mov	r0, r4
 8003c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003c1e <__hi0bits>:
 8003c1e:	0c02      	lsrs	r2, r0, #16
 8003c20:	0412      	lsls	r2, r2, #16
 8003c22:	4603      	mov	r3, r0
 8003c24:	b9b2      	cbnz	r2, 8003c54 <__hi0bits+0x36>
 8003c26:	0403      	lsls	r3, r0, #16
 8003c28:	2010      	movs	r0, #16
 8003c2a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003c2e:	bf04      	itt	eq
 8003c30:	021b      	lsleq	r3, r3, #8
 8003c32:	3008      	addeq	r0, #8
 8003c34:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003c38:	bf04      	itt	eq
 8003c3a:	011b      	lsleq	r3, r3, #4
 8003c3c:	3004      	addeq	r0, #4
 8003c3e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003c42:	bf04      	itt	eq
 8003c44:	009b      	lsleq	r3, r3, #2
 8003c46:	3002      	addeq	r0, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	db06      	blt.n	8003c5a <__hi0bits+0x3c>
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	d503      	bpl.n	8003c58 <__hi0bits+0x3a>
 8003c50:	3001      	adds	r0, #1
 8003c52:	4770      	bx	lr
 8003c54:	2000      	movs	r0, #0
 8003c56:	e7e8      	b.n	8003c2a <__hi0bits+0xc>
 8003c58:	2020      	movs	r0, #32
 8003c5a:	4770      	bx	lr

08003c5c <__lo0bits>:
 8003c5c:	6803      	ldr	r3, [r0, #0]
 8003c5e:	f013 0207 	ands.w	r2, r3, #7
 8003c62:	4601      	mov	r1, r0
 8003c64:	d00b      	beq.n	8003c7e <__lo0bits+0x22>
 8003c66:	07da      	lsls	r2, r3, #31
 8003c68:	d423      	bmi.n	8003cb2 <__lo0bits+0x56>
 8003c6a:	0798      	lsls	r0, r3, #30
 8003c6c:	bf49      	itett	mi
 8003c6e:	085b      	lsrmi	r3, r3, #1
 8003c70:	089b      	lsrpl	r3, r3, #2
 8003c72:	2001      	movmi	r0, #1
 8003c74:	600b      	strmi	r3, [r1, #0]
 8003c76:	bf5c      	itt	pl
 8003c78:	600b      	strpl	r3, [r1, #0]
 8003c7a:	2002      	movpl	r0, #2
 8003c7c:	4770      	bx	lr
 8003c7e:	b298      	uxth	r0, r3
 8003c80:	b9a8      	cbnz	r0, 8003cae <__lo0bits+0x52>
 8003c82:	0c1b      	lsrs	r3, r3, #16
 8003c84:	2010      	movs	r0, #16
 8003c86:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003c8a:	bf04      	itt	eq
 8003c8c:	0a1b      	lsreq	r3, r3, #8
 8003c8e:	3008      	addeq	r0, #8
 8003c90:	071a      	lsls	r2, r3, #28
 8003c92:	bf04      	itt	eq
 8003c94:	091b      	lsreq	r3, r3, #4
 8003c96:	3004      	addeq	r0, #4
 8003c98:	079a      	lsls	r2, r3, #30
 8003c9a:	bf04      	itt	eq
 8003c9c:	089b      	lsreq	r3, r3, #2
 8003c9e:	3002      	addeq	r0, #2
 8003ca0:	07da      	lsls	r2, r3, #31
 8003ca2:	d402      	bmi.n	8003caa <__lo0bits+0x4e>
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	d006      	beq.n	8003cb6 <__lo0bits+0x5a>
 8003ca8:	3001      	adds	r0, #1
 8003caa:	600b      	str	r3, [r1, #0]
 8003cac:	4770      	bx	lr
 8003cae:	4610      	mov	r0, r2
 8003cb0:	e7e9      	b.n	8003c86 <__lo0bits+0x2a>
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	4770      	bx	lr
 8003cb6:	2020      	movs	r0, #32
 8003cb8:	4770      	bx	lr

08003cba <__i2b>:
 8003cba:	b510      	push	{r4, lr}
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	f7ff ff27 	bl	8003b12 <_Balloc>
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	6144      	str	r4, [r0, #20]
 8003cc8:	6102      	str	r2, [r0, #16]
 8003cca:	bd10      	pop	{r4, pc}

08003ccc <__multiply>:
 8003ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cd0:	4614      	mov	r4, r2
 8003cd2:	690a      	ldr	r2, [r1, #16]
 8003cd4:	6923      	ldr	r3, [r4, #16]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	bfb8      	it	lt
 8003cda:	460b      	movlt	r3, r1
 8003cdc:	4688      	mov	r8, r1
 8003cde:	bfbc      	itt	lt
 8003ce0:	46a0      	movlt	r8, r4
 8003ce2:	461c      	movlt	r4, r3
 8003ce4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8003ce8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003cec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003cf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8003cf4:	eb07 0609 	add.w	r6, r7, r9
 8003cf8:	42b3      	cmp	r3, r6
 8003cfa:	bfb8      	it	lt
 8003cfc:	3101      	addlt	r1, #1
 8003cfe:	f7ff ff08 	bl	8003b12 <_Balloc>
 8003d02:	f100 0514 	add.w	r5, r0, #20
 8003d06:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003d0a:	462b      	mov	r3, r5
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4573      	cmp	r3, lr
 8003d10:	d316      	bcc.n	8003d40 <__multiply+0x74>
 8003d12:	f104 0214 	add.w	r2, r4, #20
 8003d16:	f108 0114 	add.w	r1, r8, #20
 8003d1a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8003d1e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	9b00      	ldr	r3, [sp, #0]
 8003d26:	9201      	str	r2, [sp, #4]
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d80c      	bhi.n	8003d46 <__multiply+0x7a>
 8003d2c:	2e00      	cmp	r6, #0
 8003d2e:	dd03      	ble.n	8003d38 <__multiply+0x6c>
 8003d30:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d05d      	beq.n	8003df4 <__multiply+0x128>
 8003d38:	6106      	str	r6, [r0, #16]
 8003d3a:	b003      	add	sp, #12
 8003d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d40:	f843 2b04 	str.w	r2, [r3], #4
 8003d44:	e7e3      	b.n	8003d0e <__multiply+0x42>
 8003d46:	f8b2 b000 	ldrh.w	fp, [r2]
 8003d4a:	f1bb 0f00 	cmp.w	fp, #0
 8003d4e:	d023      	beq.n	8003d98 <__multiply+0xcc>
 8003d50:	4689      	mov	r9, r1
 8003d52:	46ac      	mov	ip, r5
 8003d54:	f04f 0800 	mov.w	r8, #0
 8003d58:	f859 4b04 	ldr.w	r4, [r9], #4
 8003d5c:	f8dc a000 	ldr.w	sl, [ip]
 8003d60:	b2a3      	uxth	r3, r4
 8003d62:	fa1f fa8a 	uxth.w	sl, sl
 8003d66:	fb0b a303 	mla	r3, fp, r3, sl
 8003d6a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003d6e:	f8dc 4000 	ldr.w	r4, [ip]
 8003d72:	4443      	add	r3, r8
 8003d74:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003d78:	fb0b 840a 	mla	r4, fp, sl, r8
 8003d7c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8003d80:	46e2      	mov	sl, ip
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003d88:	454f      	cmp	r7, r9
 8003d8a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8003d8e:	f84a 3b04 	str.w	r3, [sl], #4
 8003d92:	d82b      	bhi.n	8003dec <__multiply+0x120>
 8003d94:	f8cc 8004 	str.w	r8, [ip, #4]
 8003d98:	9b01      	ldr	r3, [sp, #4]
 8003d9a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8003d9e:	3204      	adds	r2, #4
 8003da0:	f1ba 0f00 	cmp.w	sl, #0
 8003da4:	d020      	beq.n	8003de8 <__multiply+0x11c>
 8003da6:	682b      	ldr	r3, [r5, #0]
 8003da8:	4689      	mov	r9, r1
 8003daa:	46a8      	mov	r8, r5
 8003dac:	f04f 0b00 	mov.w	fp, #0
 8003db0:	f8b9 c000 	ldrh.w	ip, [r9]
 8003db4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003db8:	fb0a 440c 	mla	r4, sl, ip, r4
 8003dbc:	445c      	add	r4, fp
 8003dbe:	46c4      	mov	ip, r8
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003dc6:	f84c 3b04 	str.w	r3, [ip], #4
 8003dca:	f859 3b04 	ldr.w	r3, [r9], #4
 8003dce:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003dd2:	0c1b      	lsrs	r3, r3, #16
 8003dd4:	fb0a b303 	mla	r3, sl, r3, fp
 8003dd8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003ddc:	454f      	cmp	r7, r9
 8003dde:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003de2:	d805      	bhi.n	8003df0 <__multiply+0x124>
 8003de4:	f8c8 3004 	str.w	r3, [r8, #4]
 8003de8:	3504      	adds	r5, #4
 8003dea:	e79b      	b.n	8003d24 <__multiply+0x58>
 8003dec:	46d4      	mov	ip, sl
 8003dee:	e7b3      	b.n	8003d58 <__multiply+0x8c>
 8003df0:	46e0      	mov	r8, ip
 8003df2:	e7dd      	b.n	8003db0 <__multiply+0xe4>
 8003df4:	3e01      	subs	r6, #1
 8003df6:	e799      	b.n	8003d2c <__multiply+0x60>

08003df8 <__pow5mult>:
 8003df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dfc:	4615      	mov	r5, r2
 8003dfe:	f012 0203 	ands.w	r2, r2, #3
 8003e02:	4606      	mov	r6, r0
 8003e04:	460f      	mov	r7, r1
 8003e06:	d007      	beq.n	8003e18 <__pow5mult+0x20>
 8003e08:	3a01      	subs	r2, #1
 8003e0a:	4c21      	ldr	r4, [pc, #132]	; (8003e90 <__pow5mult+0x98>)
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e12:	f7ff fec9 	bl	8003ba8 <__multadd>
 8003e16:	4607      	mov	r7, r0
 8003e18:	10ad      	asrs	r5, r5, #2
 8003e1a:	d035      	beq.n	8003e88 <__pow5mult+0x90>
 8003e1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003e1e:	b93c      	cbnz	r4, 8003e30 <__pow5mult+0x38>
 8003e20:	2010      	movs	r0, #16
 8003e22:	f7ff fe63 	bl	8003aec <malloc>
 8003e26:	6270      	str	r0, [r6, #36]	; 0x24
 8003e28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003e2c:	6004      	str	r4, [r0, #0]
 8003e2e:	60c4      	str	r4, [r0, #12]
 8003e30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003e34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003e38:	b94c      	cbnz	r4, 8003e4e <__pow5mult+0x56>
 8003e3a:	f240 2171 	movw	r1, #625	; 0x271
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f7ff ff3b 	bl	8003cba <__i2b>
 8003e44:	2300      	movs	r3, #0
 8003e46:	f8c8 0008 	str.w	r0, [r8, #8]
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	6003      	str	r3, [r0, #0]
 8003e4e:	f04f 0800 	mov.w	r8, #0
 8003e52:	07eb      	lsls	r3, r5, #31
 8003e54:	d50a      	bpl.n	8003e6c <__pow5mult+0x74>
 8003e56:	4639      	mov	r1, r7
 8003e58:	4622      	mov	r2, r4
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	f7ff ff36 	bl	8003ccc <__multiply>
 8003e60:	4639      	mov	r1, r7
 8003e62:	4681      	mov	r9, r0
 8003e64:	4630      	mov	r0, r6
 8003e66:	f7ff fe88 	bl	8003b7a <_Bfree>
 8003e6a:	464f      	mov	r7, r9
 8003e6c:	106d      	asrs	r5, r5, #1
 8003e6e:	d00b      	beq.n	8003e88 <__pow5mult+0x90>
 8003e70:	6820      	ldr	r0, [r4, #0]
 8003e72:	b938      	cbnz	r0, 8003e84 <__pow5mult+0x8c>
 8003e74:	4622      	mov	r2, r4
 8003e76:	4621      	mov	r1, r4
 8003e78:	4630      	mov	r0, r6
 8003e7a:	f7ff ff27 	bl	8003ccc <__multiply>
 8003e7e:	6020      	str	r0, [r4, #0]
 8003e80:	f8c0 8000 	str.w	r8, [r0]
 8003e84:	4604      	mov	r4, r0
 8003e86:	e7e4      	b.n	8003e52 <__pow5mult+0x5a>
 8003e88:	4638      	mov	r0, r7
 8003e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e8e:	bf00      	nop
 8003e90:	080048b8 	.word	0x080048b8

08003e94 <__lshift>:
 8003e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e98:	460c      	mov	r4, r1
 8003e9a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003e9e:	6923      	ldr	r3, [r4, #16]
 8003ea0:	6849      	ldr	r1, [r1, #4]
 8003ea2:	eb0a 0903 	add.w	r9, sl, r3
 8003ea6:	68a3      	ldr	r3, [r4, #8]
 8003ea8:	4607      	mov	r7, r0
 8003eaa:	4616      	mov	r6, r2
 8003eac:	f109 0501 	add.w	r5, r9, #1
 8003eb0:	42ab      	cmp	r3, r5
 8003eb2:	db32      	blt.n	8003f1a <__lshift+0x86>
 8003eb4:	4638      	mov	r0, r7
 8003eb6:	f7ff fe2c 	bl	8003b12 <_Balloc>
 8003eba:	2300      	movs	r3, #0
 8003ebc:	4680      	mov	r8, r0
 8003ebe:	f100 0114 	add.w	r1, r0, #20
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4553      	cmp	r3, sl
 8003ec6:	db2b      	blt.n	8003f20 <__lshift+0x8c>
 8003ec8:	6920      	ldr	r0, [r4, #16]
 8003eca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003ece:	f104 0314 	add.w	r3, r4, #20
 8003ed2:	f016 021f 	ands.w	r2, r6, #31
 8003ed6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003eda:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003ede:	d025      	beq.n	8003f2c <__lshift+0x98>
 8003ee0:	f1c2 0e20 	rsb	lr, r2, #32
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	681e      	ldr	r6, [r3, #0]
 8003ee8:	468a      	mov	sl, r1
 8003eea:	4096      	lsls	r6, r2
 8003eec:	4330      	orrs	r0, r6
 8003eee:	f84a 0b04 	str.w	r0, [sl], #4
 8003ef2:	f853 0b04 	ldr.w	r0, [r3], #4
 8003ef6:	459c      	cmp	ip, r3
 8003ef8:	fa20 f00e 	lsr.w	r0, r0, lr
 8003efc:	d814      	bhi.n	8003f28 <__lshift+0x94>
 8003efe:	6048      	str	r0, [r1, #4]
 8003f00:	b108      	cbz	r0, 8003f06 <__lshift+0x72>
 8003f02:	f109 0502 	add.w	r5, r9, #2
 8003f06:	3d01      	subs	r5, #1
 8003f08:	4638      	mov	r0, r7
 8003f0a:	f8c8 5010 	str.w	r5, [r8, #16]
 8003f0e:	4621      	mov	r1, r4
 8003f10:	f7ff fe33 	bl	8003b7a <_Bfree>
 8003f14:	4640      	mov	r0, r8
 8003f16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f1a:	3101      	adds	r1, #1
 8003f1c:	005b      	lsls	r3, r3, #1
 8003f1e:	e7c7      	b.n	8003eb0 <__lshift+0x1c>
 8003f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003f24:	3301      	adds	r3, #1
 8003f26:	e7cd      	b.n	8003ec4 <__lshift+0x30>
 8003f28:	4651      	mov	r1, sl
 8003f2a:	e7dc      	b.n	8003ee6 <__lshift+0x52>
 8003f2c:	3904      	subs	r1, #4
 8003f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f32:	f841 2f04 	str.w	r2, [r1, #4]!
 8003f36:	459c      	cmp	ip, r3
 8003f38:	d8f9      	bhi.n	8003f2e <__lshift+0x9a>
 8003f3a:	e7e4      	b.n	8003f06 <__lshift+0x72>

08003f3c <__mcmp>:
 8003f3c:	6903      	ldr	r3, [r0, #16]
 8003f3e:	690a      	ldr	r2, [r1, #16]
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	b530      	push	{r4, r5, lr}
 8003f44:	d10c      	bne.n	8003f60 <__mcmp+0x24>
 8003f46:	0092      	lsls	r2, r2, #2
 8003f48:	3014      	adds	r0, #20
 8003f4a:	3114      	adds	r1, #20
 8003f4c:	1884      	adds	r4, r0, r2
 8003f4e:	4411      	add	r1, r2
 8003f50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003f54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003f58:	4295      	cmp	r5, r2
 8003f5a:	d003      	beq.n	8003f64 <__mcmp+0x28>
 8003f5c:	d305      	bcc.n	8003f6a <__mcmp+0x2e>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	4618      	mov	r0, r3
 8003f62:	bd30      	pop	{r4, r5, pc}
 8003f64:	42a0      	cmp	r0, r4
 8003f66:	d3f3      	bcc.n	8003f50 <__mcmp+0x14>
 8003f68:	e7fa      	b.n	8003f60 <__mcmp+0x24>
 8003f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f6e:	e7f7      	b.n	8003f60 <__mcmp+0x24>

08003f70 <__mdiff>:
 8003f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f74:	460d      	mov	r5, r1
 8003f76:	4607      	mov	r7, r0
 8003f78:	4611      	mov	r1, r2
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	4614      	mov	r4, r2
 8003f7e:	f7ff ffdd 	bl	8003f3c <__mcmp>
 8003f82:	1e06      	subs	r6, r0, #0
 8003f84:	d108      	bne.n	8003f98 <__mdiff+0x28>
 8003f86:	4631      	mov	r1, r6
 8003f88:	4638      	mov	r0, r7
 8003f8a:	f7ff fdc2 	bl	8003b12 <_Balloc>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003f94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f98:	bfa4      	itt	ge
 8003f9a:	4623      	movge	r3, r4
 8003f9c:	462c      	movge	r4, r5
 8003f9e:	4638      	mov	r0, r7
 8003fa0:	6861      	ldr	r1, [r4, #4]
 8003fa2:	bfa6      	itte	ge
 8003fa4:	461d      	movge	r5, r3
 8003fa6:	2600      	movge	r6, #0
 8003fa8:	2601      	movlt	r6, #1
 8003faa:	f7ff fdb2 	bl	8003b12 <_Balloc>
 8003fae:	692b      	ldr	r3, [r5, #16]
 8003fb0:	60c6      	str	r6, [r0, #12]
 8003fb2:	6926      	ldr	r6, [r4, #16]
 8003fb4:	f105 0914 	add.w	r9, r5, #20
 8003fb8:	f104 0214 	add.w	r2, r4, #20
 8003fbc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003fc0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003fc4:	f100 0514 	add.w	r5, r0, #20
 8003fc8:	f04f 0e00 	mov.w	lr, #0
 8003fcc:	f852 ab04 	ldr.w	sl, [r2], #4
 8003fd0:	f859 4b04 	ldr.w	r4, [r9], #4
 8003fd4:	fa1e f18a 	uxtah	r1, lr, sl
 8003fd8:	b2a3      	uxth	r3, r4
 8003fda:	1ac9      	subs	r1, r1, r3
 8003fdc:	0c23      	lsrs	r3, r4, #16
 8003fde:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8003fe2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8003fe6:	b289      	uxth	r1, r1
 8003fe8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003fec:	45c8      	cmp	r8, r9
 8003fee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8003ff2:	4694      	mov	ip, r2
 8003ff4:	f845 3b04 	str.w	r3, [r5], #4
 8003ff8:	d8e8      	bhi.n	8003fcc <__mdiff+0x5c>
 8003ffa:	45bc      	cmp	ip, r7
 8003ffc:	d304      	bcc.n	8004008 <__mdiff+0x98>
 8003ffe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004002:	b183      	cbz	r3, 8004026 <__mdiff+0xb6>
 8004004:	6106      	str	r6, [r0, #16]
 8004006:	e7c5      	b.n	8003f94 <__mdiff+0x24>
 8004008:	f85c 1b04 	ldr.w	r1, [ip], #4
 800400c:	fa1e f381 	uxtah	r3, lr, r1
 8004010:	141a      	asrs	r2, r3, #16
 8004012:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004016:	b29b      	uxth	r3, r3
 8004018:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800401c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004020:	f845 3b04 	str.w	r3, [r5], #4
 8004024:	e7e9      	b.n	8003ffa <__mdiff+0x8a>
 8004026:	3e01      	subs	r6, #1
 8004028:	e7e9      	b.n	8003ffe <__mdiff+0x8e>

0800402a <__d2b>:
 800402a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800402e:	460e      	mov	r6, r1
 8004030:	2101      	movs	r1, #1
 8004032:	ec59 8b10 	vmov	r8, r9, d0
 8004036:	4615      	mov	r5, r2
 8004038:	f7ff fd6b 	bl	8003b12 <_Balloc>
 800403c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004040:	4607      	mov	r7, r0
 8004042:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004046:	bb34      	cbnz	r4, 8004096 <__d2b+0x6c>
 8004048:	9301      	str	r3, [sp, #4]
 800404a:	f1b8 0300 	subs.w	r3, r8, #0
 800404e:	d027      	beq.n	80040a0 <__d2b+0x76>
 8004050:	a802      	add	r0, sp, #8
 8004052:	f840 3d08 	str.w	r3, [r0, #-8]!
 8004056:	f7ff fe01 	bl	8003c5c <__lo0bits>
 800405a:	9900      	ldr	r1, [sp, #0]
 800405c:	b1f0      	cbz	r0, 800409c <__d2b+0x72>
 800405e:	9a01      	ldr	r2, [sp, #4]
 8004060:	f1c0 0320 	rsb	r3, r0, #32
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	430b      	orrs	r3, r1
 800406a:	40c2      	lsrs	r2, r0
 800406c:	617b      	str	r3, [r7, #20]
 800406e:	9201      	str	r2, [sp, #4]
 8004070:	9b01      	ldr	r3, [sp, #4]
 8004072:	61bb      	str	r3, [r7, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	bf14      	ite	ne
 8004078:	2102      	movne	r1, #2
 800407a:	2101      	moveq	r1, #1
 800407c:	6139      	str	r1, [r7, #16]
 800407e:	b1c4      	cbz	r4, 80040b2 <__d2b+0x88>
 8004080:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004084:	4404      	add	r4, r0
 8004086:	6034      	str	r4, [r6, #0]
 8004088:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800408c:	6028      	str	r0, [r5, #0]
 800408e:	4638      	mov	r0, r7
 8004090:	b003      	add	sp, #12
 8004092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800409a:	e7d5      	b.n	8004048 <__d2b+0x1e>
 800409c:	6179      	str	r1, [r7, #20]
 800409e:	e7e7      	b.n	8004070 <__d2b+0x46>
 80040a0:	a801      	add	r0, sp, #4
 80040a2:	f7ff fddb 	bl	8003c5c <__lo0bits>
 80040a6:	9b01      	ldr	r3, [sp, #4]
 80040a8:	617b      	str	r3, [r7, #20]
 80040aa:	2101      	movs	r1, #1
 80040ac:	6139      	str	r1, [r7, #16]
 80040ae:	3020      	adds	r0, #32
 80040b0:	e7e5      	b.n	800407e <__d2b+0x54>
 80040b2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80040b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80040ba:	6030      	str	r0, [r6, #0]
 80040bc:	6918      	ldr	r0, [r3, #16]
 80040be:	f7ff fdae 	bl	8003c1e <__hi0bits>
 80040c2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80040c6:	e7e1      	b.n	800408c <__d2b+0x62>

080040c8 <_calloc_r>:
 80040c8:	b538      	push	{r3, r4, r5, lr}
 80040ca:	fb02 f401 	mul.w	r4, r2, r1
 80040ce:	4621      	mov	r1, r4
 80040d0:	f000 f856 	bl	8004180 <_malloc_r>
 80040d4:	4605      	mov	r5, r0
 80040d6:	b118      	cbz	r0, 80040e0 <_calloc_r+0x18>
 80040d8:	4622      	mov	r2, r4
 80040da:	2100      	movs	r1, #0
 80040dc:	f7fe fa22 	bl	8002524 <memset>
 80040e0:	4628      	mov	r0, r5
 80040e2:	bd38      	pop	{r3, r4, r5, pc}

080040e4 <_free_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	4605      	mov	r5, r0
 80040e8:	2900      	cmp	r1, #0
 80040ea:	d045      	beq.n	8004178 <_free_r+0x94>
 80040ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040f0:	1f0c      	subs	r4, r1, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bfb8      	it	lt
 80040f6:	18e4      	addlt	r4, r4, r3
 80040f8:	f000 fa17 	bl	800452a <__malloc_lock>
 80040fc:	4a1f      	ldr	r2, [pc, #124]	; (800417c <_free_r+0x98>)
 80040fe:	6813      	ldr	r3, [r2, #0]
 8004100:	4610      	mov	r0, r2
 8004102:	b933      	cbnz	r3, 8004112 <_free_r+0x2e>
 8004104:	6063      	str	r3, [r4, #4]
 8004106:	6014      	str	r4, [r2, #0]
 8004108:	4628      	mov	r0, r5
 800410a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800410e:	f000 ba0d 	b.w	800452c <__malloc_unlock>
 8004112:	42a3      	cmp	r3, r4
 8004114:	d90c      	bls.n	8004130 <_free_r+0x4c>
 8004116:	6821      	ldr	r1, [r4, #0]
 8004118:	1862      	adds	r2, r4, r1
 800411a:	4293      	cmp	r3, r2
 800411c:	bf04      	itt	eq
 800411e:	681a      	ldreq	r2, [r3, #0]
 8004120:	685b      	ldreq	r3, [r3, #4]
 8004122:	6063      	str	r3, [r4, #4]
 8004124:	bf04      	itt	eq
 8004126:	1852      	addeq	r2, r2, r1
 8004128:	6022      	streq	r2, [r4, #0]
 800412a:	6004      	str	r4, [r0, #0]
 800412c:	e7ec      	b.n	8004108 <_free_r+0x24>
 800412e:	4613      	mov	r3, r2
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	b10a      	cbz	r2, 8004138 <_free_r+0x54>
 8004134:	42a2      	cmp	r2, r4
 8004136:	d9fa      	bls.n	800412e <_free_r+0x4a>
 8004138:	6819      	ldr	r1, [r3, #0]
 800413a:	1858      	adds	r0, r3, r1
 800413c:	42a0      	cmp	r0, r4
 800413e:	d10b      	bne.n	8004158 <_free_r+0x74>
 8004140:	6820      	ldr	r0, [r4, #0]
 8004142:	4401      	add	r1, r0
 8004144:	1858      	adds	r0, r3, r1
 8004146:	4282      	cmp	r2, r0
 8004148:	6019      	str	r1, [r3, #0]
 800414a:	d1dd      	bne.n	8004108 <_free_r+0x24>
 800414c:	6810      	ldr	r0, [r2, #0]
 800414e:	6852      	ldr	r2, [r2, #4]
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	4401      	add	r1, r0
 8004154:	6019      	str	r1, [r3, #0]
 8004156:	e7d7      	b.n	8004108 <_free_r+0x24>
 8004158:	d902      	bls.n	8004160 <_free_r+0x7c>
 800415a:	230c      	movs	r3, #12
 800415c:	602b      	str	r3, [r5, #0]
 800415e:	e7d3      	b.n	8004108 <_free_r+0x24>
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	1821      	adds	r1, r4, r0
 8004164:	428a      	cmp	r2, r1
 8004166:	bf04      	itt	eq
 8004168:	6811      	ldreq	r1, [r2, #0]
 800416a:	6852      	ldreq	r2, [r2, #4]
 800416c:	6062      	str	r2, [r4, #4]
 800416e:	bf04      	itt	eq
 8004170:	1809      	addeq	r1, r1, r0
 8004172:	6021      	streq	r1, [r4, #0]
 8004174:	605c      	str	r4, [r3, #4]
 8004176:	e7c7      	b.n	8004108 <_free_r+0x24>
 8004178:	bd38      	pop	{r3, r4, r5, pc}
 800417a:	bf00      	nop
 800417c:	20000240 	.word	0x20000240

08004180 <_malloc_r>:
 8004180:	b570      	push	{r4, r5, r6, lr}
 8004182:	1ccd      	adds	r5, r1, #3
 8004184:	f025 0503 	bic.w	r5, r5, #3
 8004188:	3508      	adds	r5, #8
 800418a:	2d0c      	cmp	r5, #12
 800418c:	bf38      	it	cc
 800418e:	250c      	movcc	r5, #12
 8004190:	2d00      	cmp	r5, #0
 8004192:	4606      	mov	r6, r0
 8004194:	db01      	blt.n	800419a <_malloc_r+0x1a>
 8004196:	42a9      	cmp	r1, r5
 8004198:	d903      	bls.n	80041a2 <_malloc_r+0x22>
 800419a:	230c      	movs	r3, #12
 800419c:	6033      	str	r3, [r6, #0]
 800419e:	2000      	movs	r0, #0
 80041a0:	bd70      	pop	{r4, r5, r6, pc}
 80041a2:	f000 f9c2 	bl	800452a <__malloc_lock>
 80041a6:	4a21      	ldr	r2, [pc, #132]	; (800422c <_malloc_r+0xac>)
 80041a8:	6814      	ldr	r4, [r2, #0]
 80041aa:	4621      	mov	r1, r4
 80041ac:	b991      	cbnz	r1, 80041d4 <_malloc_r+0x54>
 80041ae:	4c20      	ldr	r4, [pc, #128]	; (8004230 <_malloc_r+0xb0>)
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	b91b      	cbnz	r3, 80041bc <_malloc_r+0x3c>
 80041b4:	4630      	mov	r0, r6
 80041b6:	f000 f98f 	bl	80044d8 <_sbrk_r>
 80041ba:	6020      	str	r0, [r4, #0]
 80041bc:	4629      	mov	r1, r5
 80041be:	4630      	mov	r0, r6
 80041c0:	f000 f98a 	bl	80044d8 <_sbrk_r>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	d124      	bne.n	8004212 <_malloc_r+0x92>
 80041c8:	230c      	movs	r3, #12
 80041ca:	6033      	str	r3, [r6, #0]
 80041cc:	4630      	mov	r0, r6
 80041ce:	f000 f9ad 	bl	800452c <__malloc_unlock>
 80041d2:	e7e4      	b.n	800419e <_malloc_r+0x1e>
 80041d4:	680b      	ldr	r3, [r1, #0]
 80041d6:	1b5b      	subs	r3, r3, r5
 80041d8:	d418      	bmi.n	800420c <_malloc_r+0x8c>
 80041da:	2b0b      	cmp	r3, #11
 80041dc:	d90f      	bls.n	80041fe <_malloc_r+0x7e>
 80041de:	600b      	str	r3, [r1, #0]
 80041e0:	50cd      	str	r5, [r1, r3]
 80041e2:	18cc      	adds	r4, r1, r3
 80041e4:	4630      	mov	r0, r6
 80041e6:	f000 f9a1 	bl	800452c <__malloc_unlock>
 80041ea:	f104 000b 	add.w	r0, r4, #11
 80041ee:	1d23      	adds	r3, r4, #4
 80041f0:	f020 0007 	bic.w	r0, r0, #7
 80041f4:	1ac3      	subs	r3, r0, r3
 80041f6:	d0d3      	beq.n	80041a0 <_malloc_r+0x20>
 80041f8:	425a      	negs	r2, r3
 80041fa:	50e2      	str	r2, [r4, r3]
 80041fc:	e7d0      	b.n	80041a0 <_malloc_r+0x20>
 80041fe:	428c      	cmp	r4, r1
 8004200:	684b      	ldr	r3, [r1, #4]
 8004202:	bf16      	itet	ne
 8004204:	6063      	strne	r3, [r4, #4]
 8004206:	6013      	streq	r3, [r2, #0]
 8004208:	460c      	movne	r4, r1
 800420a:	e7eb      	b.n	80041e4 <_malloc_r+0x64>
 800420c:	460c      	mov	r4, r1
 800420e:	6849      	ldr	r1, [r1, #4]
 8004210:	e7cc      	b.n	80041ac <_malloc_r+0x2c>
 8004212:	1cc4      	adds	r4, r0, #3
 8004214:	f024 0403 	bic.w	r4, r4, #3
 8004218:	42a0      	cmp	r0, r4
 800421a:	d005      	beq.n	8004228 <_malloc_r+0xa8>
 800421c:	1a21      	subs	r1, r4, r0
 800421e:	4630      	mov	r0, r6
 8004220:	f000 f95a 	bl	80044d8 <_sbrk_r>
 8004224:	3001      	adds	r0, #1
 8004226:	d0cf      	beq.n	80041c8 <_malloc_r+0x48>
 8004228:	6025      	str	r5, [r4, #0]
 800422a:	e7db      	b.n	80041e4 <_malloc_r+0x64>
 800422c:	20000240 	.word	0x20000240
 8004230:	20000244 	.word	0x20000244

08004234 <__ssputs_r>:
 8004234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004238:	688e      	ldr	r6, [r1, #8]
 800423a:	429e      	cmp	r6, r3
 800423c:	4682      	mov	sl, r0
 800423e:	460c      	mov	r4, r1
 8004240:	4690      	mov	r8, r2
 8004242:	4699      	mov	r9, r3
 8004244:	d837      	bhi.n	80042b6 <__ssputs_r+0x82>
 8004246:	898a      	ldrh	r2, [r1, #12]
 8004248:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800424c:	d031      	beq.n	80042b2 <__ssputs_r+0x7e>
 800424e:	6825      	ldr	r5, [r4, #0]
 8004250:	6909      	ldr	r1, [r1, #16]
 8004252:	1a6f      	subs	r7, r5, r1
 8004254:	6965      	ldr	r5, [r4, #20]
 8004256:	2302      	movs	r3, #2
 8004258:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800425c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004260:	f109 0301 	add.w	r3, r9, #1
 8004264:	443b      	add	r3, r7
 8004266:	429d      	cmp	r5, r3
 8004268:	bf38      	it	cc
 800426a:	461d      	movcc	r5, r3
 800426c:	0553      	lsls	r3, r2, #21
 800426e:	d530      	bpl.n	80042d2 <__ssputs_r+0x9e>
 8004270:	4629      	mov	r1, r5
 8004272:	f7ff ff85 	bl	8004180 <_malloc_r>
 8004276:	4606      	mov	r6, r0
 8004278:	b950      	cbnz	r0, 8004290 <__ssputs_r+0x5c>
 800427a:	230c      	movs	r3, #12
 800427c:	f8ca 3000 	str.w	r3, [sl]
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004286:	81a3      	strh	r3, [r4, #12]
 8004288:	f04f 30ff 	mov.w	r0, #4294967295
 800428c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004290:	463a      	mov	r2, r7
 8004292:	6921      	ldr	r1, [r4, #16]
 8004294:	f7ff fc32 	bl	8003afc <memcpy>
 8004298:	89a3      	ldrh	r3, [r4, #12]
 800429a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800429e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a2:	81a3      	strh	r3, [r4, #12]
 80042a4:	6126      	str	r6, [r4, #16]
 80042a6:	6165      	str	r5, [r4, #20]
 80042a8:	443e      	add	r6, r7
 80042aa:	1bed      	subs	r5, r5, r7
 80042ac:	6026      	str	r6, [r4, #0]
 80042ae:	60a5      	str	r5, [r4, #8]
 80042b0:	464e      	mov	r6, r9
 80042b2:	454e      	cmp	r6, r9
 80042b4:	d900      	bls.n	80042b8 <__ssputs_r+0x84>
 80042b6:	464e      	mov	r6, r9
 80042b8:	4632      	mov	r2, r6
 80042ba:	4641      	mov	r1, r8
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	f000 f91b 	bl	80044f8 <memmove>
 80042c2:	68a3      	ldr	r3, [r4, #8]
 80042c4:	1b9b      	subs	r3, r3, r6
 80042c6:	60a3      	str	r3, [r4, #8]
 80042c8:	6823      	ldr	r3, [r4, #0]
 80042ca:	441e      	add	r6, r3
 80042cc:	6026      	str	r6, [r4, #0]
 80042ce:	2000      	movs	r0, #0
 80042d0:	e7dc      	b.n	800428c <__ssputs_r+0x58>
 80042d2:	462a      	mov	r2, r5
 80042d4:	f000 f92b 	bl	800452e <_realloc_r>
 80042d8:	4606      	mov	r6, r0
 80042da:	2800      	cmp	r0, #0
 80042dc:	d1e2      	bne.n	80042a4 <__ssputs_r+0x70>
 80042de:	6921      	ldr	r1, [r4, #16]
 80042e0:	4650      	mov	r0, sl
 80042e2:	f7ff feff 	bl	80040e4 <_free_r>
 80042e6:	e7c8      	b.n	800427a <__ssputs_r+0x46>

080042e8 <_svfiprintf_r>:
 80042e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042ec:	461d      	mov	r5, r3
 80042ee:	898b      	ldrh	r3, [r1, #12]
 80042f0:	061f      	lsls	r7, r3, #24
 80042f2:	b09d      	sub	sp, #116	; 0x74
 80042f4:	4680      	mov	r8, r0
 80042f6:	460c      	mov	r4, r1
 80042f8:	4616      	mov	r6, r2
 80042fa:	d50f      	bpl.n	800431c <_svfiprintf_r+0x34>
 80042fc:	690b      	ldr	r3, [r1, #16]
 80042fe:	b96b      	cbnz	r3, 800431c <_svfiprintf_r+0x34>
 8004300:	2140      	movs	r1, #64	; 0x40
 8004302:	f7ff ff3d 	bl	8004180 <_malloc_r>
 8004306:	6020      	str	r0, [r4, #0]
 8004308:	6120      	str	r0, [r4, #16]
 800430a:	b928      	cbnz	r0, 8004318 <_svfiprintf_r+0x30>
 800430c:	230c      	movs	r3, #12
 800430e:	f8c8 3000 	str.w	r3, [r8]
 8004312:	f04f 30ff 	mov.w	r0, #4294967295
 8004316:	e0c8      	b.n	80044aa <_svfiprintf_r+0x1c2>
 8004318:	2340      	movs	r3, #64	; 0x40
 800431a:	6163      	str	r3, [r4, #20]
 800431c:	2300      	movs	r3, #0
 800431e:	9309      	str	r3, [sp, #36]	; 0x24
 8004320:	2320      	movs	r3, #32
 8004322:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004326:	2330      	movs	r3, #48	; 0x30
 8004328:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800432c:	9503      	str	r5, [sp, #12]
 800432e:	f04f 0b01 	mov.w	fp, #1
 8004332:	4637      	mov	r7, r6
 8004334:	463d      	mov	r5, r7
 8004336:	f815 3b01 	ldrb.w	r3, [r5], #1
 800433a:	b10b      	cbz	r3, 8004340 <_svfiprintf_r+0x58>
 800433c:	2b25      	cmp	r3, #37	; 0x25
 800433e:	d13e      	bne.n	80043be <_svfiprintf_r+0xd6>
 8004340:	ebb7 0a06 	subs.w	sl, r7, r6
 8004344:	d00b      	beq.n	800435e <_svfiprintf_r+0x76>
 8004346:	4653      	mov	r3, sl
 8004348:	4632      	mov	r2, r6
 800434a:	4621      	mov	r1, r4
 800434c:	4640      	mov	r0, r8
 800434e:	f7ff ff71 	bl	8004234 <__ssputs_r>
 8004352:	3001      	adds	r0, #1
 8004354:	f000 80a4 	beq.w	80044a0 <_svfiprintf_r+0x1b8>
 8004358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800435a:	4453      	add	r3, sl
 800435c:	9309      	str	r3, [sp, #36]	; 0x24
 800435e:	783b      	ldrb	r3, [r7, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 809d 	beq.w	80044a0 <_svfiprintf_r+0x1b8>
 8004366:	2300      	movs	r3, #0
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
 800436c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004370:	9304      	str	r3, [sp, #16]
 8004372:	9307      	str	r3, [sp, #28]
 8004374:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004378:	931a      	str	r3, [sp, #104]	; 0x68
 800437a:	462f      	mov	r7, r5
 800437c:	2205      	movs	r2, #5
 800437e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004382:	4850      	ldr	r0, [pc, #320]	; (80044c4 <_svfiprintf_r+0x1dc>)
 8004384:	f7fb ff2c 	bl	80001e0 <memchr>
 8004388:	9b04      	ldr	r3, [sp, #16]
 800438a:	b9d0      	cbnz	r0, 80043c2 <_svfiprintf_r+0xda>
 800438c:	06d9      	lsls	r1, r3, #27
 800438e:	bf44      	itt	mi
 8004390:	2220      	movmi	r2, #32
 8004392:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004396:	071a      	lsls	r2, r3, #28
 8004398:	bf44      	itt	mi
 800439a:	222b      	movmi	r2, #43	; 0x2b
 800439c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043a0:	782a      	ldrb	r2, [r5, #0]
 80043a2:	2a2a      	cmp	r2, #42	; 0x2a
 80043a4:	d015      	beq.n	80043d2 <_svfiprintf_r+0xea>
 80043a6:	9a07      	ldr	r2, [sp, #28]
 80043a8:	462f      	mov	r7, r5
 80043aa:	2000      	movs	r0, #0
 80043ac:	250a      	movs	r5, #10
 80043ae:	4639      	mov	r1, r7
 80043b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043b4:	3b30      	subs	r3, #48	; 0x30
 80043b6:	2b09      	cmp	r3, #9
 80043b8:	d94d      	bls.n	8004456 <_svfiprintf_r+0x16e>
 80043ba:	b1b8      	cbz	r0, 80043ec <_svfiprintf_r+0x104>
 80043bc:	e00f      	b.n	80043de <_svfiprintf_r+0xf6>
 80043be:	462f      	mov	r7, r5
 80043c0:	e7b8      	b.n	8004334 <_svfiprintf_r+0x4c>
 80043c2:	4a40      	ldr	r2, [pc, #256]	; (80044c4 <_svfiprintf_r+0x1dc>)
 80043c4:	1a80      	subs	r0, r0, r2
 80043c6:	fa0b f000 	lsl.w	r0, fp, r0
 80043ca:	4318      	orrs	r0, r3
 80043cc:	9004      	str	r0, [sp, #16]
 80043ce:	463d      	mov	r5, r7
 80043d0:	e7d3      	b.n	800437a <_svfiprintf_r+0x92>
 80043d2:	9a03      	ldr	r2, [sp, #12]
 80043d4:	1d11      	adds	r1, r2, #4
 80043d6:	6812      	ldr	r2, [r2, #0]
 80043d8:	9103      	str	r1, [sp, #12]
 80043da:	2a00      	cmp	r2, #0
 80043dc:	db01      	blt.n	80043e2 <_svfiprintf_r+0xfa>
 80043de:	9207      	str	r2, [sp, #28]
 80043e0:	e004      	b.n	80043ec <_svfiprintf_r+0x104>
 80043e2:	4252      	negs	r2, r2
 80043e4:	f043 0302 	orr.w	r3, r3, #2
 80043e8:	9207      	str	r2, [sp, #28]
 80043ea:	9304      	str	r3, [sp, #16]
 80043ec:	783b      	ldrb	r3, [r7, #0]
 80043ee:	2b2e      	cmp	r3, #46	; 0x2e
 80043f0:	d10c      	bne.n	800440c <_svfiprintf_r+0x124>
 80043f2:	787b      	ldrb	r3, [r7, #1]
 80043f4:	2b2a      	cmp	r3, #42	; 0x2a
 80043f6:	d133      	bne.n	8004460 <_svfiprintf_r+0x178>
 80043f8:	9b03      	ldr	r3, [sp, #12]
 80043fa:	1d1a      	adds	r2, r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	9203      	str	r2, [sp, #12]
 8004400:	2b00      	cmp	r3, #0
 8004402:	bfb8      	it	lt
 8004404:	f04f 33ff 	movlt.w	r3, #4294967295
 8004408:	3702      	adds	r7, #2
 800440a:	9305      	str	r3, [sp, #20]
 800440c:	4d2e      	ldr	r5, [pc, #184]	; (80044c8 <_svfiprintf_r+0x1e0>)
 800440e:	7839      	ldrb	r1, [r7, #0]
 8004410:	2203      	movs	r2, #3
 8004412:	4628      	mov	r0, r5
 8004414:	f7fb fee4 	bl	80001e0 <memchr>
 8004418:	b138      	cbz	r0, 800442a <_svfiprintf_r+0x142>
 800441a:	2340      	movs	r3, #64	; 0x40
 800441c:	1b40      	subs	r0, r0, r5
 800441e:	fa03 f000 	lsl.w	r0, r3, r0
 8004422:	9b04      	ldr	r3, [sp, #16]
 8004424:	4303      	orrs	r3, r0
 8004426:	3701      	adds	r7, #1
 8004428:	9304      	str	r3, [sp, #16]
 800442a:	7839      	ldrb	r1, [r7, #0]
 800442c:	4827      	ldr	r0, [pc, #156]	; (80044cc <_svfiprintf_r+0x1e4>)
 800442e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004432:	2206      	movs	r2, #6
 8004434:	1c7e      	adds	r6, r7, #1
 8004436:	f7fb fed3 	bl	80001e0 <memchr>
 800443a:	2800      	cmp	r0, #0
 800443c:	d038      	beq.n	80044b0 <_svfiprintf_r+0x1c8>
 800443e:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <_svfiprintf_r+0x1e8>)
 8004440:	bb13      	cbnz	r3, 8004488 <_svfiprintf_r+0x1a0>
 8004442:	9b03      	ldr	r3, [sp, #12]
 8004444:	3307      	adds	r3, #7
 8004446:	f023 0307 	bic.w	r3, r3, #7
 800444a:	3308      	adds	r3, #8
 800444c:	9303      	str	r3, [sp, #12]
 800444e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004450:	444b      	add	r3, r9
 8004452:	9309      	str	r3, [sp, #36]	; 0x24
 8004454:	e76d      	b.n	8004332 <_svfiprintf_r+0x4a>
 8004456:	fb05 3202 	mla	r2, r5, r2, r3
 800445a:	2001      	movs	r0, #1
 800445c:	460f      	mov	r7, r1
 800445e:	e7a6      	b.n	80043ae <_svfiprintf_r+0xc6>
 8004460:	2300      	movs	r3, #0
 8004462:	3701      	adds	r7, #1
 8004464:	9305      	str	r3, [sp, #20]
 8004466:	4619      	mov	r1, r3
 8004468:	250a      	movs	r5, #10
 800446a:	4638      	mov	r0, r7
 800446c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004470:	3a30      	subs	r2, #48	; 0x30
 8004472:	2a09      	cmp	r2, #9
 8004474:	d903      	bls.n	800447e <_svfiprintf_r+0x196>
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0c8      	beq.n	800440c <_svfiprintf_r+0x124>
 800447a:	9105      	str	r1, [sp, #20]
 800447c:	e7c6      	b.n	800440c <_svfiprintf_r+0x124>
 800447e:	fb05 2101 	mla	r1, r5, r1, r2
 8004482:	2301      	movs	r3, #1
 8004484:	4607      	mov	r7, r0
 8004486:	e7f0      	b.n	800446a <_svfiprintf_r+0x182>
 8004488:	ab03      	add	r3, sp, #12
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4622      	mov	r2, r4
 800448e:	4b11      	ldr	r3, [pc, #68]	; (80044d4 <_svfiprintf_r+0x1ec>)
 8004490:	a904      	add	r1, sp, #16
 8004492:	4640      	mov	r0, r8
 8004494:	f7fe f8e2 	bl	800265c <_printf_float>
 8004498:	f1b0 3fff 	cmp.w	r0, #4294967295
 800449c:	4681      	mov	r9, r0
 800449e:	d1d6      	bne.n	800444e <_svfiprintf_r+0x166>
 80044a0:	89a3      	ldrh	r3, [r4, #12]
 80044a2:	065b      	lsls	r3, r3, #25
 80044a4:	f53f af35 	bmi.w	8004312 <_svfiprintf_r+0x2a>
 80044a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044aa:	b01d      	add	sp, #116	; 0x74
 80044ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b0:	ab03      	add	r3, sp, #12
 80044b2:	9300      	str	r3, [sp, #0]
 80044b4:	4622      	mov	r2, r4
 80044b6:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <_svfiprintf_r+0x1ec>)
 80044b8:	a904      	add	r1, sp, #16
 80044ba:	4640      	mov	r0, r8
 80044bc:	f7fe fb84 	bl	8002bc8 <_printf_i>
 80044c0:	e7ea      	b.n	8004498 <_svfiprintf_r+0x1b0>
 80044c2:	bf00      	nop
 80044c4:	080048c4 	.word	0x080048c4
 80044c8:	080048ca 	.word	0x080048ca
 80044cc:	080048ce 	.word	0x080048ce
 80044d0:	0800265d 	.word	0x0800265d
 80044d4:	08004235 	.word	0x08004235

080044d8 <_sbrk_r>:
 80044d8:	b538      	push	{r3, r4, r5, lr}
 80044da:	4c06      	ldr	r4, [pc, #24]	; (80044f4 <_sbrk_r+0x1c>)
 80044dc:	2300      	movs	r3, #0
 80044de:	4605      	mov	r5, r0
 80044e0:	4608      	mov	r0, r1
 80044e2:	6023      	str	r3, [r4, #0]
 80044e4:	f7fc ff9a 	bl	800141c <_sbrk>
 80044e8:	1c43      	adds	r3, r0, #1
 80044ea:	d102      	bne.n	80044f2 <_sbrk_r+0x1a>
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	b103      	cbz	r3, 80044f2 <_sbrk_r+0x1a>
 80044f0:	602b      	str	r3, [r5, #0]
 80044f2:	bd38      	pop	{r3, r4, r5, pc}
 80044f4:	20000264 	.word	0x20000264

080044f8 <memmove>:
 80044f8:	4288      	cmp	r0, r1
 80044fa:	b510      	push	{r4, lr}
 80044fc:	eb01 0302 	add.w	r3, r1, r2
 8004500:	d807      	bhi.n	8004512 <memmove+0x1a>
 8004502:	1e42      	subs	r2, r0, #1
 8004504:	4299      	cmp	r1, r3
 8004506:	d00a      	beq.n	800451e <memmove+0x26>
 8004508:	f811 4b01 	ldrb.w	r4, [r1], #1
 800450c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004510:	e7f8      	b.n	8004504 <memmove+0xc>
 8004512:	4283      	cmp	r3, r0
 8004514:	d9f5      	bls.n	8004502 <memmove+0xa>
 8004516:	1881      	adds	r1, r0, r2
 8004518:	1ad2      	subs	r2, r2, r3
 800451a:	42d3      	cmn	r3, r2
 800451c:	d100      	bne.n	8004520 <memmove+0x28>
 800451e:	bd10      	pop	{r4, pc}
 8004520:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004524:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004528:	e7f7      	b.n	800451a <memmove+0x22>

0800452a <__malloc_lock>:
 800452a:	4770      	bx	lr

0800452c <__malloc_unlock>:
 800452c:	4770      	bx	lr

0800452e <_realloc_r>:
 800452e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004530:	4607      	mov	r7, r0
 8004532:	4614      	mov	r4, r2
 8004534:	460e      	mov	r6, r1
 8004536:	b921      	cbnz	r1, 8004542 <_realloc_r+0x14>
 8004538:	4611      	mov	r1, r2
 800453a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800453e:	f7ff be1f 	b.w	8004180 <_malloc_r>
 8004542:	b922      	cbnz	r2, 800454e <_realloc_r+0x20>
 8004544:	f7ff fdce 	bl	80040e4 <_free_r>
 8004548:	4625      	mov	r5, r4
 800454a:	4628      	mov	r0, r5
 800454c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800454e:	f000 f814 	bl	800457a <_malloc_usable_size_r>
 8004552:	42a0      	cmp	r0, r4
 8004554:	d20f      	bcs.n	8004576 <_realloc_r+0x48>
 8004556:	4621      	mov	r1, r4
 8004558:	4638      	mov	r0, r7
 800455a:	f7ff fe11 	bl	8004180 <_malloc_r>
 800455e:	4605      	mov	r5, r0
 8004560:	2800      	cmp	r0, #0
 8004562:	d0f2      	beq.n	800454a <_realloc_r+0x1c>
 8004564:	4631      	mov	r1, r6
 8004566:	4622      	mov	r2, r4
 8004568:	f7ff fac8 	bl	8003afc <memcpy>
 800456c:	4631      	mov	r1, r6
 800456e:	4638      	mov	r0, r7
 8004570:	f7ff fdb8 	bl	80040e4 <_free_r>
 8004574:	e7e9      	b.n	800454a <_realloc_r+0x1c>
 8004576:	4635      	mov	r5, r6
 8004578:	e7e7      	b.n	800454a <_realloc_r+0x1c>

0800457a <_malloc_usable_size_r>:
 800457a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800457e:	1f18      	subs	r0, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	bfbc      	itt	lt
 8004584:	580b      	ldrlt	r3, [r1, r0]
 8004586:	18c0      	addlt	r0, r0, r3
 8004588:	4770      	bx	lr
	...

0800458c <_init>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	bf00      	nop
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr

08004598 <_fini>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	bf00      	nop
 800459c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459e:	bc08      	pop	{r3}
 80045a0:	469e      	mov	lr, r3
 80045a2:	4770      	bx	lr
